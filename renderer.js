var main = (function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var renderer_go = createCommonjsModule(function (module) {
	(function() {

	Error.stackTraceLimit = Infinity;

	var $global;
	if (typeof window !== "undefined") { /* web page */
	  $global = window;
	} else if (typeof self !== "undefined") { /* web worker */
	  $global = self;
	} else if (typeof commonjsGlobal !== "undefined") { /* Node.js */
	  $global = commonjsGlobal;
	  $global.require = commonjsRequire;
	} else { /* others (e.g. Nashorn) */
	  $global = this;
	}

	if ($global === undefined || $global.Array === undefined) {
	  throw new Error("no global object found");
	}

	var $packages = {}, $idCounter = 0;
	var $keys = function(m) { return m ? Object.keys(m) : []; };
	var $flushConsole = function() {};
	var $throwRuntimeError; /* set by package "runtime" */
	var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
	var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
	var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
	var $unused = function(v) {};

	var $mapArray = function(array, f) {
	  var newArray = new array.constructor(array.length);
	  for (var i = 0; i < array.length; i++) {
	    newArray[i] = f(array[i]);
	  }
	  return newArray;
	};

	var $methodVal = function(recv, name) {
	  var vals = recv.$methodVals || {};
	  recv.$methodVals = vals; /* noop for primitives */
	  var f = vals[name];
	  if (f !== undefined) {
	    return f;
	  }
	  var method = recv[name];
	  f = function() {
	    $stackDepthOffset--;
	    try {
	      return method.apply(recv, arguments);
	    } finally {
	      $stackDepthOffset++;
	    }
	  };
	  vals[name] = f;
	  return f;
	};

	var $subslice = function(slice, low, high, max) {
	  if (high === undefined) {
	    high = slice.$length;
	  }
	  if (max === undefined) {
	    max = slice.$capacity;
	  }
	  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
	    $throwRuntimeError("slice bounds out of range");
	  }
	  if (slice === slice.constructor.nil) {
	    return slice;
	  }
	  var s = new slice.constructor(slice.$array);
	  s.$offset = slice.$offset + low;
	  s.$length = high - low;
	  s.$capacity = max - low;
	  return s;
	};

	var $substring = function(str, low, high) {
	  if (low < 0 || high < low || high > str.length) {
	    $throwRuntimeError("slice bounds out of range");
	  }
	  return str.substring(low, high);
	};

	var $sliceToArray = function(slice) {
	  if (slice.$array.constructor !== Array) {
	    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
	  }
	  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
	};

	var $decodeRune = function(str, pos) {
	  var c0 = str.charCodeAt(pos);

	  if (c0 < 0x80) {
	    return [c0, 1];
	  }

	  if (c0 !== c0 || c0 < 0xC0) {
	    return [0xFFFD, 1];
	  }

	  var c1 = str.charCodeAt(pos + 1);
	  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
	    return [0xFFFD, 1];
	  }

	  if (c0 < 0xE0) {
	    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
	    if (r <= 0x7F) {
	      return [0xFFFD, 1];
	    }
	    return [r, 2];
	  }

	  var c2 = str.charCodeAt(pos + 2);
	  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
	    return [0xFFFD, 1];
	  }

	  if (c0 < 0xF0) {
	    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
	    if (r <= 0x7FF) {
	      return [0xFFFD, 1];
	    }
	    if (0xD800 <= r && r <= 0xDFFF) {
	      return [0xFFFD, 1];
	    }
	    return [r, 3];
	  }

	  var c3 = str.charCodeAt(pos + 3);
	  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
	    return [0xFFFD, 1];
	  }

	  if (c0 < 0xF8) {
	    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
	    if (r <= 0xFFFF || 0x10FFFF < r) {
	      return [0xFFFD, 1];
	    }
	    return [r, 4];
	  }

	  return [0xFFFD, 1];
	};

	var $encodeRune = function(r) {
	  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
	    r = 0xFFFD;
	  }
	  if (r <= 0x7F) {
	    return String.fromCharCode(r);
	  }
	  if (r <= 0x7FF) {
	    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
	  }
	  if (r <= 0xFFFF) {
	    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
	  }
	  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
	};

	var $stringToBytes = function(str) {
	  var array = new Uint8Array(str.length);
	  for (var i = 0; i < str.length; i++) {
	    array[i] = str.charCodeAt(i);
	  }
	  return array;
	};

	var $bytesToString = function(slice) {
	  if (slice.$length === 0) {
	    return "";
	  }
	  var str = "";
	  for (var i = 0; i < slice.$length; i += 10000) {
	    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
	  }
	  return str;
	};

	var $stringToRunes = function(str) {
	  var array = new Int32Array(str.length);
	  var rune, j = 0;
	  for (var i = 0; i < str.length; i += rune[1], j++) {
	    rune = $decodeRune(str, i);
	    array[j] = rune[0];
	  }
	  return array.subarray(0, j);
	};

	var $runesToString = function(slice) {
	  if (slice.$length === 0) {
	    return "";
	  }
	  var str = "";
	  for (var i = 0; i < slice.$length; i++) {
	    str += $encodeRune(slice.$array[slice.$offset + i]);
	  }
	  return str;
	};

	var $copyString = function(dst, src) {
	  var n = Math.min(src.length, dst.$length);
	  for (var i = 0; i < n; i++) {
	    dst.$array[dst.$offset + i] = src.charCodeAt(i);
	  }
	  return n;
	};

	var $copySlice = function(dst, src) {
	  var n = Math.min(src.$length, dst.$length);
	  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
	  return n;
	};

	var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
	  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
	    return;
	  }

	  if (src.subarray) {
	    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
	    return;
	  }

	  switch (elem.kind) {
	  case $kindArray:
	  case $kindStruct:
	    if (dst === src && dstOffset > srcOffset) {
	      for (var i = n - 1; i >= 0; i--) {
	        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
	      }
	      return;
	    }
	    for (var i = 0; i < n; i++) {
	      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
	    }
	    return;
	  }

	  if (dst === src && dstOffset > srcOffset) {
	    for (var i = n - 1; i >= 0; i--) {
	      dst[dstOffset + i] = src[srcOffset + i];
	    }
	    return;
	  }
	  for (var i = 0; i < n; i++) {
	    dst[dstOffset + i] = src[srcOffset + i];
	  }
	};

	var $clone = function(src, type) {
	  var clone = type.zero();
	  type.copy(clone, src);
	  return clone;
	};

	var $pointerOfStructConversion = function(obj, type) {
	  if(obj.$proxies === undefined) {
	    obj.$proxies = {};
	    obj.$proxies[obj.constructor.string] = obj;
	  }
	  var proxy = obj.$proxies[type.string];
	  if (proxy === undefined) {
	    var properties = {};
	    for (var i = 0; i < type.elem.fields.length; i++) {
	      (function(fieldProp) {
	        properties[fieldProp] = {
	          get: function() { return obj[fieldProp]; },
	          set: function(value) { obj[fieldProp] = value; }
	        };
	      })(type.elem.fields[i].prop);
	    }
	    proxy = Object.create(type.prototype, properties);
	    proxy.$val = proxy;
	    obj.$proxies[type.string] = proxy;
	    proxy.$proxies = obj.$proxies;
	  }
	  return proxy;
	};

	var $append = function(slice) {
	  return $internalAppend(slice, arguments, 1, arguments.length - 1);
	};

	var $appendSlice = function(slice, toAppend) {
	  if (toAppend.constructor === String) {
	    var bytes = $stringToBytes(toAppend);
	    return $internalAppend(slice, bytes, 0, bytes.length);
	  }
	  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
	};

	var $internalAppend = function(slice, array, offset, length) {
	  if (length === 0) {
	    return slice;
	  }

	  var newArray = slice.$array;
	  var newOffset = slice.$offset;
	  var newLength = slice.$length + length;
	  var newCapacity = slice.$capacity;

	  if (newLength > newCapacity) {
	    newOffset = 0;
	    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

	    if (slice.$array.constructor === Array) {
	      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
	      newArray.length = newCapacity;
	      var zero = slice.constructor.elem.zero;
	      for (var i = slice.$length; i < newCapacity; i++) {
	        newArray[i] = zero();
	      }
	    } else {
	      newArray = new slice.$array.constructor(newCapacity);
	      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
	    }
	  }

	  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

	  var newSlice = new slice.constructor(newArray);
	  newSlice.$offset = newOffset;
	  newSlice.$length = newLength;
	  newSlice.$capacity = newCapacity;
	  return newSlice;
	};

	var $equal = function(a, b, type) {
	  if (type === $jsObjectPtr) {
	    return a === b;
	  }
	  switch (type.kind) {
	  case $kindComplex64:
	  case $kindComplex128:
	    return a.$real === b.$real && a.$imag === b.$imag;
	  case $kindInt64:
	  case $kindUint64:
	    return a.$high === b.$high && a.$low === b.$low;
	  case $kindArray:
	    if (a.length !== b.length) {
	      return false;
	    }
	    for (var i = 0; i < a.length; i++) {
	      if (!$equal(a[i], b[i], type.elem)) {
	        return false;
	      }
	    }
	    return true;
	  case $kindStruct:
	    for (var i = 0; i < type.fields.length; i++) {
	      var f = type.fields[i];
	      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
	        return false;
	      }
	    }
	    return true;
	  case $kindInterface:
	    return $interfaceIsEqual(a, b);
	  default:
	    return a === b;
	  }
	};

	var $interfaceIsEqual = function(a, b) {
	  if (a === $ifaceNil || b === $ifaceNil) {
	    return a === b;
	  }
	  if (a.constructor !== b.constructor) {
	    return false;
	  }
	  if (a.constructor === $jsObjectPtr) {
	    return a.object === b.object;
	  }
	  if (!a.constructor.comparable) {
	    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
	  }
	  return $equal(a.$val, b.$val, a.constructor);
	};

	var $min = Math.min;
	var $parseInt = parseInt;
	var $parseFloat = function(f) {
	  if (f !== undefined && f !== null && f.constructor === Number) {
	    return f;
	  }
	  return parseFloat(f);
	};

	var $froundBuf = new Float32Array(1);
	var $fround = Math.fround || function(f) {
	  $froundBuf[0] = f;
	  return $froundBuf[0];
	};

	var $imul = Math.imul || function(a, b) {
	  var ah = (a >>> 16) & 0xffff;
	  var al = a & 0xffff;
	  var bh = (b >>> 16) & 0xffff;
	  var bl = b & 0xffff;
	  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
	};

	var $floatKey = function(f) {
	  if (f !== f) {
	    $idCounter++;
	    return "NaN$" + $idCounter;
	  }
	  return String(f);
	};

	var $flatten64 = function(x) {
	  return x.$high * 4294967296 + x.$low;
	};

	var $shiftLeft64 = function(x, y) {
	  if (y === 0) {
	    return x;
	  }
	  if (y < 32) {
	    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
	  }
	  if (y < 64) {
	    return new x.constructor(x.$low << (y - 32), 0);
	  }
	  return new x.constructor(0, 0);
	};

	var $shiftRightInt64 = function(x, y) {
	  if (y === 0) {
	    return x;
	  }
	  if (y < 32) {
	    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
	  }
	  if (y < 64) {
	    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
	  }
	  if (x.$high < 0) {
	    return new x.constructor(-1, 4294967295);
	  }
	  return new x.constructor(0, 0);
	};

	var $shiftRightUint64 = function(x, y) {
	  if (y === 0) {
	    return x;
	  }
	  if (y < 32) {
	    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
	  }
	  if (y < 64) {
	    return new x.constructor(0, x.$high >>> (y - 32));
	  }
	  return new x.constructor(0, 0);
	};

	var $mul64 = function(x, y) {
	  var high = 0, low = 0;
	  if ((y.$low & 1) !== 0) {
	    high = x.$high;
	    low = x.$low;
	  }
	  for (var i = 1; i < 32; i++) {
	    if ((y.$low & 1<<i) !== 0) {
	      high += x.$high << i | x.$low >>> (32 - i);
	      low += (x.$low << i) >>> 0;
	    }
	  }
	  for (var i = 0; i < 32; i++) {
	    if ((y.$high & 1<<i) !== 0) {
	      high += x.$low << i;
	    }
	  }
	  return new x.constructor(high, low);
	};

	var $div64 = function(x, y, returnRemainder) {
	  if (y.$high === 0 && y.$low === 0) {
	    $throwRuntimeError("integer divide by zero");
	  }

	  var s = 1;
	  var rs = 1;

	  var xHigh = x.$high;
	  var xLow = x.$low;
	  if (xHigh < 0) {
	    s = -1;
	    rs = -1;
	    xHigh = -xHigh;
	    if (xLow !== 0) {
	      xHigh--;
	      xLow = 4294967296 - xLow;
	    }
	  }

	  var yHigh = y.$high;
	  var yLow = y.$low;
	  if (y.$high < 0) {
	    s *= -1;
	    yHigh = -yHigh;
	    if (yLow !== 0) {
	      yHigh--;
	      yLow = 4294967296 - yLow;
	    }
	  }

	  var high = 0, low = 0, n = 0;
	  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
	    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
	    yLow = (yLow << 1) >>> 0;
	    n++;
	  }
	  for (var i = 0; i <= n; i++) {
	    high = high << 1 | low >>> 31;
	    low = (low << 1) >>> 0;
	    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
	      xHigh = xHigh - yHigh;
	      xLow = xLow - yLow;
	      if (xLow < 0) {
	        xHigh--;
	        xLow += 4294967296;
	      }
	      low++;
	      if (low === 4294967296) {
	        high++;
	        low = 0;
	      }
	    }
	    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
	    yHigh = yHigh >>> 1;
	  }

	  if (returnRemainder) {
	    return new x.constructor(xHigh * rs, xLow * rs);
	  }
	  return new x.constructor(high * s, low * s);
	};

	var $kindBool = 1;
	var $kindInt = 2;
	var $kindInt8 = 3;
	var $kindInt16 = 4;
	var $kindInt32 = 5;
	var $kindInt64 = 6;
	var $kindUint = 7;
	var $kindUint8 = 8;
	var $kindUint16 = 9;
	var $kindUint32 = 10;
	var $kindUint64 = 11;
	var $kindUintptr = 12;
	var $kindFloat32 = 13;
	var $kindFloat64 = 14;
	var $kindComplex64 = 15;
	var $kindComplex128 = 16;
	var $kindArray = 17;
	var $kindChan = 18;
	var $kindFunc = 19;
	var $kindInterface = 20;
	var $kindMap = 21;
	var $kindPtr = 22;
	var $kindSlice = 23;
	var $kindString = 24;
	var $kindStruct = 25;
	var $kindUnsafePointer = 26;

	var $methodSynthesizers = [];
	var $addMethodSynthesizer = function(f) {
	  if ($methodSynthesizers === null) {
	    f();
	    return;
	  }
	  $methodSynthesizers.push(f);
	};
	var $synthesizeMethods = function() {
	  $methodSynthesizers.forEach(function(f) { f(); });
	  $methodSynthesizers = null;
	};

	var $ifaceKeyFor = function(x) {
	  if (x === $ifaceNil) {
	    return 'nil';
	  }
	  var c = x.constructor;
	  return c.string + '$' + c.keyFor(x.$val);
	};

	var $identity = function(x) { return x; };

	var $typeIDCounter = 0;

	var $idKey = function(x) {
	  if (x.$id === undefined) {
	    $idCounter++;
	    x.$id = $idCounter;
	  }
	  return String(x.$id);
	};

	var $newType = function(size, kind, string, named, pkg, exported, constructor) {
	  var typ;
	  switch(kind) {
	  case $kindBool:
	  case $kindInt:
	  case $kindInt8:
	  case $kindInt16:
	  case $kindInt32:
	  case $kindUint:
	  case $kindUint8:
	  case $kindUint16:
	  case $kindUint32:
	  case $kindUintptr:
	  case $kindUnsafePointer:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.keyFor = $identity;
	    break;

	  case $kindString:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.keyFor = function(x) { return "$" + x; };
	    break;

	  case $kindFloat32:
	  case $kindFloat64:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.keyFor = function(x) { return $floatKey(x); };
	    break;

	  case $kindInt64:
	    typ = function(high, low) {
	      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
	      this.$low = low >>> 0;
	      this.$val = this;
	    };
	    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
	    break;

	  case $kindUint64:
	    typ = function(high, low) {
	      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
	      this.$low = low >>> 0;
	      this.$val = this;
	    };
	    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
	    break;

	  case $kindComplex64:
	    typ = function(real, imag) {
	      this.$real = $fround(real);
	      this.$imag = $fround(imag);
	      this.$val = this;
	    };
	    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
	    break;

	  case $kindComplex128:
	    typ = function(real, imag) {
	      this.$real = real;
	      this.$imag = imag;
	      this.$val = this;
	    };
	    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
	    break;

	  case $kindArray:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
	      this.$get = function() { return array; };
	      this.$set = function(v) { typ.copy(this, v); };
	      this.$val = array;
	    });
	    typ.init = function(elem, len) {
	      typ.elem = elem;
	      typ.len = len;
	      typ.comparable = elem.comparable;
	      typ.keyFor = function(x) {
	        return Array.prototype.join.call($mapArray(x, function(e) {
	          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
	        }), "$");
	      };
	      typ.copy = function(dst, src) {
	        $copyArray(dst, src, 0, 0, src.length, elem);
	      };
	      typ.ptr.init(typ);
	      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
	    };
	    break;

	  case $kindChan:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.keyFor = $idKey;
	    typ.init = function(elem, sendOnly, recvOnly) {
	      typ.elem = elem;
	      typ.sendOnly = sendOnly;
	      typ.recvOnly = recvOnly;
	    };
	    break;

	  case $kindFunc:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.init = function(params, results, variadic) {
	      typ.params = params;
	      typ.results = results;
	      typ.variadic = variadic;
	      typ.comparable = false;
	    };
	    break;

	  case $kindInterface:
	    typ = { implementedBy: {}, missingMethodFor: {} };
	    typ.keyFor = $ifaceKeyFor;
	    typ.init = function(methods) {
	      typ.methods = methods;
	      methods.forEach(function(m) {
	        $ifaceNil[m.prop] = $throwNilPointerError;
	      });
	    };
	    break;

	  case $kindMap:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.init = function(key, elem) {
	      typ.key = key;
	      typ.elem = elem;
	      typ.comparable = false;
	    };
	    break;

	  case $kindPtr:
	    typ = constructor || function(getter, setter, target) {
	      this.$get = getter;
	      this.$set = setter;
	      this.$target = target;
	      this.$val = this;
	    };
	    typ.keyFor = $idKey;
	    typ.init = function(elem) {
	      typ.elem = elem;
	      typ.wrapped = (elem.kind === $kindArray);
	      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
	    };
	    break;

	  case $kindSlice:
	    typ = function(array) {
	      if (array.constructor !== typ.nativeArray) {
	        array = new typ.nativeArray(array);
	      }
	      this.$array = array;
	      this.$offset = 0;
	      this.$length = array.length;
	      this.$capacity = array.length;
	      this.$val = this;
	    };
	    typ.init = function(elem) {
	      typ.elem = elem;
	      typ.comparable = false;
	      typ.nativeArray = $nativeArray(elem.kind);
	      typ.nil = new typ([]);
	    };
	    break;

	  case $kindStruct:
	    typ = function(v) { this.$val = v; };
	    typ.wrapped = true;
	    typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
	    typ.ptr.elem = typ;
	    typ.ptr.prototype.$get = function() { return this; };
	    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
	    typ.init = function(pkgPath, fields) {
	      typ.pkgPath = pkgPath;
	      typ.fields = fields;
	      fields.forEach(function(f) {
	        if (!f.typ.comparable) {
	          typ.comparable = false;
	        }
	      });
	      typ.keyFor = function(x) {
	        var val = x.$val;
	        return $mapArray(fields, function(f) {
	          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
	        }).join("$");
	      };
	      typ.copy = function(dst, src) {
	        for (var i = 0; i < fields.length; i++) {
	          var f = fields[i];
	          switch (f.typ.kind) {
	          case $kindArray:
	          case $kindStruct:
	            f.typ.copy(dst[f.prop], src[f.prop]);
	            continue;
	          default:
	            dst[f.prop] = src[f.prop];
	            continue;
	          }
	        }
	      };
	      /* nil value */
	      var properties = {};
	      fields.forEach(function(f) {
	        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
	      });
	      typ.ptr.nil = Object.create(constructor.prototype, properties);
	      typ.ptr.nil.$val = typ.ptr.nil;
	      /* methods for embedded fields */
	      $addMethodSynthesizer(function() {
	        var synthesizeMethod = function(target, m, f) {
	          if (target.prototype[m.prop] !== undefined) { return; }
	          target.prototype[m.prop] = function() {
	            var v = this.$val[f.prop];
	            if (f.typ === $jsObjectPtr) {
	              v = new $jsObjectPtr(v);
	            }
	            if (v.$val === undefined) {
	              v = new f.typ(v);
	            }
	            return v[m.prop].apply(v, arguments);
	          };
	        };
	        fields.forEach(function(f) {
	          if (f.embedded) {
	            $methodSet(f.typ).forEach(function(m) {
	              synthesizeMethod(typ, m, f);
	              synthesizeMethod(typ.ptr, m, f);
	            });
	            $methodSet($ptrType(f.typ)).forEach(function(m) {
	              synthesizeMethod(typ.ptr, m, f);
	            });
	          }
	        });
	      });
	    };
	    break;

	  default:
	    $panic(new $String("invalid kind: " + kind));
	  }

	  switch (kind) {
	  case $kindBool:
	  case $kindMap:
	    typ.zero = function() { return false; };
	    break;

	  case $kindInt:
	  case $kindInt8:
	  case $kindInt16:
	  case $kindInt32:
	  case $kindUint:
	  case $kindUint8 :
	  case $kindUint16:
	  case $kindUint32:
	  case $kindUintptr:
	  case $kindUnsafePointer:
	  case $kindFloat32:
	  case $kindFloat64:
	    typ.zero = function() { return 0; };
	    break;

	  case $kindString:
	    typ.zero = function() { return ""; };
	    break;

	  case $kindInt64:
	  case $kindUint64:
	  case $kindComplex64:
	  case $kindComplex128:
	    var zero = new typ(0, 0);
	    typ.zero = function() { return zero; };
	    break;

	  case $kindPtr:
	  case $kindSlice:
	    typ.zero = function() { return typ.nil; };
	    break;

	  case $kindChan:
	    typ.zero = function() { return $chanNil; };
	    break;

	  case $kindFunc:
	    typ.zero = function() { return $throwNilPointerError; };
	    break;

	  case $kindInterface:
	    typ.zero = function() { return $ifaceNil; };
	    break;

	  case $kindArray:
	    typ.zero = function() {
	      var arrayClass = $nativeArray(typ.elem.kind);
	      if (arrayClass !== Array) {
	        return new arrayClass(typ.len);
	      }
	      var array = new Array(typ.len);
	      for (var i = 0; i < typ.len; i++) {
	        array[i] = typ.elem.zero();
	      }
	      return array;
	    };
	    break;

	  case $kindStruct:
	    typ.zero = function() { return new typ.ptr(); };
	    break;

	  default:
	    $panic(new $String("invalid kind: " + kind));
	  }

	  typ.id = $typeIDCounter;
	  $typeIDCounter++;
	  typ.size = size;
	  typ.kind = kind;
	  typ.string = string;
	  typ.named = named;
	  typ.pkg = pkg;
	  typ.exported = exported;
	  typ.methods = [];
	  typ.methodSetCache = null;
	  typ.comparable = true;
	  return typ;
	};

	var $methodSet = function(typ) {
	  if (typ.methodSetCache !== null) {
	    return typ.methodSetCache;
	  }
	  var base = {};

	  var isPtr = (typ.kind === $kindPtr);
	  if (isPtr && typ.elem.kind === $kindInterface) {
	    typ.methodSetCache = [];
	    return [];
	  }

	  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

	  var seen = {};

	  while (current.length > 0) {
	    var next = [];
	    var mset = [];

	    current.forEach(function(e) {
	      if (seen[e.typ.string]) {
	        return;
	      }
	      seen[e.typ.string] = true;

	      if (e.typ.named) {
	        mset = mset.concat(e.typ.methods);
	        if (e.indirect) {
	          mset = mset.concat($ptrType(e.typ).methods);
	        }
	      }

	      switch (e.typ.kind) {
	      case $kindStruct:
	        e.typ.fields.forEach(function(f) {
	          if (f.embedded) {
	            var fTyp = f.typ;
	            var fIsPtr = (fTyp.kind === $kindPtr);
	            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
	          }
	        });
	        break;

	      case $kindInterface:
	        mset = mset.concat(e.typ.methods);
	        break;
	      }
	    });

	    mset.forEach(function(m) {
	      if (base[m.name] === undefined) {
	        base[m.name] = m;
	      }
	    });

	    current = next;
	  }

	  typ.methodSetCache = [];
	  Object.keys(base).sort().forEach(function(name) {
	    typ.methodSetCache.push(base[name]);
	  });
	  return typ.methodSetCache;
	};

	var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
	var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
	var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
	var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
	var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
	var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
	var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
	var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
	var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
	var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
	var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
	var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
	var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
	var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
	var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
	var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
	var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
	var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

	var $nativeArray = function(elemKind) {
	  switch (elemKind) {
	  case $kindInt:
	    return Int32Array;
	  case $kindInt8:
	    return Int8Array;
	  case $kindInt16:
	    return Int16Array;
	  case $kindInt32:
	    return Int32Array;
	  case $kindUint:
	    return Uint32Array;
	  case $kindUint8:
	    return Uint8Array;
	  case $kindUint16:
	    return Uint16Array;
	  case $kindUint32:
	    return Uint32Array;
	  case $kindUintptr:
	    return Uint32Array;
	  case $kindFloat32:
	    return Float32Array;
	  case $kindFloat64:
	    return Float64Array;
	  default:
	    return Array;
	  }
	};
	var $toNativeArray = function(elemKind, array) {
	  var nativeArray = $nativeArray(elemKind);
	  if (nativeArray === Array) {
	    return array;
	  }
	  return new nativeArray(array);
	};
	var $arrayTypes = {};
	var $arrayType = function(elem, len) {
	  var typeKey = elem.id + "$" + len;
	  var typ = $arrayTypes[typeKey];
	  if (typ === undefined) {
	    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
	    $arrayTypes[typeKey] = typ;
	    typ.init(elem, len);
	  }
	  return typ;
	};

	var $chanType = function(elem, sendOnly, recvOnly) {
	  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
	  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
	  var typ = elem[field];
	  if (typ === undefined) {
	    typ = $newType(4, $kindChan, string, false, "", false, null);
	    elem[field] = typ;
	    typ.init(elem, sendOnly, recvOnly);
	  }
	  return typ;
	};
	var $Chan = function(elem, capacity) {
	  if (capacity < 0 || capacity > 2147483647) {
	    $throwRuntimeError("makechan: size out of range");
	  }
	  this.$elem = elem;
	  this.$capacity = capacity;
	  this.$buffer = [];
	  this.$sendQueue = [];
	  this.$recvQueue = [];
	  this.$closed = false;
	};
	var $chanNil = new $Chan(null, 0);
	$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

	var $funcTypes = {};
	var $funcType = function(params, results, variadic) {
	  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
	  var typ = $funcTypes[typeKey];
	  if (typ === undefined) {
	    var paramTypes = $mapArray(params, function(p) { return p.string; });
	    if (variadic) {
	      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
	    }
	    var string = "func(" + paramTypes.join(", ") + ")";
	    if (results.length === 1) {
	      string += " " + results[0].string;
	    } else if (results.length > 1) {
	      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
	    }
	    typ = $newType(4, $kindFunc, string, false, "", false, null);
	    $funcTypes[typeKey] = typ;
	    typ.init(params, results, variadic);
	  }
	  return typ;
	};

	var $interfaceTypes = {};
	var $interfaceType = function(methods) {
	  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
	  var typ = $interfaceTypes[typeKey];
	  if (typ === undefined) {
	    var string = "interface {}";
	    if (methods.length !== 0) {
	      string = "interface { " + $mapArray(methods, function(m) {
	        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
	      }).join("; ") + " }";
	    }
	    typ = $newType(8, $kindInterface, string, false, "", false, null);
	    $interfaceTypes[typeKey] = typ;
	    typ.init(methods);
	  }
	  return typ;
	};
	var $emptyInterface = $interfaceType([]);
	var $ifaceNil = {};
	var $error = $newType(8, $kindInterface, "error", true, "", false, null);
	$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

	var $mapTypes = {};
	var $mapType = function(key, elem) {
	  var typeKey = key.id + "$" + elem.id;
	  var typ = $mapTypes[typeKey];
	  if (typ === undefined) {
	    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
	    $mapTypes[typeKey] = typ;
	    typ.init(key, elem);
	  }
	  return typ;
	};
	var $makeMap = function(keyForFunc, entries) {
	  var m = {};
	  for (var i = 0; i < entries.length; i++) {
	    var e = entries[i];
	    m[keyForFunc(e.k)] = e;
	  }
	  return m;
	};

	var $ptrType = function(elem) {
	  var typ = elem.ptr;
	  if (typ === undefined) {
	    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
	    elem.ptr = typ;
	    typ.init(elem);
	  }
	  return typ;
	};

	var $newDataPointer = function(data, constructor) {
	  if (constructor.elem.kind === $kindStruct) {
	    return data;
	  }
	  return new constructor(function() { return data; }, function(v) { data = v; });
	};

	var $indexPtr = function(array, index, constructor) {
	  array.$ptr = array.$ptr || {};
	  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
	};

	var $sliceType = function(elem) {
	  var typ = elem.slice;
	  if (typ === undefined) {
	    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
	    elem.slice = typ;
	    typ.init(elem);
	  }
	  return typ;
	};
	var $makeSlice = function(typ, length, capacity) {
	  capacity = capacity || length;
	  if (length < 0 || length > 2147483647) {
	    $throwRuntimeError("makeslice: len out of range");
	  }
	  if (capacity < 0 || capacity < length || capacity > 2147483647) {
	    $throwRuntimeError("makeslice: cap out of range");
	  }
	  var array = new typ.nativeArray(capacity);
	  if (typ.nativeArray === Array) {
	    for (var i = 0; i < capacity; i++) {
	      array[i] = typ.elem.zero();
	    }
	  }
	  var slice = new typ(array);
	  slice.$length = length;
	  return slice;
	};

	var $structTypes = {};
	var $structType = function(pkgPath, fields) {
	  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
	  var typ = $structTypes[typeKey];
	  if (typ === undefined) {
	    var string = "struct { " + $mapArray(fields, function(f) {
	      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
	    }).join("; ") + " }";
	    if (fields.length === 0) {
	      string = "struct {}";
	    }
	    typ = $newType(0, $kindStruct, string, false, "", false, function() {
	      this.$val = this;
	      for (var i = 0; i < fields.length; i++) {
	        var f = fields[i];
	        var arg = arguments[i];
	        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
	      }
	    });
	    $structTypes[typeKey] = typ;
	    typ.init(pkgPath, fields);
	  }
	  return typ;
	};

	var $assertType = function(value, type, returnTuple) {
	  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
	  if (value === $ifaceNil) {
	    ok = false;
	  } else if (!isInterface) {
	    ok = value.constructor === type;
	  } else {
	    var valueTypeString = value.constructor.string;
	    ok = type.implementedBy[valueTypeString];
	    if (ok === undefined) {
	      ok = true;
	      var valueMethodSet = $methodSet(value.constructor);
	      var interfaceMethods = type.methods;
	      for (var i = 0; i < interfaceMethods.length; i++) {
	        var tm = interfaceMethods[i];
	        var found = false;
	        for (var j = 0; j < valueMethodSet.length; j++) {
	          var vm = valueMethodSet[j];
	          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
	            found = true;
	            break;
	          }
	        }
	        if (!found) {
	          ok = false;
	          type.missingMethodFor[valueTypeString] = tm.name;
	          break;
	        }
	      }
	      type.implementedBy[valueTypeString] = ok;
	    }
	    if (!ok) {
	      missingMethod = type.missingMethodFor[valueTypeString];
	    }
	  }

	  if (!ok) {
	    if (returnTuple) {
	      return [type.zero(), false];
	    }
	    $panic(new $packages["runtime"].TypeAssertionError.ptr(
	      $packages["runtime"]._type.ptr.nil,
	      (value === $ifaceNil ? $packages["runtime"]._type.ptr.nil : new $packages["runtime"]._type.ptr(value.constructor.string)),
	      new $packages["runtime"]._type.ptr(type.string),
	      missingMethod));
	  }

	  if (!isInterface) {
	    value = value.$val;
	  }
	  if (type === $jsObjectPtr) {
	    value = value.object;
	  }
	  return returnTuple ? [value, true] : value;
	};

	var $stackDepthOffset = 0;
	var $getStackDepth = function() {
	  var err = new Error();
	  if (err.stack === undefined) {
	    return undefined;
	  }
	  return $stackDepthOffset + err.stack.split("\n").length;
	};

	var $panicStackDepth = null, $panicValue;
	var $callDeferred = function(deferred, jsErr, fromPanic) {
	  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
	    throw jsErr;
	  }
	  if (jsErr !== null) {
	    var newErr = null;
	    try {
	      $curGoroutine.deferStack.push(deferred);
	      $panic(new $jsErrorPtr(jsErr));
	    } catch (err) {
	      newErr = err;
	    }
	    $curGoroutine.deferStack.pop();
	    $callDeferred(deferred, newErr);
	    return;
	  }
	  if ($curGoroutine.asleep) {
	    return;
	  }

	  $stackDepthOffset--;
	  var outerPanicStackDepth = $panicStackDepth;
	  var outerPanicValue = $panicValue;

	  var localPanicValue = $curGoroutine.panicStack.pop();
	  if (localPanicValue !== undefined) {
	    $panicStackDepth = $getStackDepth();
	    $panicValue = localPanicValue;
	  }

	  try {
	    while (true) {
	      if (deferred === null) {
	        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
	        if (deferred === undefined) {
	          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
	          $panicStackDepth = null;
	          if (localPanicValue.Object instanceof Error) {
	            throw localPanicValue.Object;
	          }
	          var msg;
	          if (localPanicValue.constructor === $String) {
	            msg = localPanicValue.$val;
	          } else if (localPanicValue.Error !== undefined) {
	            msg = localPanicValue.Error();
	          } else if (localPanicValue.String !== undefined) {
	            msg = localPanicValue.String();
	          } else {
	            msg = localPanicValue;
	          }
	          throw new Error(msg);
	        }
	      }
	      var call = deferred.pop();
	      if (call === undefined) {
	        $curGoroutine.deferStack.pop();
	        if (localPanicValue !== undefined) {
	          deferred = null;
	          continue;
	        }
	        return;
	      }
	      var r = call[0].apply(call[2], call[1]);
	      if (r && r.$blk !== undefined) {
	        deferred.push([r.$blk, [], r]);
	        if (fromPanic) {
	          throw null;
	        }
	        return;
	      }

	      if (localPanicValue !== undefined && $panicStackDepth === null) {
	        throw null; /* error was recovered */
	      }
	    }
	  } finally {
	    if (localPanicValue !== undefined) {
	      if ($panicStackDepth !== null) {
	        $curGoroutine.panicStack.push(localPanicValue);
	      }
	      $panicStackDepth = outerPanicStackDepth;
	      $panicValue = outerPanicValue;
	    }
	    $stackDepthOffset++;
	  }
	};

	var $panic = function(value) {
	  $curGoroutine.panicStack.push(value);
	  $callDeferred(null, null, true);
	};
	var $recover = function() {
	  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
	    return $ifaceNil;
	  }
	  $panicStackDepth = null;
	  return $panicValue;
	};
	var $throw = function(err) { throw err; };

	var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
	var $curGoroutine = $noGoroutine, $awakeGoroutines = 0, $checkForDeadlock = true;
	var $mainFinished = false;
	var $go = function(fun, args) {
	  $awakeGoroutines++;
	  var $goroutine = function() {
	    try {
	      $curGoroutine = $goroutine;
	      var r = fun.apply(undefined, args);
	      if (r && r.$blk !== undefined) {
	        fun = function() { return r.$blk(); };
	        args = [];
	        return;
	      }
	      $goroutine.exit = true;
	    } catch (err) {
	      if (!$goroutine.exit) {
	        throw err;
	      }
	    } finally {
	      $curGoroutine = $noGoroutine;
	      if ($goroutine.exit) { /* also set by runtime.Goexit() */
	        $goroutine.asleep = true;
	      }
	      if ($goroutine.asleep) {
	        $awakeGoroutines--;
	        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
	          console.error("fatal error: all goroutines are asleep - deadlock!");
	          if ($global.process !== undefined) {
	            $global.process.exit(2);
	          }
	        }
	      }
	    }
	  };
	  $goroutine.asleep = false;
	  $goroutine.exit = false;
	  $goroutine.deferStack = [];
	  $goroutine.panicStack = [];
	  $schedule($goroutine);
	};

	var $scheduled = [];
	var $runScheduled = function() {
	  try {
	    var r;
	    while ((r = $scheduled.shift()) !== undefined) {
	      r();
	    }
	  } finally {
	    if ($scheduled.length > 0) {
	      setTimeout($runScheduled, 0);
	    }
	  }
	};

	var $schedule = function(goroutine) {
	  if (goroutine.asleep) {
	    goroutine.asleep = false;
	    $awakeGoroutines++;
	  }
	  $scheduled.push(goroutine);
	  if ($curGoroutine === $noGoroutine) {
	    $runScheduled();
	  }
	};

	var $block = function() {
	  if ($curGoroutine === $noGoroutine) {
	    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
	  }
	  $curGoroutine.asleep = true;
	};

	var $send = function(chan, value) {
	  if (chan.$closed) {
	    $throwRuntimeError("send on closed channel");
	  }
	  var queuedRecv = chan.$recvQueue.shift();
	  if (queuedRecv !== undefined) {
	    queuedRecv([value, true]);
	    return;
	  }
	  if (chan.$buffer.length < chan.$capacity) {
	    chan.$buffer.push(value);
	    return;
	  }

	  var thisGoroutine = $curGoroutine;
	  var closedDuringSend;
	  chan.$sendQueue.push(function(closed) {
	    closedDuringSend = closed;
	    $schedule(thisGoroutine);
	    return value;
	  });
	  $block();
	  return {
	    $blk: function() {
	      if (closedDuringSend) {
	        $throwRuntimeError("send on closed channel");
	      }
	    }
	  };
	};
	var $recv = function(chan) {
	  var queuedSend = chan.$sendQueue.shift();
	  if (queuedSend !== undefined) {
	    chan.$buffer.push(queuedSend(false));
	  }
	  var bufferedValue = chan.$buffer.shift();
	  if (bufferedValue !== undefined) {
	    return [bufferedValue, true];
	  }
	  if (chan.$closed) {
	    return [chan.$elem.zero(), false];
	  }

	  var thisGoroutine = $curGoroutine;
	  var f = { $blk: function() { return this.value; } };
	  var queueEntry = function(v) {
	    f.value = v;
	    $schedule(thisGoroutine);
	  };
	  chan.$recvQueue.push(queueEntry);
	  $block();
	  return f;
	};
	var $close = function(chan) {
	  if (chan.$closed) {
	    $throwRuntimeError("close of closed channel");
	  }
	  chan.$closed = true;
	  while (true) {
	    var queuedSend = chan.$sendQueue.shift();
	    if (queuedSend === undefined) {
	      break;
	    }
	    queuedSend(true); /* will panic */
	  }
	  while (true) {
	    var queuedRecv = chan.$recvQueue.shift();
	    if (queuedRecv === undefined) {
	      break;
	    }
	    queuedRecv([chan.$elem.zero(), false]);
	  }
	};
	var $select = function(comms) {
	  var ready = [];
	  var selection = -1;
	  for (var i = 0; i < comms.length; i++) {
	    var comm = comms[i];
	    var chan = comm[0];
	    switch (comm.length) {
	    case 0: /* default */
	      selection = i;
	      break;
	    case 1: /* recv */
	      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
	        ready.push(i);
	      }
	      break;
	    case 2: /* send */
	      if (chan.$closed) {
	        $throwRuntimeError("send on closed channel");
	      }
	      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
	        ready.push(i);
	      }
	      break;
	    }
	  }

	  if (ready.length !== 0) {
	    selection = ready[Math.floor(Math.random() * ready.length)];
	  }
	  if (selection !== -1) {
	    var comm = comms[selection];
	    switch (comm.length) {
	    case 0: /* default */
	      return [selection];
	    case 1: /* recv */
	      return [selection, $recv(comm[0])];
	    case 2: /* send */
	      $send(comm[0], comm[1]);
	      return [selection];
	    }
	  }

	  var entries = [];
	  var thisGoroutine = $curGoroutine;
	  var f = { $blk: function() { return this.selection; } };
	  var removeFromQueues = function() {
	    for (var i = 0; i < entries.length; i++) {
	      var entry = entries[i];
	      var queue = entry[0];
	      var index = queue.indexOf(entry[1]);
	      if (index !== -1) {
	        queue.splice(index, 1);
	      }
	    }
	  };
	  for (var i = 0; i < comms.length; i++) {
	    (function(i) {
	      var comm = comms[i];
	      switch (comm.length) {
	      case 1: /* recv */
	        var queueEntry = function(value) {
	          f.selection = [i, value];
	          removeFromQueues();
	          $schedule(thisGoroutine);
	        };
	        entries.push([comm[0].$recvQueue, queueEntry]);
	        comm[0].$recvQueue.push(queueEntry);
	        break;
	      case 2: /* send */
	        var queueEntry = function() {
	          if (comm[0].$closed) {
	            $throwRuntimeError("send on closed channel");
	          }
	          f.selection = [i];
	          removeFromQueues();
	          $schedule(thisGoroutine);
	          return comm[1];
	        };
	        entries.push([comm[0].$sendQueue, queueEntry]);
	        comm[0].$sendQueue.push(queueEntry);
	        break;
	      }
	    })(i);
	  }
	  $block();
	  return f;
	};

	var $jsObjectPtr, $jsErrorPtr;

	var $needsExternalization = function(t) {
	  switch (t.kind) {
	    case $kindBool:
	    case $kindInt:
	    case $kindInt8:
	    case $kindInt16:
	    case $kindInt32:
	    case $kindUint:
	    case $kindUint8:
	    case $kindUint16:
	    case $kindUint32:
	    case $kindUintptr:
	    case $kindFloat32:
	    case $kindFloat64:
	      return false;
	    default:
	      return t !== $jsObjectPtr;
	  }
	};

	var $externalize = function(v, t) {
	  if (t === $jsObjectPtr) {
	    return v;
	  }
	  switch (t.kind) {
	  case $kindBool:
	  case $kindInt:
	  case $kindInt8:
	  case $kindInt16:
	  case $kindInt32:
	  case $kindUint:
	  case $kindUint8:
	  case $kindUint16:
	  case $kindUint32:
	  case $kindUintptr:
	  case $kindFloat32:
	  case $kindFloat64:
	    return v;
	  case $kindInt64:
	  case $kindUint64:
	    return $flatten64(v);
	  case $kindArray:
	    if ($needsExternalization(t.elem)) {
	      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
	    }
	    return v;
	  case $kindFunc:
	    return $externalizeFunction(v, t, false);
	  case $kindInterface:
	    if (v === $ifaceNil) {
	      return null;
	    }
	    if (v.constructor === $jsObjectPtr) {
	      return v.$val.object;
	    }
	    return $externalize(v.$val, v.constructor);
	  case $kindMap:
	    var m = {};
	    var keys = $keys(v);
	    for (var i = 0; i < keys.length; i++) {
	      var entry = v[keys[i]];
	      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
	    }
	    return m;
	  case $kindPtr:
	    if (v === t.nil) {
	      return null;
	    }
	    return $externalize(v.$get(), t.elem);
	  case $kindSlice:
	    if ($needsExternalization(t.elem)) {
	      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
	    }
	    return $sliceToArray(v);
	  case $kindString:
	    if ($isASCII(v)) {
	      return v;
	    }
	    var s = "", r;
	    for (var i = 0; i < v.length; i += r[1]) {
	      r = $decodeRune(v, i);
	      var c = r[0];
	      if (c > 0xFFFF) {
	        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
	        var l = (c - 0x10000) % 0x400 + 0xDC00;
	        s += String.fromCharCode(h, l);
	        continue;
	      }
	      s += String.fromCharCode(c);
	    }
	    return s;
	  case $kindStruct:
	    var timePkg = $packages["time"];
	    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
	      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
	      return new Date($flatten64(milli));
	    }

	    var noJsObject = {};
	    var searchJsObject = function(v, t) {
	      if (t === $jsObjectPtr) {
	        return v;
	      }
	      switch (t.kind) {
	      case $kindPtr:
	        if (v === t.nil) {
	          return noJsObject;
	        }
	        return searchJsObject(v.$get(), t.elem);
	      case $kindStruct:
	        var f = t.fields[0];
	        return searchJsObject(v[f.prop], f.typ);
	      case $kindInterface:
	        return searchJsObject(v.$val, v.constructor);
	      default:
	        return noJsObject;
	      }
	    };
	    var o = searchJsObject(v, t);
	    if (o !== noJsObject) {
	      return o;
	    }

	    o = {};
	    for (var i = 0; i < t.fields.length; i++) {
	      var f = t.fields[i];
	      if (!f.exported) {
	        continue;
	      }
	      o[f.name] = $externalize(v[f.prop], f.typ);
	    }
	    return o;
	  }
	  $throwRuntimeError("cannot externalize " + t.string);
	};

	var $externalizeFunction = function(v, t, passThis) {
	  if (v === $throwNilPointerError) {
	    return null;
	  }
	  if (v.$externalizeWrapper === undefined) {
	    $checkForDeadlock = false;
	    v.$externalizeWrapper = function() {
	      var args = [];
	      for (var i = 0; i < t.params.length; i++) {
	        if (t.variadic && i === t.params.length - 1) {
	          var vt = t.params[i].elem, varargs = [];
	          for (var j = i; j < arguments.length; j++) {
	            varargs.push($internalize(arguments[j], vt));
	          }
	          args.push(new (t.params[i])(varargs));
	          break;
	        }
	        args.push($internalize(arguments[i], t.params[i]));
	      }
	      var result = v.apply(passThis ? this : undefined, args);
	      switch (t.results.length) {
	      case 0:
	        return;
	      case 1:
	        return $externalize(result, t.results[0]);
	      default:
	        for (var i = 0; i < t.results.length; i++) {
	          result[i] = $externalize(result[i], t.results[i]);
	        }
	        return result;
	      }
	    };
	  }
	  return v.$externalizeWrapper;
	};

	var $internalize = function(v, t, recv) {
	  if (t === $jsObjectPtr) {
	    return v;
	  }
	  if (t === $jsObjectPtr.elem) {
	    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
	  }
	  if (v && v.__internal_object__ !== undefined) {
	    return $assertType(v.__internal_object__, t, false);
	  }
	  var timePkg = $packages["time"];
	  if (timePkg !== undefined && t === timePkg.Time) {
	    if (!(v !== null && v !== undefined && v.constructor === Date)) {
	      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
	    }
	    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
	  }
	  switch (t.kind) {
	  case $kindBool:
	    return !!v;
	  case $kindInt:
	    return parseInt(v);
	  case $kindInt8:
	    return parseInt(v) << 24 >> 24;
	  case $kindInt16:
	    return parseInt(v) << 16 >> 16;
	  case $kindInt32:
	    return parseInt(v) >> 0;
	  case $kindUint:
	    return parseInt(v);
	  case $kindUint8:
	    return parseInt(v) << 24 >>> 24;
	  case $kindUint16:
	    return parseInt(v) << 16 >>> 16;
	  case $kindUint32:
	  case $kindUintptr:
	    return parseInt(v) >>> 0;
	  case $kindInt64:
	  case $kindUint64:
	    return new t(0, v);
	  case $kindFloat32:
	  case $kindFloat64:
	    return parseFloat(v);
	  case $kindArray:
	    if (v.length !== t.len) {
	      $throwRuntimeError("got array with wrong size from JavaScript native");
	    }
	    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
	  case $kindFunc:
	    return function() {
	      var args = [];
	      for (var i = 0; i < t.params.length; i++) {
	        if (t.variadic && i === t.params.length - 1) {
	          var vt = t.params[i].elem, varargs = arguments[i];
	          for (var j = 0; j < varargs.$length; j++) {
	            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
	          }
	          break;
	        }
	        args.push($externalize(arguments[i], t.params[i]));
	      }
	      var result = v.apply(recv, args);
	      switch (t.results.length) {
	      case 0:
	        return;
	      case 1:
	        return $internalize(result, t.results[0]);
	      default:
	        for (var i = 0; i < t.results.length; i++) {
	          result[i] = $internalize(result[i], t.results[i]);
	        }
	        return result;
	      }
	    };
	  case $kindInterface:
	    if (t.methods.length !== 0) {
	      $throwRuntimeError("cannot internalize " + t.string);
	    }
	    if (v === null) {
	      return $ifaceNil;
	    }
	    if (v === undefined) {
	      return new $jsObjectPtr(undefined);
	    }
	    switch (v.constructor) {
	    case Int8Array:
	      return new ($sliceType($Int8))(v);
	    case Int16Array:
	      return new ($sliceType($Int16))(v);
	    case Int32Array:
	      return new ($sliceType($Int))(v);
	    case Uint8Array:
	      return new ($sliceType($Uint8))(v);
	    case Uint16Array:
	      return new ($sliceType($Uint16))(v);
	    case Uint32Array:
	      return new ($sliceType($Uint))(v);
	    case Float32Array:
	      return new ($sliceType($Float32))(v);
	    case Float64Array:
	      return new ($sliceType($Float64))(v);
	    case Array:
	      return $internalize(v, $sliceType($emptyInterface));
	    case Boolean:
	      return new $Bool(!!v);
	    case Date:
	      if (timePkg === undefined) {
	        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
	        return new $jsObjectPtr(v);
	      }
	      return new timePkg.Time($internalize(v, timePkg.Time));
	    case Function:
	      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
	      return new funcType($internalize(v, funcType));
	    case Number:
	      return new $Float64(parseFloat(v));
	    case String:
	      return new $String($internalize(v, $String));
	    default:
	      if ($global.Node && v instanceof $global.Node) {
	        return new $jsObjectPtr(v);
	      }
	      var mapType = $mapType($String, $emptyInterface);
	      return new mapType($internalize(v, mapType));
	    }
	  case $kindMap:
	    var m = {};
	    var keys = $keys(v);
	    for (var i = 0; i < keys.length; i++) {
	      var k = $internalize(keys[i], t.key);
	      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
	    }
	    return m;
	  case $kindPtr:
	    if (t.elem.kind === $kindStruct) {
	      return $internalize(v, t.elem);
	    }
	  case $kindSlice:
	    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
	  case $kindString:
	    v = String(v);
	    if ($isASCII(v)) {
	      return v;
	    }
	    var s = "";
	    var i = 0;
	    while (i < v.length) {
	      var h = v.charCodeAt(i);
	      if (0xD800 <= h && h <= 0xDBFF) {
	        var l = v.charCodeAt(i + 1);
	        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
	        s += $encodeRune(c);
	        i += 2;
	        continue;
	      }
	      s += $encodeRune(h);
	      i++;
	    }
	    return s;
	  case $kindStruct:
	    var noJsObject = {};
	    var searchJsObject = function(t) {
	      if (t === $jsObjectPtr) {
	        return v;
	      }
	      if (t === $jsObjectPtr.elem) {
	        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
	      }
	      switch (t.kind) {
	      case $kindPtr:
	        return searchJsObject(t.elem);
	      case $kindStruct:
	        var f = t.fields[0];
	        var o = searchJsObject(f.typ);
	        if (o !== noJsObject) {
	          var n = new t.ptr();
	          n[f.prop] = o;
	          return n;
	        }
	        return noJsObject;
	      default:
	        return noJsObject;
	      }
	    };
	    var o = searchJsObject(t);
	    if (o !== noJsObject) {
	      return o;
	    }
	  }
	  $throwRuntimeError("cannot internalize " + t.string);
	};

	/* $isASCII reports whether string s contains only ASCII characters. */
	var $isASCII = function(s) {
	  for (var i = 0; i < s.length; i++) {
	    if (s.charCodeAt(i) >= 128) {
	      return false;
	    }
	  }
	  return true;
	};

	$packages["github.com/gopherjs/gopherjs/js"] = (function() {
		var $pkg = {}, $init, Object, Error, M, sliceType, ptrType, ptrType$1, MakeFunc, init;
		Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.object = null;
				return;
			}
			this.object = object_;
		});
		Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Object = null;
				return;
			}
			this.Object = Object_;
		});
		M = $pkg.M = $newType(4, $kindMap, "js.M", true, "github.com/gopherjs/gopherjs/js", true, null);
		sliceType = $sliceType($emptyInterface);
		ptrType = $ptrType(Object);
		ptrType$1 = $ptrType(Error);
		Object.ptr.prototype.Get = function(key) {
			var key, o;
			o = this;
			return o.object[$externalize(key, $String)];
		};
		Object.prototype.Get = function(key) { return this.$val.Get(key); };
		Object.ptr.prototype.Set = function(key, value) {
			var key, o, value;
			o = this;
			o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
		};
		Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
		Object.ptr.prototype.Delete = function(key) {
			var key, o;
			o = this;
			delete o.object[$externalize(key, $String)];
		};
		Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
		Object.ptr.prototype.Length = function() {
			var o;
			o = this;
			return $parseInt(o.object.length);
		};
		Object.prototype.Length = function() { return this.$val.Length(); };
		Object.ptr.prototype.Index = function(i) {
			var i, o;
			o = this;
			return o.object[i];
		};
		Object.prototype.Index = function(i) { return this.$val.Index(i); };
		Object.ptr.prototype.SetIndex = function(i, value) {
			var i, o, value;
			o = this;
			o.object[i] = $externalize(value, $emptyInterface);
		};
		Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
		Object.ptr.prototype.Call = function(name, args) {
			var args, name, o, obj;
			o = this;
			return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
		};
		Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
		Object.ptr.prototype.Invoke = function(args) {
			var args, o;
			o = this;
			return o.object.apply(undefined, $externalize(args, sliceType));
		};
		Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
		Object.ptr.prototype.New = function(args) {
			var args, o;
			o = this;
			return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
		};
		Object.prototype.New = function(args) { return this.$val.New(args); };
		Object.ptr.prototype.Bool = function() {
			var o;
			o = this;
			return !!(o.object);
		};
		Object.prototype.Bool = function() { return this.$val.Bool(); };
		Object.ptr.prototype.String = function() {
			var o;
			o = this;
			return $internalize(o.object, $String);
		};
		Object.prototype.String = function() { return this.$val.String(); };
		Object.ptr.prototype.Int = function() {
			var o;
			o = this;
			return $parseInt(o.object) >> 0;
		};
		Object.prototype.Int = function() { return this.$val.Int(); };
		Object.ptr.prototype.Int64 = function() {
			var o;
			o = this;
			return $internalize(o.object, $Int64);
		};
		Object.prototype.Int64 = function() { return this.$val.Int64(); };
		Object.ptr.prototype.Uint64 = function() {
			var o;
			o = this;
			return $internalize(o.object, $Uint64);
		};
		Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
		Object.ptr.prototype.Float = function() {
			var o;
			o = this;
			return $parseFloat(o.object);
		};
		Object.prototype.Float = function() { return this.$val.Float(); };
		Object.ptr.prototype.Interface = function() {
			var o;
			o = this;
			return $internalize(o.object, $emptyInterface);
		};
		Object.prototype.Interface = function() { return this.$val.Interface(); };
		Object.ptr.prototype.Unsafe = function() {
			var o;
			o = this;
			return o.object;
		};
		Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
		Error.ptr.prototype.Error = function() {
			var err;
			err = this;
			return "JavaScript error: " + $internalize(err.Object.message, $String);
		};
		Error.prototype.Error = function() { return this.$val.Error(); };
		Error.ptr.prototype.Stack = function() {
			var err;
			err = this;
			return $internalize(err.Object.stack, $String);
		};
		Error.prototype.Stack = function() { return this.$val.Stack(); };
		MakeFunc = function(fn) {
			var fn;
			return $makeFunc(fn);
		};
		$pkg.MakeFunc = MakeFunc;
		init = function() {
			var e;
			e = new Error.ptr(null);
		};
		ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
		ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
		Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", embedded: false, exported: false, typ: ptrType, tag: ""}]);
		Error.init("", [{prop: "Object", name: "Object", embedded: true, exported: true, typ: ptrType, tag: ""}]);
		M.init($String, $emptyInterface);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			init();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["internal/cpu"] = (function() {
		var $pkg = {}, $init;
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["internal/bytealg"] = (function() {
		var $pkg = {}, $init, cpu, IndexByteString;
		cpu = $packages["internal/cpu"];
		IndexByteString = function(s, c) {
			var c, i, s;
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i + (1) >> 0;
			}
			return -1;
		};
		$pkg.IndexByteString = IndexByteString;
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = cpu.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["runtime/internal/sys"] = (function() {
		var $pkg = {}, $init;
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["runtime"] = (function() {
		var $pkg = {}, $init, js, bytealg, sys, _type, TypeAssertionError, errorString, ptrType, ptrType$4, init, GOROOT, Goexit, throw$1;
		js = $packages["github.com/gopherjs/gopherjs/js"];
		bytealg = $packages["internal/bytealg"];
		sys = $packages["runtime/internal/sys"];
		_type = $pkg._type = $newType(0, $kindStruct, "runtime._type", true, "runtime", false, function(str_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.str = "";
				return;
			}
			this.str = str_;
		});
		TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(_interface_, concrete_, asserted_, missingMethod_) {
			this.$val = this;
			if (arguments.length === 0) {
				this._interface = ptrType.nil;
				this.concrete = ptrType.nil;
				this.asserted = ptrType.nil;
				this.missingMethod = "";
				return;
			}
			this._interface = _interface_;
			this.concrete = concrete_;
			this.asserted = asserted_;
			this.missingMethod = missingMethod_;
		});
		errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
		ptrType = $ptrType(_type);
		ptrType$4 = $ptrType(TypeAssertionError);
		_type.ptr.prototype.string = function() {
			var t;
			t = this;
			return t.str;
		};
		_type.prototype.string = function() { return this.$val.string(); };
		_type.ptr.prototype.pkgpath = function() {
			return "";
		};
		_type.prototype.pkgpath = function() { return this.$val.pkgpath(); };
		init = function() {
			var e, jsPkg;
			jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
			$jsObjectPtr = jsPkg.Object.ptr;
			$jsErrorPtr = jsPkg.Error.ptr;
			$throwRuntimeError = throw$1;
			e = $ifaceNil;
			e = new TypeAssertionError.ptr(ptrType.nil, ptrType.nil, ptrType.nil, "");
		};
		GOROOT = function() {
			var goroot, process;
			process = $global.process;
			if (process === undefined) {
				return "/";
			}
			goroot = process.env.GOROOT;
			if (!(goroot === undefined)) {
				return $internalize(goroot, $String);
			}
			return "/usr/local/go";
		};
		$pkg.GOROOT = GOROOT;
		Goexit = function() {
			$curGoroutine.exit = $externalize(true, $Bool);
			$throw(null);
		};
		$pkg.Goexit = Goexit;
		throw$1 = function(s) {
			var s;
			$panic(new errorString((s)));
		};
		TypeAssertionError.ptr.prototype.RuntimeError = function() {
		};
		TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
		TypeAssertionError.ptr.prototype.Error = function() {
			var as, cs, e, inter, msg;
			e = this;
			inter = "interface";
			if (!(e._interface === ptrType.nil)) {
				inter = e._interface.string();
			}
			as = e.asserted.string();
			if (e.concrete === ptrType.nil) {
				return "interface conversion: " + inter + " is nil, not " + as;
			}
			cs = e.concrete.string();
			if (e.missingMethod === "") {
				msg = "interface conversion: " + inter + " is " + cs + ", not " + as;
				if (cs === as) {
					if (!(e.concrete.pkgpath() === e.asserted.pkgpath())) {
						msg = msg + (" (types from different packages)");
					} else {
						msg = msg + (" (types from different scopes)");
					}
				}
				return msg;
			}
			return "interface conversion: " + cs + " is not " + as + ": missing method " + e.missingMethod;
		};
		TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
		errorString.prototype.RuntimeError = function() {
			var e;
			e = this.$val;
		};
		$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
		errorString.prototype.Error = function() {
			var e;
			e = this.$val;
			return "runtime error: " + (e);
		};
		$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
		ptrType.methods = [{prop: "string", name: "string", pkg: "runtime", typ: $funcType([], [$String], false)}, {prop: "pkgpath", name: "pkgpath", pkg: "runtime", typ: $funcType([], [$String], false)}];
		ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
		errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
		_type.init("runtime", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
		TypeAssertionError.init("runtime", [{prop: "_interface", name: "_interface", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "concrete", name: "concrete", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "asserted", name: "asserted", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "missingMethod", name: "missingMethod", embedded: false, exported: false, typ: $String, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = sys.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			init();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["errors"] = (function() {
		var $pkg = {}, $init, errorString, ptrType, New;
		errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.s = "";
				return;
			}
			this.s = s_;
		});
		ptrType = $ptrType(errorString);
		New = function(text) {
			var text;
			return new errorString.ptr(text);
		};
		$pkg.New = New;
		errorString.ptr.prototype.Error = function() {
			var e;
			e = this;
			return e.s;
		};
		errorString.prototype.Error = function() { return this.$val.Error(); };
		ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
		errorString.init("errors", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["math/bits"] = (function() {
		var $pkg = {}, $init, deBruijn32tab, deBruijn64tab, len8tab, LeadingZeros64, TrailingZeros, TrailingZeros32, TrailingZeros64, Len64;
		LeadingZeros64 = function(x) {
			var x;
			return 64 - Len64(x) >> 0;
		};
		$pkg.LeadingZeros64 = LeadingZeros64;
		TrailingZeros = function(x) {
			var x;
			{
				return TrailingZeros32(((x >>> 0)));
			}
			return TrailingZeros64((new $Uint64(0, x)));
		};
		$pkg.TrailingZeros = TrailingZeros;
		TrailingZeros32 = function(x) {
			var x, x$1;
			if (x === 0) {
				return 32;
			}
			return (((x$1 = ($imul((((x & (-x >>> 0)) >>> 0)), 125613361) >>> 0) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn32tab[x$1])) >> 0));
		};
		$pkg.TrailingZeros32 = TrailingZeros32;
		TrailingZeros64 = function(x) {
			var x, x$1, x$2;
			if ((x.$high === 0 && x.$low === 0)) {
				return 64;
			}
			return (((x$1 = $shiftRightUint64($mul64(((x$2 = new $Uint64(-x.$high, -x.$low), new $Uint64(x.$high & x$2.$high, (x.$low & x$2.$low) >>> 0))), new $Uint64(66559345, 3033172745)), 58), (($flatten64(x$1) < 0 || $flatten64(x$1) >= deBruijn64tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn64tab[$flatten64(x$1)])) >> 0));
		};
		$pkg.TrailingZeros64 = TrailingZeros64;
		Len64 = function(x) {
			var n, x;
			n = 0;
			if ((x.$high > 1 || (x.$high === 1 && x.$low >= 0))) {
				x = $shiftRightUint64(x, (32));
				n = 32;
			}
			if ((x.$high > 0 || (x.$high === 0 && x.$low >= 65536))) {
				x = $shiftRightUint64(x, (16));
				n = n + (16) >> 0;
			}
			if ((x.$high > 0 || (x.$high === 0 && x.$low >= 256))) {
				x = $shiftRightUint64(x, (8));
				n = n + (8) >> 0;
			}
			n = n + (((($flatten64(x) < 0 || $flatten64(x) >= len8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : len8tab[$flatten64(x)]) >> 0)) >> 0;
			return n;
		};
		$pkg.Len64 = Len64;
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			deBruijn32tab = $toNativeArray($kindUint8, [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
			deBruijn64tab = $toNativeArray($kindUint8, [0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
			len8tab = $toNativeArray($kindUint8, [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["math"] = (function() {
		var $pkg = {}, $init, js, bits, arrayType, arrayType$1, arrayType$2, structType, math, zero, posInf, negInf, nan, buf, Inf, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits;
		js = $packages["github.com/gopherjs/gopherjs/js"];
		bits = $packages["math/bits"];
		arrayType = $arrayType($Uint32, 2);
		arrayType$1 = $arrayType($Float32, 2);
		arrayType$2 = $arrayType($Float64, 1);
		structType = $structType("math", [{prop: "uint32array", name: "uint32array", embedded: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", embedded: false, exported: false, typ: arrayType$2, tag: ""}]);
		Inf = function(sign) {
			var sign;
			if (sign >= 0) {
				return posInf;
			} else {
				return negInf;
			}
		};
		$pkg.Inf = Inf;
		NaN = function() {
			return nan;
		};
		$pkg.NaN = NaN;
		init = function() {
			var ab;
			ab = new ($global.ArrayBuffer)(8);
			buf.uint32array = new ($global.Uint32Array)(ab);
			buf.float32array = new ($global.Float32Array)(ab);
			buf.float64array = new ($global.Float64Array)(ab);
		};
		Float32bits = function(f) {
			var f;
			buf.float32array[0] = f;
			return buf.uint32array[0];
		};
		$pkg.Float32bits = Float32bits;
		Float32frombits = function(b) {
			var b;
			buf.uint32array[0] = b;
			return buf.float32array[0];
		};
		$pkg.Float32frombits = Float32frombits;
		Float64bits = function(f) {
			var f, x, x$1;
			buf.float64array[0] = f;
			return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		};
		$pkg.Float64bits = Float64bits;
		Float64frombits = function(b) {
			var b;
			buf.uint32array[0] = ((b.$low >>> 0));
			buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
			return buf.float64array[0];
		};
		$pkg.Float64frombits = Float64frombits;
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = bits.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
			math = $global.Math;
			zero = 0;
			posInf = 1 / zero;
			negInf = -1 / zero;
			nan = 0 / zero;
			init();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["unicode/utf8"] = (function() {
		var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRuneInString, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCountInString, RuneStart, ValidString;
		acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.lo = 0;
				this.hi = 0;
				return;
			}
			this.lo = lo_;
			this.hi = hi_;
		});
		DecodeRuneInString = function(s) {
			var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
			r = 0;
			size = 0;
			n = s.length;
			if (n < 1) {
				_tmp = 65533;
				_tmp$1 = 0;
				r = _tmp;
				size = _tmp$1;
				return [r, size];
			}
			s0 = s.charCodeAt(0);
			x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
			if (x >= 240) {
				mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
				_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
				_tmp$3 = 1;
				r = _tmp$2;
				size = _tmp$3;
				return [r, size];
			}
			sz = (x & 7) >>> 0;
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			if (n < ((sz >> 0))) {
				_tmp$4 = 65533;
				_tmp$5 = 1;
				r = _tmp$4;
				size = _tmp$5;
				return [r, size];
			}
			s1 = s.charCodeAt(1);
			if (s1 < accept.lo || accept.hi < s1) {
				_tmp$6 = 65533;
				_tmp$7 = 1;
				r = _tmp$6;
				size = _tmp$7;
				return [r, size];
			}
			if (sz === 2) {
				_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
				_tmp$9 = 2;
				r = _tmp$8;
				size = _tmp$9;
				return [r, size];
			}
			s2 = s.charCodeAt(2);
			if (s2 < 128 || 191 < s2) {
				_tmp$10 = 65533;
				_tmp$11 = 1;
				r = _tmp$10;
				size = _tmp$11;
				return [r, size];
			}
			if (sz === 3) {
				_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
				_tmp$13 = 3;
				r = _tmp$12;
				size = _tmp$13;
				return [r, size];
			}
			s3 = s.charCodeAt(3);
			if (s3 < 128 || 191 < s3) {
				_tmp$14 = 65533;
				_tmp$15 = 1;
				r = _tmp$14;
				size = _tmp$15;
				return [r, size];
			}
			_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
			_tmp$17 = 4;
			r = _tmp$16;
			size = _tmp$17;
			return [r, size];
		};
		$pkg.DecodeRuneInString = DecodeRuneInString;
		DecodeLastRuneInString = function(s) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
			r = 0;
			size = 0;
			end = s.length;
			if (end === 0) {
				_tmp = 65533;
				_tmp$1 = 0;
				r = _tmp;
				size = _tmp$1;
				return [r, size];
			}
			start = end - 1 >> 0;
			r = ((s.charCodeAt(start) >> 0));
			if (r < 128) {
				_tmp$2 = r;
				_tmp$3 = 1;
				r = _tmp$2;
				size = _tmp$3;
				return [r, size];
			}
			lim = end - 4 >> 0;
			if (lim < 0) {
				lim = 0;
			}
			start = start - (1) >> 0;
			while (true) {
				if (!(start >= lim)) { break; }
				if (RuneStart(s.charCodeAt(start))) {
					break;
				}
				start = start - (1) >> 0;
			}
			if (start < 0) {
				start = 0;
			}
			_tuple = DecodeRuneInString($substring(s, start, end));
			r = _tuple[0];
			size = _tuple[1];
			if (!(((start + size >> 0) === end))) {
				_tmp$4 = 65533;
				_tmp$5 = 1;
				r = _tmp$4;
				size = _tmp$5;
				return [r, size];
			}
			_tmp$6 = r;
			_tmp$7 = size;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		};
		$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
		RuneLen = function(r) {
			var r;
			if (r < 0) {
				return -1;
			} else if (r <= 127) {
				return 1;
			} else if (r <= 2047) {
				return 2;
			} else if (55296 <= r && r <= 57343) {
				return -1;
			} else if (r <= 65535) {
				return 3;
			} else if (r <= 1114111) {
				return 4;
			}
			return -1;
		};
		$pkg.RuneLen = RuneLen;
		EncodeRune = function(p, r) {
			var i, p, r;
			i = ((r >>> 0));
			if (i <= 127) {
				(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
				return 1;
			} else if (i <= 2047) {
				$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
				(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				return 2;
			} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
				r = 65533;
				$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
				(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				return 3;
			} else if (i <= 65535) {
				$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
				(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				return 3;
			} else {
				$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
				(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
				return 4;
			}
		};
		$pkg.EncodeRune = EncodeRune;
		RuneCountInString = function(s) {
			var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
			n = 0;
			ns = s.length;
			i = 0;
			while (true) {
				if (!(i < ns)) { break; }
				c = s.charCodeAt(i);
				if (c < 128) {
					i = i + (1) >> 0;
					n = n + (1) >> 0;
					continue;
				}
				x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
				if (x === 241) {
					i = i + (1) >> 0;
					n = n + (1) >> 0;
					continue;
				}
				size = ((((x & 7) >>> 0) >> 0));
				if ((i + size >> 0) > ns) {
					i = i + (1) >> 0;
					n = n + (1) >> 0;
					continue;
				}
				accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
				c$1 = s.charCodeAt((i + 1 >> 0));
				if (c$1 < accept.lo || accept.hi < c$1) {
					size = 1;
				} else if (size === 2) ; else {
					c$2 = s.charCodeAt((i + 2 >> 0));
					if (c$2 < 128 || 191 < c$2) {
						size = 1;
					} else if (size === 3) ; else {
						c$3 = s.charCodeAt((i + 3 >> 0));
						if (c$3 < 128 || 191 < c$3) {
							size = 1;
						}
					}
				}
				i = i + (size) >> 0;
				n = n + (1) >> 0;
			}
			n = n;
			return n;
		};
		$pkg.RuneCountInString = RuneCountInString;
		RuneStart = function(b) {
			var b;
			return !((((b & 192) >>> 0) === 128));
		};
		$pkg.RuneStart = RuneStart;
		ValidString = function(s) {
			var accept, c, c$1, c$2, i, n, s, si, size, x, x$1;
			n = s.length;
			i = 0;
			while (true) {
				if (!(i < n)) { break; }
				si = s.charCodeAt(i);
				if (si < 128) {
					i = i + (1) >> 0;
					continue;
				}
				x = ((si < 0 || si >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[si]);
				if (x === 241) {
					return false;
				}
				size = ((((x & 7) >>> 0) >> 0));
				if ((i + size >> 0) > n) {
					return false;
				}
				accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
				c = s.charCodeAt((i + 1 >> 0));
				if (c < accept.lo || accept.hi < c) {
					return false;
				} else if (size === 2) ; else {
					c$1 = s.charCodeAt((i + 2 >> 0));
					if (c$1 < 128 || 191 < c$1) {
						return false;
					} else if (size === 3) ; else {
						c$2 = s.charCodeAt((i + 3 >> 0));
						if (c$2 < 128 || 191 < c$2) {
							return false;
						}
					}
				}
				i = i + (size) >> 0;
			}
			return true;
		};
		$pkg.ValidString = ValidString;
		acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", embedded: false, exported: false, typ: $Uint8, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			first = $toNativeArray($kindUint
			acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["strconv"] = (function() {
		var $pkg = {}, $init, errors, bytealg, math, bits, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, arrayType, sliceType$6, ptrType, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float64info, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, ParseBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, baseError, bitSizeError, ParseUint, ParseInt, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatUint, FormatInt, Itoa, small, formatBits, isPowerOfTwo, quoteWith, appendQuotedWith, appendEscapedRune, Quote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
		errors = $packages["errors"];
		bytealg = $packages["internal/bytealg"];
		math = $packages["math"];
		bits = $packages["math/bits"];
		utf8 = $packages["unicode/utf8"];
		NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Func = "";
				this.Num = "";
				this.Err = $ifaceNil;
				return;
			}
			this.Func = Func_;
			this.Num = Num_;
			this.Err = Err_;
		});
		decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.d = arrayType.zero();
				this.nd = 0;
				this.dp = 0;
				this.neg = false;
				this.trunc = false;
				return;
			}
			this.d = d_;
			this.nd = nd_;
			this.dp = dp_;
			this.neg = neg_;
			this.trunc = trunc_;
		});
		leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.delta = 0;
				this.cutoff = "";
				return;
			}
			this.delta = delta_;
			this.cutoff = cutoff_;
		});
		extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.mant = new $Uint64(0, 0);
				this.exp = 0;
				this.neg = false;
				return;
			}
			this.mant = mant_;
			this.exp = exp_;
			this.neg = neg_;
		});
		floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.mantbits = 0;
				this.expbits = 0;
				this.bias = 0;
				return;
			}
			this.mantbits = mantbits_;
			this.expbits = expbits_;
			this.bias = bias_;
		});
		decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.d = sliceType$6.nil;
				this.nd = 0;
				this.dp = 0;
				this.neg = false;
				return;
			}
			this.d = d_;
			this.nd = nd_;
			this.dp = dp_;
			this.neg = neg_;
		});
		sliceType = $sliceType($Int);
		sliceType$1 = $sliceType($Float64);
		sliceType$2 = $sliceType($Float32);
		sliceType$3 = $sliceType(leftCheat);
		sliceType$4 = $sliceType($Uint16);
		sliceType$5 = $sliceType($Uint32);
		arrayType = $arrayType($Uint8, 800);
		sliceType$6 = $sliceType($Uint8);
		ptrType = $ptrType(NumError);
		arrayType$1 = $arrayType($Uint8, 24);
		arrayType$2 = $arrayType($Uint8, 32);
		ptrType$1 = $ptrType(floatInfo);
		arrayType$3 = $arrayType($Uint8, 65);
		arrayType$4 = $arrayType($Uint8, 4);
		ptrType$2 = $ptrType(decimal);
		ptrType$3 = $ptrType(decimalSlice);
		ptrType$4 = $ptrType(extFloat);
		ParseBool = function(str) {
			var _1, str;
			_1 = str;
			if (_1 === ("1") || _1 === ("t") || _1 === ("T") || _1 === ("true") || _1 === ("TRUE") || _1 === ("True")) {
				return [true, $ifaceNil];
			} else if (_1 === ("0") || _1 === ("f") || _1 === ("F") || _1 === ("false") || _1 === ("FALSE") || _1 === ("False")) {
				return [false, $ifaceNil];
			}
			return [false, syntaxError("ParseBool", str)];
		};
		$pkg.ParseBool = ParseBool;
		equalIgnoreCase = function(s1, s2) {
			var c1, c2, i, s1, s2;
			if (!((s1.length === s2.length))) {
				return false;
			}
			i = 0;
			while (true) {
				if (!(i < s1.length)) { break; }
				c1 = s1.charCodeAt(i);
				if (65 <= c1 && c1 <= 90) {
					c1 = c1 + (32) << 24 >>> 24;
				}
				c2 = s2.charCodeAt(i);
				if (65 <= c2 && c2 <= 90) {
					c2 = c2 + (32) << 24 >>> 24;
				}
				if (!((c1 === c2))) {
					return false;
				}
				i = i + (1) >> 0;
			}
			return true;
		};
		special = function(s) {
			var _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
			f = 0;
			ok = false;
			if (s.length === 0) {
				return [f, ok];
			}
			_1 = s.charCodeAt(0);
			if (_1 === (43)) {
				if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
					_tmp = math.Inf(1);
					_tmp$1 = true;
					f = _tmp;
					ok = _tmp$1;
					return [f, ok];
				}
			} else if (_1 === (45)) {
				if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
					_tmp$2 = math.Inf(-1);
					_tmp$3 = true;
					f = _tmp$2;
					ok = _tmp$3;
					return [f, ok];
				}
			} else if ((_1 === (110)) || (_1 === (78))) {
				if (equalIgnoreCase(s, "nan")) {
					_tmp$4 = math.NaN();
					_tmp$5 = true;
					f = _tmp$4;
					ok = _tmp$5;
					return [f, ok];
				}
			} else if ((_1 === (105)) || (_1 === (73))) {
				if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
					_tmp$6 = math.Inf(1);
					_tmp$7 = true;
					f = _tmp$6;
					ok = _tmp$7;
					return [f, ok];
				}
			} else {
				return [f, ok];
			}
			return [f, ok];
		};
		decimal.ptr.prototype.set = function(s) {
			var b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
			ok = false;
			b = this;
			i = 0;
			b.neg = false;
			b.trunc = false;
			if (i >= s.length) {
				return ok;
			}
			if ((s.charCodeAt(i) === 43)) {
				i = i + (1) >> 0;
			} else if ((s.charCodeAt(i) === 45)) {
				b.neg = true;
				i = i + (1) >> 0;
			}
			sawdot = false;
			sawdigits = false;
			while (true) {
				if (!(i < s.length)) { break; }
				if ((s.charCodeAt(i) === 46)) {
					if (sawdot) {
						return ok;
					}
					sawdot = true;
					b.dp = b.nd;
					i = i + (1) >> 0;
					continue;
				} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
					sawdigits = true;
					if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
						b.dp = b.dp - (1) >> 0;
						i = i + (1) >> 0;
						continue;
					}
					if (b.nd < 800) {
						(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = s.charCodeAt(i)));
						b.nd = b.nd + (1) >> 0;
					} else if (!((s.charCodeAt(i) === 48))) {
						b.trunc = true;
					}
					i = i + (1) >> 0;
					continue;
				}
				break;
			}
			if (!sawdigits) {
				return ok;
			}
			if (!sawdot) {
				b.dp = b.nd;
			}
			if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
				i = i + (1) >> 0;
				if (i >= s.length) {
					return ok;
				}
				esign = 1;
				if (s.charCodeAt(i) === 43) {
					i = i + (1) >> 0;
				} else if (s.charCodeAt(i) === 45) {
					i = i + (1) >> 0;
					esign = -1;
				}
				if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
					return ok;
				}
				e = 0;
				while (true) {
					if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
					if (e < 10000) {
						e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
					}
					i = i + (1) >> 0;
				}
				b.dp = b.dp + (($imul(e, esign))) >> 0;
			}
			if (!((i === s.length))) {
				return ok;
			}
			ok = true;
			return ok;
		};
		decimal.prototype.set = function(s) { return this.$val.set(s); };
		readFloat = function(s) {
			var _1, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
			mantissa = new $Uint64(0, 0);
			exp = 0;
			neg = false;
			trunc = false;
			ok = false;
			i = 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			if ((s.charCodeAt(i) === 43)) {
				i = i + (1) >> 0;
			} else if ((s.charCodeAt(i) === 45)) {
				neg = true;
				i = i + (1) >> 0;
			}
			sawdot = false;
			sawdigits = false;
			nd = 0;
			ndMant = 0;
			dp = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c = s.charCodeAt(i);
				_1 = true;
				if (_1 === ((c === 46))) {
					if (sawdot) {
						return [mantissa, exp, neg, trunc, ok];
					}
					sawdot = true;
					dp = nd;
					i = i + (1) >> 0;
					continue;
				} else if (_1 === (48 <= c && c <= 57)) {
					sawdigits = true;
					if ((c === 48) && (nd === 0)) {
						dp = dp - (1) >> 0;
						i = i + (1) >> 0;
						continue;
					}
					nd = nd + (1) >> 0;
					if (ndMant < 19) {
						mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
						mantissa = (x = (new $Uint64(0, (c - 48 << 24 >>> 24))), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
						ndMant = ndMant + (1) >> 0;
					} else if (!((s.charCodeAt(i) === 48))) {
						trunc = true;
					}
					i = i + (1) >> 0;
					continue;
				}
				break;
			}
			if (!sawdigits) {
				return [mantissa, exp, neg, trunc, ok];
			}
			if (!sawdot) {
				dp = nd;
			}
			if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
				i = i + (1) >> 0;
				if (i >= s.length) {
					return [mantissa, exp, neg, trunc, ok];
				}
				esign = 1;
				if (s.charCodeAt(i) === 43) {
					i = i + (1) >> 0;
				} else if (s.charCodeAt(i) === 45) {
					i = i + (1) >> 0;
					esign = -1;
				}
				if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
					return [mantissa, exp, neg, trunc, ok];
				}
				e = 0;
				while (true) {
					if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
					if (e < 10000) {
						e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
					}
					i = i + (1) >> 0;
				}
				dp = dp + (($imul(e, esign))) >> 0;
			}
			if (!((i === s.length))) {
				return [mantissa, exp, neg, trunc, ok];
			}
			if (!((mantissa.$high === 0 && mantissa.$low === 0))) {
				exp = dp - ndMant >> 0;
			}
			ok = true;
			return [mantissa, exp, neg, trunc, ok];
		};
		decimal.ptr.prototype.floatBits = function(flt) {
			var _tmp, _tmp$1, b, bits$1, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
			/* */ $s = 0; s: while (true) { switch ($s) { case 0:
			b = new $Uint64(0, 0);
			overflow = false;
			d = this;
			exp = 0;
			mant = new $Uint64(0, 0);
			/* */ if (d.nd === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (d.nd === 0) { */ case 1:
				mant = new $Uint64(0, 0);
				exp = flt.bias;
				/* goto out */ $s = 3; continue;
			/* } */ case 2:
			/* */ if (d.dp > 310) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (d.dp > 310) { */ case 4:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 5:
			/* */ if (d.dp < -330) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (d.dp < -330) { */ case 7:
				mant = new $Uint64(0, 0);
				exp = flt.bias;
				/* goto out */ $s = 3; continue;
			/* } */ case 8:
			exp = 0;
			while (true) {
				if (!(d.dp > 0)) { break; }
				n = 0;
				if (d.dp >= powtab.$length) {
					n = 27;
				} else {
					n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x]));
				}
				d.Shift(-n);
				exp = exp + (n) >> 0;
			}
			while (true) {
				if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
				n$1 = 0;
				if (-d.dp >= powtab.$length) {
					n$1 = 27;
				} else {
					n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x$1]));
				}
				d.Shift(n$1);
				exp = exp - (n$1) >> 0;
			}
			exp = exp - (1) >> 0;
			if (exp < (flt.bias + 1 >> 0)) {
				n$2 = (flt.bias + 1 >> 0) - exp >> 0;
				d.Shift(-n$2);
				exp = exp + (n$2) >> 0;
			}
			/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 10:
			d.Shift((((1 + flt.mantbits >>> 0) >> 0)));
			mant = d.RoundedInteger();
			/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
				mant = $shiftRightUint64(mant, (1));
				exp = exp + (1) >> 0;
				/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
					/* goto overflow */ $s = 6; continue;
				/* } */ case 14:
			/* } */ case 12:
			if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
				exp = flt.bias;
			}
			/* goto out */ $s = 3; continue;
			/* overflow: */ case 6:
			mant = new $Uint64(0, 0);
			exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
			/* out: */ case 3:
			bits$1 = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
			bits$1 = (x$7 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits$1.$high | x$7.$high, (bits$1.$low | x$7.$low) >>> 0));
			if (d.neg) {
				bits$1 = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits$1.$high | x$8.$high, (bits$1.$low | x$8.$low) >>> 0));
			}
			_tmp = bits$1;
			_tmp$1 = overflow;
			b = _tmp;
			overflow = _tmp$1;
			$s = -1; return [b, overflow];
			/* */ } return; }
		};
		decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
		atof64exact = function(mantissa, exp, neg) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
			f = 0;
			ok = false;
			if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
				return [f, ok];
			}
			f = ($flatten64(mantissa));
			if (neg) {
				f = -f;
			}
			if ((exp === 0)) {
				_tmp = f;
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			} else if (exp > 0 && exp <= 37) {
				if (exp > 22) {
					f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$1])));
					exp = 22;
				}
				if (f > 1e+15 || f < -1e+15) {
					return [f, ok];
				}
				_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + exp]);
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			} else if (exp < 0 && exp >= -22) {
				_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$2]));
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
			return [f, ok];
		};
		atof32exact = function(mantissa, exp, neg) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
			f = 0;
			ok = false;
			if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
				return [f, ok];
			}
			f = ($flatten64(mantissa));
			if (neg) {
				f = -f;
			}
			if ((exp === 0)) {
				_tmp = f;
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			} else if (exp > 0 && exp <= 17) {
				if (exp > 10) {
					f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$1]))));
					exp = 10;
				}
				if (f > 1e+07 || f < -1e+07) {
					return [f, ok];
				}
				_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + exp]));
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			} else if (exp < 0 && exp >= -10) {
				_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$2])));
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
			return [f, ok];
		};
		atof32 = function(s) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
			f = 0;
			err = $ifaceNil;
			_tuple = special(s);
			val = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				_tmp = ($fround(val));
				_tmp$1 = $ifaceNil;
				f = _tmp;
				err = _tmp$1;
				return [f, err];
			}
			if (optimize) {
				_tuple$1 = readFloat(s);
				mantissa = _tuple$1[0];
				exp = _tuple$1[1];
				neg = _tuple$1[2];
				trunc = _tuple$1[3];
				ok$1 = _tuple$1[4];
				if (ok$1) {
					if (!trunc) {
						_tuple$2 = atof32exact(mantissa, exp, neg);
						f$1 = _tuple$2[0];
						ok$2 = _tuple$2[1];
						if (ok$2) {
							_tmp$2 = f$1;
							_tmp$3 = $ifaceNil;
							f = _tmp$2;
							err = _tmp$3;
							return [f, err];
						}
					}
					ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
					ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
					if (ok$3) {
						_tuple$3 = ext.floatBits(float32info);
						b = _tuple$3[0];
						ovf = _tuple$3[1];
						f = math.Float32frombits(((b.$low >>> 0)));
						if (ovf) {
							err = rangeError("ParseFloat", s);
						}
						_tmp$4 = f;
						_tmp$5 = err;
						f = _tmp$4;
						err = _tmp$5;
						return [f, err];
					}
				}
			}
			d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
			if (!d.set(s)) {
				_tmp$6 = 0;
				_tmp$7 = syntaxError("ParseFloat", s);
				f = _tmp$6;
				err = _tmp$7;
				return [f, err];
			}
			_tuple$4 = d.floatBits(float32info);
			b$1 = _tuple$4[0];
			ovf$1 = _tuple$4[1];
			f = math.Float32frombits(((b$1.$low >>> 0)));
			if (ovf$1) {
				err = rangeError("ParseFloat", s);
			}
			_tmp$8 = f;
			_tmp$9 = err;
			f = _tmp$8;
			err = _tmp$9;
			return [f, err];
		};
		atof64 = function(s) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
			f = 0;
			err = $ifaceNil;
			_tuple = special(s);
			val = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				_tmp = val;
				_tmp$1 = $ifaceNil;
				f = _tmp;
				err = _tmp$1;
				return [f, err];
			}
			if (optimize) {
				_tuple$1 = readFloat(s);
				mantissa = _tuple$1[0];
				exp = _tuple$1[1];
				neg = _tuple$1[2];
				trunc = _tuple$1[3];
				ok$1 = _tuple$1[4];
				if (ok$1) {
					if (!trunc) {
						_tuple$2 = atof64exact(mantissa, exp, neg);
						f$1 = _tuple$2[0];
						ok$2 = _tuple$2[1];
						if (ok$2) {
							_tmp$2 = f$1;
							_tmp$3 = $ifaceNil;
							f = _tmp$2;
							err = _tmp$3;
							return [f, err];
						}
					}
					ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
					ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
					if (ok$3) {
						_tuple$3 = ext.floatBits(float64info);
						b = _tuple$3[0];
						ovf = _tuple$3[1];
						f = math.Float64frombits(b);
						if (ovf) {
							err = rangeError("ParseFloat", s);
						}
						_tmp$4 = f;
						_tmp$5 = err;
						f = _tmp$4;
						err = _tmp$5;
						return [f, err];
					}
				}
			}
			d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
			if (!d.set(s)) {
				_tmp$6 = 0;
				_tmp$7 = syntaxError("ParseFloat", s);
				f = _tmp$6;
				err = _tmp$7;
				return [f, err];
			}
			_tuple$4 = d.floatBits(float64info);
			b$1 = _tuple$4[0];
			ovf$1 = _tuple$4[1];
			f = math.Float64frombits(b$1);
			if (ovf$1) {
				err = rangeError("ParseFloat", s);
			}
			_tmp$8 = f;
			_tmp$9 = err;
			f = _tmp$8;
			err = _tmp$9;
			return [f, err];
		};
		ParseFloat = function(s, bitSize) {
			var _tuple, bitSize, err, f, s;
			if (bitSize === 32) {
				_tuple = atof32(s);
				f = _tuple[0];
				err = _tuple[1];
				return [(f), err];
			}
			return atof64(s);
		};
		$pkg.ParseFloat = ParseFloat;
		NumError.ptr.prototype.Error = function() {
			var _r, e, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			e = this;
			_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
		};
		NumError.prototype.Error = function() { return this.$val.Error(); };
		syntaxError = function(fn, str) {
			var fn, str;
			return new NumError.ptr(fn, str, $pkg.ErrSyntax);
		};
		rangeError = function(fn, str) {
			var fn, str;
			return new NumError.ptr(fn, str, $pkg.ErrRange);
		};
		baseError = function(fn, str, base) {
			var base, fn, str;
			return new NumError.ptr(fn, str, errors.New("invalid base " + Itoa(base)));
		};
		bitSizeError = function(fn, str, bitSize) {
			var bitSize, fn, str;
			return new NumError.ptr(fn, str, errors.New("invalid bit size " + Itoa(bitSize)));
		};
		ParseUint = function(s, base, bitSize) {
			var _1, _i, _ref, base, bitSize, c, cutoff, d, maxVal, n, n1, s, s0, x, x$1, x$2;
			if (s.length === 0) {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s)];
			}
			s0 = s;
			if (2 <= base && base <= 36) ; else if ((base === 0)) {
				if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {
					if (s.length < 3) {
						return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
					}
					base = 16;
					s = $substring(s, 2);
				} else if ((s.charCodeAt(0) === 48)) {
					base = 8;
					s = $substring(s, 1);
				} else {
					base = 10;
				}
			} else {
				return [new $Uint64(0, 0), baseError("ParseUint", s0, base)];
			}
			if (bitSize === 0) {
				bitSize = 32;
			} else if (bitSize < 0 || bitSize > 64) {
				return [new $Uint64(0, 0), bitSizeError("ParseUint", s0, bitSize)];
			}
			cutoff = new $Uint64(0, 0);
			_1 = base;
			if (_1 === (10)) {
				cutoff = new $Uint64(429496729, 2576980378);
			} else if (_1 === (16)) {
				cutoff = new $Uint64(268435456, 0);
			} else {
				cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, base)), false), new $Uint64(x.$high + 0, x.$low + 1));
			}
			maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((bitSize >>> 0))), new $Uint64(x$1.$high - 0, x$1.$low - 1));
			n = new $Uint64(0, 0);
			_ref = (new sliceType$6($stringToBytes(s)));
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				d = 0;
				if (48 <= c && c <= 57) {
					d = c - 48 << 24 >>> 24;
				} else if (97 <= c && c <= 122) {
					d = (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
				} else if (65 <= c && c <= 90) {
					d = (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
				} else {
					return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
				}
				if (d >= ((base << 24 >>> 24))) {
					return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
				}
				if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) {
					return [maxVal, rangeError("ParseUint", s0)];
				}
				n = $mul64(n, ((new $Uint64(0, base))));
				n1 = (x$2 = (new $Uint64(0, d)), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
				if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) {
					return [maxVal, rangeError("ParseUint", s0)];
				}
				n = n1;
				_i++;
			}
			return [n, $ifaceNil];
		};
		$pkg.ParseUint = ParseUint;
		ParseInt = function(s, base, bitSize) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
			i = new $Int64(0, 0);
			err = $ifaceNil;
			if (s.length === 0) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = syntaxError("ParseInt", s);
				i = _tmp;
				err = _tmp$1;
				return [i, err];
			}
			s0 = s;
			neg = false;
			if (s.charCodeAt(0) === 43) {
				s = $substring(s, 1);
			} else if (s.charCodeAt(0) === 45) {
				neg = true;
				s = $substring(s, 1);
			}
			un = new $Uint64(0, 0);
			_tuple = ParseUint(s, base, bitSize);
			un = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
				$assertType(err, ptrType).Func = "ParseInt";
				$assertType(err, ptrType).Num = s0;
				_tmp$2 = new $Int64(0, 0);
				_tmp$3 = err;
				i = _tmp$2;
				err = _tmp$3;
				return [i, err];
			}
			if (bitSize === 0) {
				bitSize = 32;
			}
			cutoff = ($shiftLeft64(new $Uint64(0, 1), (((bitSize - 1 >> 0) >>> 0))));
			if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
				_tmp$4 = ((x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)));
				_tmp$5 = rangeError("ParseInt", s0);
				i = _tmp$4;
				err = _tmp$5;
				return [i, err];
			}
			if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
				_tmp$6 = (x$1 = (new $Int64(cutoff.$high, cutoff.$low)), new $Int64(-x$1.$high, -x$1.$low));
				_tmp$7 = rangeError("ParseInt", s0);
				i = _tmp$6;
				err = _tmp$7;
				return [i, err];
			}
			n = (new $Int64(un.$high, un.$low));
			if (neg) {
				n = new $Int64(-n.$high, -n.$low);
			}
			_tmp$8 = n;
			_tmp$9 = $ifaceNil;
			i = _tmp$8;
			err = _tmp$9;
			return [i, err];
		};
		$pkg.ParseInt = ParseInt;
		decimal.ptr.prototype.String = function() {
			var a, buf, n, w;
			a = this;
			n = 10 + a.nd >> 0;
			if (a.dp > 0) {
				n = n + (a.dp) >> 0;
			}
			if (a.dp < 0) {
				n = n + (-a.dp) >> 0;
			}
			buf = $makeSlice(sliceType$6, n);
			w = 0;
			if ((a.nd === 0)) {
				return "0";
			} else if (a.dp <= 0) {
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
				w = w + (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
				w = w + (1) >> 0;
				w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
				w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			} else if (a.dp < a.nd) {
				w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
				w = w + (1) >> 0;
				w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
			} else {
				w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
				w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
			}
			return ($bytesToString($subslice(buf, 0, w)));
		};
		decimal.prototype.String = function() { return this.$val.String(); };
		digitZero = function(dst) {
			var _i, _ref, dst, i;
			_ref = dst;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
				_i++;
			}
			return dst.$length;
		};
		trim = function(a) {
			var a, x, x$1;
			while (true) {
				if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
				a.nd = a.nd - (1) >> 0;
			}
			if (a.nd === 0) {
				a.dp = 0;
			}
		};
		decimal.ptr.prototype.Assign = function(v) {
			var a, buf, n, v, v1, x, x$1, x$2;
			a = this;
			buf = arrayType$1.zero();
			n = 0;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n + (1) >> 0;
				v = v1;
			}
			a.nd = 0;
			n = n - (1) >> 0;
			while (true) {
				if (!(n >= 0)) { break; }
				(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
				a.nd = a.nd + (1) >> 0;
				n = n - (1) >> 0;
			}
			a.dp = a.nd;
			trim(a);
		};
		decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
		rightShift = function(a, k) {
			var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
			r = 0;
			w = 0;
			n = 0;
			while (true) {
				if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
				if (r >= a.nd) {
					if (n === 0) {
						a.nd = 0;
						return;
					}
					while (true) {
						if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
						n = n * 10 >>> 0;
						r = r + (1) >> 0;
					}
					break;
				}
				c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
				n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
				r = r + (1) >> 0;
			}
			a.dp = a.dp - ((r - 1 >> 0)) >> 0;
			mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
			while (true) {
				if (!(r < a.nd)) { break; }
				c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
				dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
				n = (n & (mask)) >>> 0;
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
				n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
				r = r + (1) >> 0;
			}
			while (true) {
				if (!(n > 0)) { break; }
				dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
				n = (n & (mask)) >>> 0;
				if (w < 800) {
					(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
					w = w + (1) >> 0;
				} else if (dig$1 > 0) {
					a.trunc = true;
				}
				n = n * 10 >>> 0;
			}
			a.nd = w;
			trim(a);
		};
		prefixIsLessThan = function(b, s) {
			var b, i, s;
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				if (i >= b.$length) {
					return true;
				}
				if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
					return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
				}
				i = i + (1) >> 0;
			}
			return false;
		};
		leftShift = function(a, k) {
			var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
			delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
			if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
				delta = delta - (1) >> 0;
			}
			r = a.nd;
			w = a.nd + delta >> 0;
			n = 0;
			r = r - (1) >> 0;
			while (true) {
				if (!(r >= 0)) { break; }
				n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
				quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				rem = n - (10 * quo >>> 0) >>> 0;
				w = w - (1) >> 0;
				if (w < 800) {
					(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
				} else if (!((rem === 0))) {
					a.trunc = true;
				}
				n = quo;
				r = r - (1) >> 0;
			}
			while (true) {
				if (!(n > 0)) { break; }
				quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
				w = w - (1) >> 0;
				if (w < 800) {
					(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
				} else if (!((rem$1 === 0))) {
					a.trunc = true;
				}
				n = quo$1;
			}
			a.nd = a.nd + (delta) >> 0;
			if (a.nd >= 800) {
				a.nd = 800;
			}
			a.dp = a.dp + (delta) >> 0;
			trim(a);
		};
		decimal.ptr.prototype.Shift = function(k) {
			var a, k;
			a = this;
			if ((a.nd === 0)) ; else if (k > 0) {
				while (true) {
					if (!(k > 28)) { break; }
					leftShift(a, 28);
					k = k - (28) >> 0;
				}
				leftShift(a, ((k >>> 0)));
			} else if (k < 0) {
				while (true) {
					if (!(k < -28)) { break; }
					rightShift(a, 28);
					k = k + (28) >> 0;
				}
				rightShift(a, ((-k >>> 0)));
			}
		};
		decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
		shouldRoundUp = function(a, nd) {
			var _r, a, nd, x, x$1, x$2, x$3;
			if (nd < 0 || nd >= a.nd) {
				return false;
			}
			if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
				if (a.trunc) {
					return true;
				}
				return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
			}
			return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
		};
		decimal.ptr.prototype.Round = function(nd) {
			var a, nd;
			a = this;
			if (nd < 0 || nd >= a.nd) {
				return;
			}
			if (shouldRoundUp(a, nd)) {
				a.RoundUp(nd);
			} else {
				a.RoundDown(nd);
			}
		};
		decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
		decimal.ptr.prototype.RoundDown = function(nd) {
			var a, nd;
			a = this;
			if (nd < 0 || nd >= a.nd) {
				return;
			}
			a.nd = nd;
			trim(a);
		};
		decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
		decimal.ptr.prototype.RoundUp = function(nd) {
			var a, c, i, nd, x, x$1, x$2;
			a = this;
			if (nd < 0 || nd >= a.nd) {
				return;
			}
			i = nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
				if (c < 57) {
					(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
					a.nd = i + 1 >> 0;
					return;
				}
				i = i - (1) >> 0;
			}
			a.d[0] = 49;
			a.nd = 1;
			a.dp = a.dp + (1) >> 0;
		};
		decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
		decimal.ptr.prototype.RoundedInteger = function() {
			var a, i, n, x, x$1, x$2, x$3;
			a = this;
			if (a.dp > 20) {
				return new $Uint64(4294967295, 4294967295);
			}
			i = 0;
			n = new $Uint64(0, 0);
			i = 0;
			while (true) {
				if (!(i < a.dp && i < a.nd)) { break; }
				n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
				i = i + (1) >> 0;
			}
			while (true) {
				if (!(i < a.dp)) { break; }
				n = $mul64(n, (new $Uint64(0, 10)));
				i = i + (1) >> 0;
			}
			if (shouldRoundUp(a, a.dp)) {
				n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
			}
			return n;
		};
		decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
		extFloat.ptr.prototype.floatBits = function(flt) {
			var bits$1, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
			bits$1 = new $Uint64(0, 0);
			overflow = false;
			f = this;
			f.Normalize();
			exp = f.exp + 63 >> 0;
			if (exp < (flt.bias + 1 >> 0)) {
				n = (flt.bias + 1 >> 0) - exp >> 0;
				f.mant = $shiftRightUint64(f.mant, (((n >>> 0))));
				exp = exp + (n) >> 0;
			}
			mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
			if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
				mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
			}
			if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
				mant = $shiftRightUint64(mant, (1));
				exp = exp + (1) >> 0;
			}
			if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
				mant = new $Uint64(0, 0);
				exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
				overflow = true;
			} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
				exp = flt.bias;
			}
			bits$1 = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
			bits$1 = (x$9 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits$1.$high | x$9.$high, (bits$1.$low | x$9.$low) >>> 0));
			if (f.neg) {
				bits$1 = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits$1.$high | x$10.$high, (bits$1.$low | x$10.$low) >>> 0));
			}
			return [bits$1, overflow];
		};
		extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
		extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
			var _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
			lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			f = this;
			f.mant = mant;
			f.exp = exp - ((flt.mantbits >> 0)) >> 0;
			f.neg = neg;
			if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
				f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
				f.exp = 0;
				_tmp = $clone(f, extFloat);
				_tmp$1 = $clone(f, extFloat);
				extFloat.copy(lower, _tmp);
				extFloat.copy(upper, _tmp$1);
				return [lower, upper];
			}
			expBiased = exp - flt.bias >> 0;
			extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
			if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
				extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
			} else {
				extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
			}
			return [lower, upper];
		};
		extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
		extFloat.ptr.prototype.Normalize = function() {
			var f, shift, x;
			f = this;
			if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
				return 0;
			}
			shift = bits.LeadingZeros64(f.mant);
			f.mant = $shiftLeft64(f.mant, (((shift >>> 0))));
			f.exp = f.exp - (shift) >> 0;
			return ((shift >>> 0));
		};
		extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
		extFloat.ptr.prototype.Multiply = function(g) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			f = this;
			_tmp = $shiftRightUint64(f.mant, 32);
			_tmp$1 = (new $Uint64(0, ((f.mant.$low >>> 0))));
			fhi = _tmp;
			flo = _tmp$1;
			_tmp$2 = $shiftRightUint64(g.mant, 32);
			_tmp$3 = (new $Uint64(0, ((g.mant.$low >>> 0))));
			ghi = _tmp$2;
			glo = _tmp$3;
			cross1 = $mul64(fhi, glo);
			cross2 = $mul64(flo, ghi);
			f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
			rem = (x$4 = (x$5 = (new $Uint64(0, ((cross1.$low >>> 0)))), x$6 = (new $Uint64(0, ((cross2.$low >>> 0)))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
			rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
			f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
			f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
		};
		extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
		extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
			var _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
			ok = false;
			f = this;
			errors$1 = 0;
			if (trunc) {
				errors$1 = errors$1 + (4) >> 0;
			}
			f.mant = mantissa;
			f.exp = 0;
			f.neg = neg;
			i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (exp10 < -348 || i >= 87) {
				ok = false;
				return ok;
			}
			adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
				f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
				f.Normalize();
			} else {
				f.Normalize();
				f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
				errors$1 = errors$1 + (4) >> 0;
			}
			f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
			if (errors$1 > 0) {
				errors$1 = errors$1 + (1) >> 0;
			}
			errors$1 = errors$1 + (4) >> 0;
			shift = f.Normalize();
			errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
			denormalExp = flt.bias - 63 >> 0;
			extrabits = 0;
			if (f.exp <= denormalExp) {
				extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + (((denormalExp - f.exp >> 0) >>> 0)) >>> 0;
			} else {
				extrabits = 63 - flt.mantbits >>> 0;
			}
			halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
			mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
			if ((x$5 = (x$6 = (new $Int64(halfway.$high, halfway.$low)), x$7 = (new $Int64(0, errors$1)), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = (new $Int64(mant_extra.$high, mant_extra.$low)), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = (new $Int64(mant_extra.$high, mant_extra.$low)), x$10 = (x$11 = (new $Int64(halfway.$high, halfway.$low)), x$12 = (new $Int64(0, errors$1)), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
				ok = false;
				return ok;
			}
			ok = true;
			return ok;
		};
		extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
		extFloat.ptr.prototype.frexp10 = function() {
			var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
			exp10 = 0;
			index = 0;
			f = this;
			approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			Loop:
			while (true) {
				exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
				if (exp < -60) {
					i = i + (1) >> 0;
				} else if (exp > -32) {
					i = i - (1) >> 0;
				} else {
					break Loop;
				}
			}
			f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
			_tmp = -((-348 + ($imul(i, 8)) >> 0));
			_tmp$1 = i;
			exp10 = _tmp;
			index = _tmp$1;
			return [exp10, index];
		};
		extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
		frexp10Many = function(a, b, c) {
			var _tuple, a, b, c, exp10, i;
			exp10 = 0;
			_tuple = c.frexp10();
			exp10 = _tuple[0];
			i = _tuple[1];
			a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
			b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
			return exp10;
		};
		extFloat.ptr.prototype.FixedDecimal = function(d, n) {
			var $CE$B5, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			f = this;
			if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
				d.nd = 0;
				d.dp = 0;
				d.neg = f.neg;
				return true;
			}
			if (n === 0) {
				$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
			}
			f.Normalize();
			_tuple = f.frexp10();
			exp10 = _tuple[0];
			shift = ((-f.exp >>> 0));
			integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
			fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
			$CE$B5 = new $Uint64(0, 1);
			needed = n;
			integerDigits = 0;
			pow10 = new $Uint64(0, 1);
			_tmp = 0;
			_tmp$1 = new $Uint64(0, 1);
			i = _tmp;
			pow = _tmp$1;
			while (true) {
				if (!(i < 20)) { break; }
				if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
					integerDigits = i;
					break;
				}
				pow = $mul64(pow, (new $Uint64(0, 10)));
				i = i + (1) >> 0;
			}
			rest = integer;
			if (integerDigits > needed) {
				pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
				integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
			} else {
				rest = 0;
			}
			buf = arrayType$2.zero();
			pos = 32;
			v = integer;
			while (true) {
				if (!(v > 0)) { break; }
				v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				v = v - (($imul(10, v1) >>> 0)) >>> 0;
				pos = pos - (1) >> 0;
				((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
				v = v1;
			}
			i$1 = pos;
			while (true) {
				if (!(i$1 < 32)) { break; }
				(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
				i$1 = i$1 + (1) >> 0;
			}
			nd = 32 - pos >> 0;
			d.nd = nd;
			d.dp = integerDigits + exp10 >> 0;
			needed = needed - (nd) >> 0;
			if (needed > 0) {
				if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
					$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
				}
				while (true) {
					if (!(needed > 0)) { break; }
					fraction = $mul64(fraction, (new $Uint64(0, 10)));
					$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
					if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
						return false;
					}
					digit = $shiftRightUint64(fraction, shift);
					(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
					fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
					nd = nd + (1) >> 0;
					needed = needed - (1) >> 0;
				}
				d.nd = nd;
			}
			ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
			if (!ok) {
				return false;
			}
			i$2 = d.nd - 1 >> 0;
			while (true) {
				if (!(i$2 >= 0)) { break; }
				if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
					d.nd = i$2 + 1 >> 0;
					break;
				}
				i$2 = i$2 - (1) >> 0;
			}
			return true;
		};
		extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
		adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
			var $CE$B5, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
				$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
			}
			if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
			}
			if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
				return true;
			}
			if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
				i = d.nd - 1 >> 0;
				while (true) {
					if (!(i >= 0)) { break; }
					if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
						d.nd = d.nd - (1) >> 0;
					} else {
						break;
					}
					i = i - (1) >> 0;
				}
				if (i < 0) {
					(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
					d.nd = 1;
					d.dp = d.dp + (1) >> 0;
				} else {
					(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
				}
				return true;
			}
			return false;
		};
		extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
			var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			f = this;
			if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
				d.nd = 0;
				d.dp = 0;
				d.neg = f.neg;
				return true;
			}
			if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
				buf = arrayType$1.zero();
				n = 23;
				v = f.mant;
				while (true) {
					if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
					v1 = $div64(v, new $Uint64(0, 10), false);
					v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
					((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
					n = n - (1) >> 0;
					v = v1;
				}
				nd = (24 - n >> 0) - 1 >> 0;
				i = 0;
				while (true) {
					if (!(i < nd)) { break; }
					(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
					i = i + (1) >> 0;
				}
				_tmp = nd;
				_tmp$1 = nd;
				d.nd = _tmp;
				d.dp = _tmp$1;
				while (true) {
					if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
					d.nd = d.nd - (1) >> 0;
				}
				if (d.nd === 0) {
					d.dp = 0;
				}
				d.neg = f.neg;
				return true;
			}
			upper.Normalize();
			if (f.exp > upper.exp) {
				f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
				f.exp = upper.exp;
			}
			if (lower.exp > upper.exp) {
				lower.mant = $shiftLeft64(lower.mant, ((((lower.exp - upper.exp >> 0) >>> 0))));
				lower.exp = upper.exp;
			}
			exp10 = frexp10Many(lower, f, upper);
			upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
			lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
			shift = ((-upper.exp >>> 0));
			integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
			fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
			allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
			targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
			integerDigits = 0;
			_tmp$2 = 0;
			_tmp$3 = new $Uint64(0, 1);
			i$1 = _tmp$2;
			pow = _tmp$3;
			while (true) {
				if (!(i$1 < 20)) { break; }
				if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
					integerDigits = i$1;
					break;
				}
				pow = $mul64(pow, (new $Uint64(0, 10)));
				i$1 = i$1 + (1) >> 0;
			}
			i$2 = 0;
			while (true) {
				if (!(i$2 < integerDigits)) { break; }
				pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
				digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
				integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
				currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
				if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
					d.nd = i$2 + 1 >> 0;
					d.dp = integerDigits + exp10 >> 0;
					d.neg = f.neg;
					return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
				}
				i$2 = i$2 + (1) >> 0;
			}
			d.nd = integerDigits;
			d.dp = d.nd + exp10 >> 0;
			d.neg = f.neg;
			digit$1 = 0;
			multiplier = new $Uint64(0, 1);
			while (true) {
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
				digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
				(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
				d.nd = d.nd + (1) >> 0;
				fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
				if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
					return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
				}
			}
		};
		extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
		adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
			var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
				return false;
			}
			while (true) {
				if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
				_index = d.nd - 1 >> 0;
				(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
				currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
			}
			if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
				return false;
			}
			if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
				return false;
			}
			if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
				d.nd = 0;
				d.dp = 0;
			}
			return true;
		};
		FormatFloat = function(f, fmt, prec, bitSize) {
			var bitSize, f, fmt, prec;
			return ($bytesToString(genericFtoa($makeSlice(sliceType$6, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize)));
		};
		$pkg.FormatFloat = FormatFloat;
		genericFtoa = function(dst, val, fmt, prec, bitSize) {
			var _1, _2, _3, _4, _tuple, bitSize, bits$1, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
			bits$1 = new $Uint64(0, 0);
			flt = ptrType$1.nil;
			_1 = bitSize;
			if (_1 === (32)) {
				bits$1 = (new $Uint64(0, math.Float32bits(($fround(val)))));
				flt = float32info;
			} else if (_1 === (64)) {
				bits$1 = math.Float64bits(val);
				flt = float64info;
			} else {
				$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
			}
			neg = !((x = $shiftRightUint64(bits$1, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
			exp = (($shiftRightUint64(bits$1, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
			mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits$1.$high & x$1.$high, (bits$1.$low & x$1.$low) >>> 0));
			_2 = exp;
			if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
				s = "";
				if (!((mant.$high === 0 && mant.$low === 0))) {
					s = "NaN";
				} else if (neg) {
					s = "-Inf";
				} else {
					s = "+Inf";
				}
				return $appendSlice(dst, s);
			} else if (_2 === (0)) {
				exp = exp + (1) >> 0;
			} else {
				mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
			}
			exp = exp + (flt.bias) >> 0;
			if (fmt === 98) {
				return fmtB(dst, neg, mant, exp, flt);
			}
			if (!optimize) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
			ok = false;
			shortest = prec < 0;
			if (shortest) {
				f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
				lower = $clone(_tuple[0], extFloat);
				upper = $clone(_tuple[1], extFloat);
				buf = arrayType$2.zero();
				digs.d = new sliceType$6(buf);
				ok = f.ShortestDecimal(digs, lower, upper);
				if (!ok) {
					return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
				}
				_3 = fmt;
				if ((_3 === (101)) || (_3 === (69))) {
					prec = max(digs.nd - 1 >> 0, 0);
				} else if (_3 === (102)) {
					prec = max(digs.nd - digs.dp >> 0, 0);
				} else if ((_3 === (103)) || (_3 === (71))) {
					prec = digs.nd;
				}
			} else if (!((fmt === 102))) {
				digits = prec;
				_4 = fmt;
				if ((_4 === (101)) || (_4 === (69))) {
					digits = digits + (1) >> 0;
				} else if ((_4 === (103)) || (_4 === (71))) {
					if (prec === 0) {
						prec = 1;
					}
					digits = prec;
				}
				if (digits <= 15) {
					buf$1 = arrayType$1.zero();
					digs.d = new sliceType$6(buf$1);
					f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
					ok = f$1.FixedDecimal(digs, digits);
				}
			}
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
		};
		bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
			var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
			d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
			d.Assign(mant);
			d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
			digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
			shortest = prec < 0;
			if (shortest) {
				roundShortest(d, mant, exp, flt);
				decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
				_1 = fmt;
				if ((_1 === (101)) || (_1 === (69))) {
					prec = digs.nd - 1 >> 0;
				} else if (_1 === (102)) {
					prec = max(digs.nd - digs.dp >> 0, 0);
				} else if ((_1 === (103)) || (_1 === (71))) {
					prec = digs.nd;
				}
			} else {
				_2 = fmt;
				if ((_2 === (101)) || (_2 === (69))) {
					d.Round(prec + 1 >> 0);
				} else if (_2 === (102)) {
					d.Round(d.dp + prec >> 0);
				} else if ((_2 === (103)) || (_2 === (71))) {
					if (prec === 0) {
						prec = 1;
					}
					d.Round(prec);
				}
				decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			}
			return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
		};
		formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
			var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
			} else if (_1 === (102)) {
				return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
			} else if ((_1 === (103)) || (_1 === (71))) {
				eprec = prec;
				if (eprec > digs.nd && digs.nd >= digs.dp) {
					eprec = digs.nd;
				}
				if (shortest) {
					eprec = 6;
				}
				exp = digs.dp - 1 >> 0;
				if (exp < -4 || exp >= eprec) {
					if (prec > digs.nd) {
						prec = digs.nd;
					}
					return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
				}
				if (prec > digs.dp) {
					prec = digs.nd;
				}
				return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
			}
			return $append(dst, 37, fmt);
		};
		roundShortest = function(d, mant, exp, flt) {
			var d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
			if ((mant.$high === 0 && mant.$low === 0)) {
				d.nd = 0;
				return;
			}
			minexp = flt.bias + 1 >> 0;
			if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
				return;
			}
			upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
			upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
			upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
			mantlo = new $Uint64(0, 0);
			explo = 0;
			if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
				mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
				explo = exp;
			} else {
				mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
				explo = exp - 1 >> 0;
			}
			lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
			lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
			lower.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
			inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
			i = 0;
			while (true) {
				if (!(i < d.nd)) { break; }
				l = 48;
				if (i < lower.nd) {
					l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
				}
				m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
				u = 48;
				if (i < upper.nd) {
					u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
				}
				okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
				okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
				if (okdown && okup) {
					d.Round(i + 1 >> 0);
					return;
				} else if (okdown) {
					d.RoundDown(i + 1 >> 0);
					return;
				} else if (okup) {
					d.RoundUp(i + 1 >> 0);
					return;
				}
				i = i + (1) >> 0;
			}
		};
		fmtE = function(dst, neg, d, prec, fmt) {
			var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
			if (neg) {
				dst = $append(dst, 45);
			}
			ch = 48;
			if (!((d.nd === 0))) {
				ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			}
			dst = $append(dst, ch);
			if (prec > 0) {
				dst = $append(dst, 46);
				i = 1;
				m = min(d.nd, prec + 1 >> 0);
				if (i < m) {
					dst = $appendSlice(dst, $subslice(d.d, i, m));
					i = m;
				}
				while (true) {
					if (!(i <= prec)) { break; }
					dst = $append(dst, 48);
					i = i + (1) >> 0;
				}
			}
			dst = $append(dst, fmt);
			exp = d.dp - 1 >> 0;
			if (d.nd === 0) {
				exp = 0;
			}
			if (exp < 0) {
				ch = 45;
				exp = -exp;
			} else {
				ch = 43;
			}
			dst = $append(dst, ch);
			if (exp < 10) {
				dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
			} else if (exp < 100) {
				dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
			} else {
				dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
			}
			return dst;
		};
		fmtF = function(dst, neg, d, prec) {
			var ch, d, dst, i, j, m, neg, prec, x;
			if (neg) {
				dst = $append(dst, 45);
			}
			if (d.dp > 0) {
				m = min(d.nd, d.dp);
				dst = $appendSlice(dst, $subslice(d.d, 0, m));
				while (true) {
					if (!(m < d.dp)) { break; }
					dst = $append(dst, 48);
					m = m + (1) >> 0;
				}
			} else {
				dst = $append(dst, 48);
			}
			if (prec > 0) {
				dst = $append(dst, 46);
				i = 0;
				while (true) {
					if (!(i < prec)) { break; }
					ch = 48;
					j = d.dp + i >> 0;
					if (0 <= j && j < d.nd) {
						ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
					}
					dst = $append(dst, ch);
					i = i + (1) >> 0;
				}
			}
			return dst;
		};
		fmtB = function(dst, neg, mant, exp, flt) {
			var _tuple, _tuple$1, dst, exp, flt, mant, neg;
			if (neg) {
				dst = $append(dst, 45);
			}
			_tuple = formatBits(dst, mant, 10, false, true);
			dst = _tuple[0];
			dst = $append(dst, 112);
			exp = exp - (((flt.mantbits >> 0))) >> 0;
			if (exp >= 0) {
				dst = $append(dst, 43);
			}
			_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
			dst = _tuple$1[0];
			return dst;
		};
		min = function(a, b) {
			var a, b;
			if (a < b) {
				return a;
			}
			return b;
		};
		max = function(a, b) {
			var a, b;
			if (a > b) {
				return a;
			}
			return b;
		};
		FormatUint = function(i, base) {
			var _tuple, base, i, s;
			if ( (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
				return small(((i.$low >> 0)));
			}
			_tuple = formatBits(sliceType$6.nil, i, base, false, false);
			s = _tuple[1];
			return s;
		};
		$pkg.FormatUint = FormatUint;
		FormatInt = function(i, base) {
			var _tuple, base, i, s;
			if ( (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
				return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
			}
			_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
			s = _tuple[1];
			return s;
		};
		$pkg.FormatInt = FormatInt;
		Itoa = function(i) {
			var i;
			return FormatInt((new $Int64(0, i)), 10);
		};
		$pkg.Itoa = Itoa;
		small = function(i) {
			var i;
			if (i < 10) {
				return $substring("0123456789abcdefghijklmnopqrstuvwxyz", i, (i + 1 >> 0));
			}
			return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(i, 2)), (($imul(i, 2)) + 2 >> 0));
		};
		formatBits = function(dst, u, base, neg, append_) {
			var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, shift, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
			d = sliceType$6.nil;
			s = "";
			if (base < 2 || base > 36) {
				$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
			}
			a = arrayType$3.zero();
			i = 65;
			if (neg) {
				u = new $Uint64(-u.$high, -u.$low);
			}
			if (base === 10) {
				{
					while (true) {
						if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
						q = $div64(u, new $Uint64(0, 1000000000), false);
						us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
						j = 4;
						while (true) {
							if (!(j > 0)) { break; }
							is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
							us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
							i = i - (2) >> 0;
							(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
							(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
							j = j - (1) >> 0;
						}
						i = i - (1) >> 0;
						((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
						u = q;
					}
				}
				us$1 = ((u.$low >>> 0));
				while (true) {
					if (!(us$1 >= 100)) { break; }
					is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
					us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
					i = i - (2) >> 0;
					(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
					(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
				}
				is$2 = us$1 * 2 >>> 0;
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
				if (us$1 >= 10) {
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
				}
			} else if (isPowerOfTwo(base)) {
				shift = (((bits.TrailingZeros(((base >>> 0))) >>> 0)) & 7) >>> 0;
				b = (new $Uint64(0, base));
				m = ((base >>> 0)) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
					u = $shiftRightUint64(u, (shift));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			} else {
				b$1 = (new $Uint64(0, base));
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$1 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
					u = q$1;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			}
			if (neg) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
			}
			if (append_) {
				d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
				return [d, s];
			}
			s = ($bytesToString($subslice(new sliceType$6(a), i)));
			return [d, s];
		};
		isPowerOfTwo = function(x) {
			var x;
			return (x & ((x - 1 >> 0))) === 0;
		};
		quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
			var ASCIIonly, _q, graphicOnly, quote, s;
			return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
		};
		appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
			var ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
			buf = $append(buf, quote);
			width = 0;
			while (true) {
				if (!(s.length > 0)) { break; }
				r = ((s.charCodeAt(0) >> 0));
				width = 1;
				if (r >= 128) {
					_tuple = utf8.DecodeRuneInString(s);
					r = _tuple[0];
					width = _tuple[1];
				}
				if ((width === 1) && (r === 65533)) {
					buf = $appendSlice(buf, "\\x");
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
					s = $substring(s, width);
					continue;
				}
				buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
				s = $substring(s, width);
			}
			buf = $append(buf, quote);
			return buf;
		};
		appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
			var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
			runeTmp = arrayType$4.zero();
			if ((r === ((quote >> 0))) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, ((r << 24 >>> 24)));
					return buf;
				}
			} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
				n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
				return buf;
			}
			_1 = r;
			if (_1 === (7)) {
				buf = $appendSlice(buf, "\\a");
			} else if (_1 === (8)) {
				buf = $appendSlice(buf, "\\b");
			} else if (_1 === (12)) {
				buf = $appendSlice(buf, "\\f");
			} else if (_1 === (10)) {
				buf = $appendSlice(buf, "\\n");
			} else if (_1 === (13)) {
				buf = $appendSlice(buf, "\\r");
			} else if (_1 === (9)) {
				buf = $appendSlice(buf, "\\t");
			} else if (_1 === (11)) {
				buf = $appendSlice(buf, "\\v");
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, "\\x");
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, "\\u");
					s = 12;
					while (true) {
						if (!(s >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
						s = s - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, "\\u");
					s = 12;
					while (true) {
						if (!(s >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
						s = s - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, "\\U");
					s$1 = 28;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				}
			}
			return buf;
		};
		Quote = function(s) {
			var s;
			return quoteWith(s, 34, false, false);
		};
		$pkg.Quote = Quote;
		unhex = function(b) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
			v = 0;
			ok = false;
			c = ((b >> 0));
			if (48 <= c && c <= 57) {
				_tmp = c - 48 >> 0;
				_tmp$1 = true;
				v = _tmp;
				ok = _tmp$1;
				return [v, ok];
			} else if (97 <= c && c <= 102) {
				_tmp$2 = (c - 97 >> 0) + 10 >> 0;
				_tmp$3 = true;
				v = _tmp$2;
				ok = _tmp$3;
				return [v, ok];
			} else if (65 <= c && c <= 70) {
				_tmp$4 = (c - 65 >> 0) + 10 >> 0;
				_tmp$5 = true;
				v = _tmp$4;
				ok = _tmp$5;
				return [v, ok];
			}
			return [v, ok];
		};
		UnquoteChar = function(s, quote) {
			var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
			value = 0;
			multibyte = false;
			tail = "";
			err = $ifaceNil;
			if (s.length === 0) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			c = s.charCodeAt(0);
			if ((c === quote) && ((quote === 39) || (quote === 34))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			} else if (c >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp = r;
				_tmp$1 = true;
				_tmp$2 = $substring(s, size);
				_tmp$3 = $ifaceNil;
				value = _tmp;
				multibyte = _tmp$1;
				tail = _tmp$2;
				err = _tmp$3;
				return [value, multibyte, tail, err];
			} else if (!((c === 92))) {
				_tmp$4 = ((s.charCodeAt(0) >> 0));
				_tmp$5 = false;
				_tmp$6 = $substring(s, 1);
				_tmp$7 = $ifaceNil;
				value = _tmp$4;
				multibyte = _tmp$5;
				tail = _tmp$6;
				err = _tmp$7;
				return [value, multibyte, tail, err];
			}
			if (s.length <= 1) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			c$1 = s.charCodeAt(1);
			s = $substring(s, 2);
			switch (0) { default:
				_1 = c$1;
				if (_1 === (97)) {
					value = 7;
				} else if (_1 === (98)) {
					value = 8;
				} else if (_1 === (102)) {
					value = 12;
				} else if (_1 === (110)) {
					value = 10;
				} else if (_1 === (114)) {
					value = 13;
				} else if (_1 === (116)) {
					value = 9;
				} else if (_1 === (118)) {
					value = 11;
				} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
					n = 0;
					_2 = c$1;
					if (_2 === (120)) {
						n = 2;
					} else if (_2 === (117)) {
						n = 4;
					} else if (_2 === (85)) {
						n = 8;
					}
					v = 0;
					if (s.length < n) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					j = 0;
					while (true) {
						if (!(j < n)) { break; }
						_tuple$1 = unhex(s.charCodeAt(j));
						x = _tuple$1[0];
						ok = _tuple$1[1];
						if (!ok) {
							err = $pkg.ErrSyntax;
							return [value, multibyte, tail, err];
						}
						v = (v << 4 >> 0) | x;
						j = j + (1) >> 0;
					}
					s = $substring(s, n);
					if (c$1 === 120) {
						value = v;
						break;
					}
					if (v > 1114111) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					value = v;
					multibyte = true;
				} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
					v$1 = ((c$1 >> 0)) - 48 >> 0;
					if (s.length < 2) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					j$1 = 0;
					while (true) {
						if (!(j$1 < 2)) { break; }
						x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
						if (x$1 < 0 || x$1 > 7) {
							err = $pkg.ErrSyntax;
							return [value, multibyte, tail, err];
						}
						v$1 = ((v$1 << 3 >> 0)) | x$1;
						j$1 = j$1 + (1) >> 0;
					}
					s = $substring(s, 2);
					if (v$1 > 255) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					value = v$1;
				} else if (_1 === (92)) {
					value = 92;
				} else if ((_1 === (39)) || (_1 === (34))) {
					if (!((c$1 === quote))) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					value = ((c$1 >> 0));
				} else {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
			}
			tail = s;
			return [value, multibyte, tail, err];
		};
		$pkg.UnquoteChar = UnquoteChar;
		Unquote = function(s) {
			var _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
			n = s.length;
			if (n < 2) {
				return ["", $pkg.ErrSyntax];
			}
			quote = s.charCodeAt(0);
			if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
				return ["", $pkg.ErrSyntax];
			}
			s = $substring(s, 1, (n - 1 >> 0));
			if (quote === 96) {
				if (contains(s, 96)) {
					return ["", $pkg.ErrSyntax];
				}
				if (contains(s, 13)) {
					buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
					i = 0;
					while (true) {
						if (!(i < s.length)) { break; }
						if (!((s.charCodeAt(i) === 13))) {
							buf = $append(buf, s.charCodeAt(i));
						}
						i = i + (1) >> 0;
					}
					return [($bytesToString(buf)), $ifaceNil];
				}
				return [s, $ifaceNil];
			}
			if (!((quote === 34)) && !((quote === 39))) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 10)) {
				return ["", $pkg.ErrSyntax];
			}
			if (!contains(s, 92) && !contains(s, quote)) {
				_1 = quote;
				if (_1 === (34)) {
					if (utf8.ValidString(s)) {
						return [s, $ifaceNil];
					}
				} else if (_1 === (39)) {
					_tuple = utf8.DecodeRuneInString(s);
					r = _tuple[0];
					size = _tuple[1];
					if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
						return [s, $ifaceNil];
					}
				}
			}
			runeTmp = arrayType$4.zero();
			buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			while (true) {
				if (!(s.length > 0)) { break; }
				_tuple$1 = UnquoteChar(s, quote);
				c = _tuple$1[0];
				multibyte = _tuple$1[1];
				ss = _tuple$1[2];
				err = _tuple$1[3];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return ["", err];
				}
				s = ss;
				if (c < 128 || !multibyte) {
					buf$1 = $append(buf$1, ((c << 24 >>> 24)));
				} else {
					n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
					buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
				}
				if ((quote === 39) && !((s.length === 0))) {
					return ["", $pkg.ErrSyntax];
				}
			}
			return [($bytesToString(buf$1)), $ifaceNil];
		};
		$pkg.Unquote = Unquote;
		contains = function(s, c) {
			var c, s;
			return !((bytealg.IndexByteString(s, c) === -1));
		};
		bsearch16 = function(a, x) {
			var _q, _tmp, _tmp$1, a, h, i, j, x;
			_tmp = 0;
			_tmp$1 = a.$length;
			i = _tmp;
			j = _tmp$1;
			while (true) {
				if (!(i < j)) { break; }
				h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
					i = h + 1 >> 0;
				} else {
					j = h;
				}
			}
			return i;
		};
		bsearch32 = function(a, x) {
			var _q, _tmp, _tmp$1, a, h, i, j, x;
			_tmp = 0;
			_tmp$1 = a.$length;
			i = _tmp;
			j = _tmp$1;
			while (true) {
				if (!(i < j)) { break; }
				h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
					i = h + 1 >> 0;
				} else {
					j = h;
				}
			}
			return i;
		};
		IsPrint = function(r) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
			if (r <= 255) {
				if (32 <= r && r <= 126) {
					return true;
				}
				if (161 <= r && r <= 255) {
					return !((r === 173));
				}
				return false;
			}
			if (0 <= r && r < 65536) {
				_tmp = ((r << 16 >>> 16));
				_tmp$1 = isPrint16;
				_tmp$2 = isNotPrint16;
				rr = _tmp;
				isPrint = _tmp$1;
				isNotPrint = _tmp$2;
				i = bsearch16(isPrint, rr);
				if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
					return false;
				}
				j = bsearch16(isNotPrint, rr);
				return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
			}
			_tmp$3 = ((r >>> 0));
			_tmp$4 = isPrint32;
			_tmp$5 = isNotPrint32;
			rr$1 = _tmp$3;
			isPrint$1 = _tmp$4;
			isNotPrint$1 = _tmp$5;
			i$1 = bsearch32(isPrint$1, rr$1);
			if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
				return false;
			}
			if (r >= 131072) {
				return true;
			}
			r = r - (65536) >> 0;
			j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
			return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
		};
		$pkg.IsPrint = IsPrint;
		isInGraphicList = function(r) {
			var i, r, rr;
			if (r > 65535) {
				return false;
			}
			rr = ((r << 16 >>> 16));
			i = bsearch16(isGraphic, rr);
			return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
		};
		ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
		ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
		ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
		NumError.init("", [{prop: "Func", name: "Func", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
		decimal.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
		leftCheat.init("strconv", [{prop: "delta", name: "delta", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", embedded: false, exported: false, typ: $String, tag: ""}]);
		extFloat.init("strconv", [{prop: "mant", name: "mant", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}]);
		floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", embedded: false, exported: false, typ: $Int, tag: ""}]);
		decimalSlice.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = bits.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			optimize = true;
			powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
			float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
			float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
			$pkg.ErrRange = errors.New("value out of range");
			$pkg.ErrSyntax = errors.New("invalid syntax");
			leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
			smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
			powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
			uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
			float32info = new floatInfo.ptr(23, 8, -127);
			float64info = new floatInfo.ptr(52, 11, -1023);
			isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2154, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2557, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11218, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11849, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12590, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40938, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
			isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
			isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72192, 72263, 72272, 72323, 72326, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94177, 94208, 100332, 100352, 101106, 110592, 110878, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128724, 128736, 128748, 128752, 128760, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129280, 129291, 129296, 129356, 129360, 129387, 129408, 129431, 129472, 129472, 129488, 129510, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999]);
			isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 6813, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63807]);
			isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["internal/race"] = (function() {
		var $pkg = {}, $init, Acquire, Release;
		Acquire = function(addr) {
		};
		$pkg.Acquire = Acquire;
		Release = function(addr) {
		};
		$pkg.Release = Release;
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["sync/atomic"] = (function() {
		var $pkg = {}, $init, js, CompareAndSwapInt32, AddInt32;
		js = $packages["github.com/gopherjs/gopherjs/js"];
		CompareAndSwapInt32 = function(addr, old, new$1) {
			var addr, new$1, old;
			if (addr.$get() === old) {
				addr.$set(new$1);
				return true;
			}
			return false;
		};
		$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
		AddInt32 = function(addr, delta) {
			var addr, delta, new$1;
			new$1 = addr.$get() + delta >> 0;
			addr.$set(new$1);
			return new$1;
		};
		$pkg.AddInt32 = AddInt32;
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["sync"] = (function() {
		var $pkg = {}, $init, js, race, runtime, atomic, Pool, Mutex, poolLocalInternal, poolLocal, notifyList, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$6, ptrType$7, sliceType$4, funcType, ptrType$16, arrayType$2, semWaiters, semAwoken, allPools, runtime_registerPoolCleanup, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, throw$1, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
		js = $packages["github.com/gopherjs/gopherjs/js"];
		race = $packages["internal/race"];
		runtime = $packages["runtime"];
		atomic = $packages["sync/atomic"];
		Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.local = 0;
				this.localSize = 0;
				this.store = sliceType$4.nil;
				this.New = $throwNilPointerError;
				return;
			}
			this.local = local_;
			this.localSize = localSize_;
			this.store = store_;
			this.New = New_;
		});
		Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.state = 0;
				this.sema = 0;
				return;
			}
			this.state = state_;
			this.sema = sema_;
		});
		poolLocalInternal = $pkg.poolLocalInternal = $newType(0, $kindStruct, "sync.poolLocalInternal", true, "sync", false, function(private$0_, shared_, Mutex_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.private$0 = $ifaceNil;
				this.shared = sliceType$4.nil;
				this.Mutex = new Mutex.ptr(0, 0);
				return;
			}
			this.private$0 = private$0_;
			this.shared = shared_;
			this.Mutex = Mutex_;
		});
		poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(poolLocalInternal_, pad_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.poolLocalInternal = new poolLocalInternal.ptr($ifaceNil, sliceType$4.nil, new Mutex.ptr(0, 0));
				this.pad = arrayType$2.zero();
				return;
			}
			this.poolLocalInternal = poolLocalInternal_;
			this.pad = pad_;
		});
		notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.wait = 0;
				this.notify = 0;
				this.lock = 0;
				this.head = 0;
				this.tail = 0;
				return;
			}
			this.wait = wait_;
			this.notify = notify_;
			this.lock = lock_;
			this.head = head_;
			this.tail = tail_;
		});
		ptrType = $ptrType(Pool);
		sliceType = $sliceType(ptrType);
		ptrType$1 = $ptrType($Uint32);
		chanType = $chanType($Bool, false, false);
		sliceType$1 = $sliceType(chanType);
		ptrType$6 = $ptrType($Int32);
		ptrType$7 = $ptrType(poolLocal);
		sliceType$4 = $sliceType($emptyInterface);
		funcType = $funcType([], [$emptyInterface], false);
		ptrType$16 = $ptrType(Mutex);
		arrayType$2 = $arrayType($Uint8, 100);
		Pool.ptr.prototype.Get = function() {
			var _r, p, x, x$1, x$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			p = this;
			/* */ if (p.store.$length === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (p.store.$length === 0) { */ case 1:
				/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!(p.New === $throwNilPointerError)) { */ case 3:
					_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
				/* } */ case 4:
				$s = -1; return $ifaceNil;
			/* } */ case 2:
			x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
			$s = -1; return x$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
		};
		Pool.prototype.Get = function() { return this.$val.Get(); };
		Pool.ptr.prototype.Put = function(x) {
			var p, x;
			p = this;
			if ($interfaceIsEqual(x, $ifaceNil)) {
				return;
			}
			p.store = $append(p.store, x);
		};
		Pool.prototype.Put = function(x) { return this.$val.Put(x); };
		runtime_registerPoolCleanup = function(cleanup) {
		};
		runtime_SemacquireMutex = function(s, lifo) {
			var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; ch = $f.ch; lifo = $f.lifo; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { */ case 1:
				ch = new $Chan($Bool, 0);
				if (lifo) {
					_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $appendSlice(new sliceType$1([ch]), (_entry$1 = semWaiters[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : sliceType$1.nil)) };
				} else {
					_key$1 = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$2 = semWaiters[ptrType$1.keyFor(s)], _entry$2 !== undefined ? _entry$2.v : sliceType$1.nil), ch) };
				}
				_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r[0];
				_key$2 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$2)] = { k: _key$2, v: (_entry$3 = semAwoken[ptrType$1.keyFor(s)], _entry$3 !== undefined ? _entry$3.v : 0) - (1) >>> 0 };
				if ((_entry$4 = semAwoken[ptrType$1.keyFor(s)], _entry$4 !== undefined ? _entry$4.v : 0) === 0) {
					delete semAwoken[ptrType$1.keyFor(s)];
				}
			/* } */ case 2:
			s.$set(s.$get() - (1) >>> 0);
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_SemacquireMutex }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f.ch = ch; $f.lifo = lifo; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		};
		runtime_Semrelease = function(s, handoff) {
			var _entry, _entry$1, _key, _key$1, ch, handoff, s, w, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; ch = $f.ch; handoff = $f.handoff; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			s.$set(s.$get() + (1) >>> 0);
			w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
			if (w.$length === 0) {
				$s = -1; return;
			}
			ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
			w = $subslice(w, 1);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
			if (w.$length === 0) {
				delete semWaiters[ptrType$1.keyFor(s)];
			}
			_key$1 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = semAwoken[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >>> 0 };
			$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f.ch = ch; $f.handoff = handoff; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
		};
		runtime_notifyListCheck = function(size) {
		};
		runtime_canSpin = function(i) {
			return false;
		};
		runtime_nanotime = function() {
			return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
		};
		throw$1 = function(s) {
			var s;
			$throwRuntimeError($externalize(s, $String));
		};
		Mutex.ptr.prototype.Lock = function() {
			var awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; awoke = $f.awoke; delta = $f.delta; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; queueLifo = $f.queueLifo; starving = $f.starving; waitStartTime = $f.waitStartTime; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			m = this;
			if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
				$s = -1; return;
			}
			waitStartTime = new $Int64(0, 0);
			starving = false;
			awoke = false;
			iter = 0;
			old = m.state;
			/* while (true) { */ case 1:
				/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
					if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					old = m.state;
					/* continue; */ $s = 1; continue;
				/* } */ case 4:
				new$1 = old;
				if ((old & 4) === 0) {
					new$1 = new$1 | (1);
				}
				if (!(((old & 5) === 0))) {
					new$1 = new$1 + (8) >> 0;
				}
				if (starving && !(((old & 1) === 0))) {
					new$1 = new$1 | (4);
				}
				if (awoke) {
					if ((new$1 & 2) === 0) {
						throw$1("sync: inconsistent mutex state");
					}
					new$1 = (new$1 & ~(2)) >> 0;
				}
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
					if ((old & 5) === 0) {
						/* break; */ $s = 2; continue;
					}
					queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
					if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) {
						waitStartTime = runtime_nanotime();
					}
					$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					starving = starving || (x = (x$1 = runtime_nanotime(), new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000)));
					old = m.state;
					if (!(((old & 4) === 0))) {
						if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
							throw$1("sync: inconsistent mutex state");
						}
						delta = -7;
						if (!starving || ((old >> 3 >> 0) === 1)) {
							delta = delta - (4) >> 0;
						}
						atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
						/* break; */ $s = 2; continue;
					}
					awoke = true;
					iter = 0;
					$s = 7; continue;
				/* } else { */ case 6:
					old = m.state;
				/* } */ case 7:
			/* } */ $s = 1; continue; case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.awoke = awoke; $f.delta = delta; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.queueLifo = queueLifo; $f.starving = starving; $f.waitStartTime = waitStartTime; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		Mutex.prototype.Lock = function() { return this.$val.Lock(); };
		Mutex.ptr.prototype.Unlock = function() {
			var m, new$1, old, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			m = this;
			new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
			if ((((new$1 + 1 >> 0)) & 1) === 0) {
				throw$1("sync: unlock of unlocked mutex");
			}
			/* */ if ((new$1 & 4) === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if ((new$1 & 4) === 0) { */ case 1:
				old = new$1;
				/* while (true) { */ case 4:
					if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
						$s = -1; return;
					}
					new$1 = ((old - 8 >> 0)) | 2;
					/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
					/* */ $s = 7; continue;
					/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
						$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
					/* } */ case 7:
					old = m.state;
				/* } */ $s = 4; continue; case 5:
				$s = 3; continue;
			/* } else { */ case 2:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
		};
		Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
		poolCleanup = function() {
			var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
			_ref = allPools;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
				i$1 = 0;
				while (true) {
					if (!(i$1 < ((p.localSize >> 0)))) { break; }
					l = indexLocal(p.local, i$1);
					l.poolLocalInternal.private$0 = $ifaceNil;
					_ref$1 = l.poolLocalInternal.shared;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						j = _i$1;
						(x = l.poolLocalInternal.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
						_i$1++;
					}
					l.poolLocalInternal.shared = sliceType$4.nil;
					i$1 = i$1 + (1) >> 0;
				}
				p.local = 0;
				p.localSize = 0;
				_i++;
			}
			allPools = new sliceType([]);
		};
		init = function() {
			runtime_registerPoolCleanup(poolCleanup);
		};
		indexLocal = function(l, i) {
			var i, l, lp;
			lp = (((l) + ($imul(((i >>> 0)), 128) >>> 0) >>> 0));
			return ($pointerOfStructConversion(lp, ptrType$7));
		};
		init$1 = function() {
			var n;
			n = new notifyList.ptr(0, 0, 0, 0, 0);
			runtime_notifyListCheck(20);
		};
		runtime_doSpin = function() {
			$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
		};
		ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$7], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$7], false)}];
		ptrType$16.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
		Pool.init("sync", [{prop: "local", name: "local", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: funcType, tag: ""}]);
		Mutex.init("sync", [{prop: "state", name: "state", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
		poolLocalInternal.init("sync", [{prop: "private$0", name: "private", embedded: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "Mutex", embedded: true, exported: true, typ: Mutex, tag: ""}]);
		poolLocal.init("sync", [{prop: "poolLocalInternal", name: "poolLocalInternal", embedded: true, exported: false, typ: poolLocalInternal, tag: ""}, {prop: "pad", name: "pad", embedded: false, exported: false, typ: arrayType$2, tag: ""}]);
		notifyList.init("sync", [{prop: "wait", name: "wait", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			allPools = sliceType.nil;
			semWaiters = {};
			semAwoken = {};
			init();
			init$1();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["unicode"] = (function() {
		var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, arrayType, sliceType, sliceType$1, sliceType$3, sliceType$4, _White_Space, _CaseRanges, asciiFold, caseOrbit, to, IsSpace, is16, is32, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;
		RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.R16 = sliceType.nil;
				this.R32 = sliceType$1.nil;
				this.LatinOffset = 0;
				return;
			}
			this.R16 = R16_;
			this.R32 = R32_;
			this.LatinOffset = LatinOffset_;
		});
		Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Lo = 0;
				this.Hi = 0;
				this.Stride = 0;
				return;
			}
			this.Lo = Lo_;
			this.Hi = Hi_;
			this.Stride = Stride_;
		});
		Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Lo = 0;
				this.Hi = 0;
				this.Stride = 0;
				return;
			}
			this.Lo = Lo_;
			this.Hi = Hi_;
			this.Stride = Stride_;
		});
		CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Lo = 0;
				this.Hi = 0;
				this.Delta = arrayType.zero();
				return;
			}
			this.Lo = Lo_;
			this.Hi = Hi_;
			this.Delta = Delta_;
		});
		d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
		foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.From = 0;
				this.To = 0;
				return;
			}
			this.From = From_;
			this.To = To_;
		});
		arrayType = $arrayType($Int32, 3);
		sliceType = $sliceType(Range16);
		sliceType$1 = $sliceType(Range32);
		sliceType$3 = $sliceType(CaseRange);
		sliceType$4 = $sliceType(foldPair);
		to = function(_case, r, caseRange) {
			var _case, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, caseRange, cr, delta, foundMapping, hi, lo, m, mappedRune, r, x;
			mappedRune = 0;
			foundMapping = false;
			if (_case < 0 || 3 <= _case) {
				_tmp = 65533;
				_tmp$1 = false;
				mappedRune = _tmp;
				foundMapping = _tmp$1;
				return [mappedRune, foundMapping];
			}
			lo = 0;
			hi = caseRange.$length;
			while (true) {
				if (!(lo < hi)) { break; }
				m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				cr = ((m < 0 || m >= caseRange.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseRange.$array[caseRange.$offset + m]);
				if (((cr.Lo >> 0)) <= r && r <= ((cr.Hi >> 0))) {
					delta = ((x = cr.Delta, ((_case < 0 || _case >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[_case])));
					if (delta > 1114111) {
						_tmp$2 = ((cr.Lo >> 0)) + ((((((r - ((cr.Lo >> 0)) >> 0)) & ~1) >> 0) | (((_case & 1) >> 0)))) >> 0;
						_tmp$3 = true;
						mappedRune = _tmp$2;
						foundMapping = _tmp$3;
						return [mappedRune, foundMapping];
					}
					_tmp$4 = r + delta >> 0;
					_tmp$5 = true;
					mappedRune = _tmp$4;
					foundMapping = _tmp$5;
					return [mappedRune, foundMapping];
				}
				if (r < ((cr.Lo >> 0))) {
					hi = m;
				} else {
					lo = m + 1 >> 0;
				}
			}
			_tmp$6 = r;
			_tmp$7 = false;
			mappedRune = _tmp$6;
			foundMapping = _tmp$7;
			return [mappedRune, foundMapping];
		};
		IsSpace = function(r) {
			var _1, r;
			if (((r >>> 0)) <= 255) {
				_1 = r;
				if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (32)) || (_1 === (133)) || (_1 === (160))) {
					return true;
				}
				return false;
			}
			return isExcludingLatin($pkg.White_Space, r);
		};
		$pkg.IsSpace = IsSpace;
		is16 = function(ranges, r) {
			var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
			if (ranges.$length <= 18 || r <= 255) {
				_ref = ranges;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
					if (r < range_.Lo) {
						return false;
					}
					if (r <= range_.Hi) {
						return (range_.Stride === 1) || ((_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
					}
					_i++;
				}
				return false;
			}
			lo = 0;
			hi = ranges.$length;
			while (true) {
				if (!(lo < hi)) { break; }
				m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
				if (range_$1.Lo <= r && r <= range_$1.Hi) {
					return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
				}
				if (r < range_$1.Lo) {
					hi = m;
				} else {
					lo = m + 1 >> 0;
				}
			}
			return false;
		};
		is32 = function(ranges, r) {
			var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
			if (ranges.$length <= 18) {
				_ref = ranges;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
					if (r < range_.Lo) {
						return false;
					}
					if (r <= range_.Hi) {
						return (range_.Stride === 1) || ((_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
					}
					_i++;
				}
				return false;
			}
			lo = 0;
			hi = ranges.$length;
			while (true) {
				if (!(lo < hi)) { break; }
				m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
				if (range_$1.Lo <= r && r <= range_$1.Hi) {
					return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
				}
				if (r < range_$1.Lo) {
					hi = m;
				} else {
					lo = m + 1 >> 0;
				}
			}
			return false;
		};
		isExcludingLatin = function(rangeTab, r) {
			var off, r, r16, r32, rangeTab, x;
			r16 = rangeTab.R16;
			off = rangeTab.LatinOffset;
			if (r16.$length > off && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
				return is16($subslice(r16, off), ((r << 16 >>> 16)));
			}
			r32 = rangeTab.R32;
			if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
				return is32(r32, ((r >>> 0)));
			}
			return false;
		};
		To = function(_case, r) {
			var _case, _tuple, r;
			_tuple = to(_case, r, $pkg.CaseRanges);
			r = _tuple[0];
			return r;
		};
		$pkg.To = To;
		ToUpper = function(r) {
			var r;
			if (r <= 127) {
				if (97 <= r && r <= 122) {
					r = r - (32) >> 0;
				}
				return r;
			}
			return To(0, r);
		};
		$pkg.ToUpper = ToUpper;
		ToLower = function(r) {
			var r;
			if (r <= 127) {
				if (65 <= r && r <= 90) {
					r = r + (32) >> 0;
				}
				return r;
			}
			return To(1, r);
		};
		$pkg.ToLower = ToLower;
		SimpleFold = function(r) {
			var _q, hi, l, lo, m, r;
			if (r < 0 || r > 1114111) {
				return r;
			}
			if (((r >> 0)) < 128) {
				return ((((r < 0 || r >= asciiFold.length) ? ($throwRuntimeError("index out of range"), undefined) : asciiFold[r]) >> 0));
			}
			lo = 0;
			hi = caseOrbit.$length;
			while (true) {
				if (!(lo < hi)) { break; }
				m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				if (((((m < 0 || m >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0)) < r) {
					lo = m + 1 >> 0;
				} else {
					hi = m;
				}
			}
			if (lo < caseOrbit.$length && (((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0)) === r)) {
				return ((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0));
			}
			l = ToLower(r);
			if (!((l === r))) {
				return l;
			}
			return ToUpper(r);
		};
		$pkg.SimpleFold = SimpleFold;
		RangeTable.init("", [{prop: "R16", name: "R16", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", embedded: false, exported: true, typ: $Int, tag: ""}]);
		Range16.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", embedded: false, exported: true, typ: $Uint16, tag: ""}]);
		Range32.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", embedded: false, exported: true, typ: $Uint32, tag: ""}]);
		CaseRange.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", embedded: false, exported: true, typ: d, tag: ""}]);
		d.init($Int32, 3);
		foldPair.init("", [{prop: "From", name: "From", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "To", name: "To", embedded: false, exported: true, typ: $Uint16, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
			$pkg.White_Space = _White_Space;
			_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new CaseRange.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new CaseRange.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new CaseRange.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new CaseRange.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new CaseRange.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new CaseRange.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new CaseRange.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new CaseRange.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
			$pkg.CaseRanges = _CaseRanges;
			asciiFold = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
			caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(1042, 1074), new foldPair.ptr(1044, 1076), new foldPair.ptr(1054, 1086), new foldPair.ptr(1057, 1089), new foldPair.ptr(1058, 1090), new foldPair.ptr(1066, 1098), new foldPair.ptr(1074, 7296), new foldPair.ptr(1076, 7297), new foldPair.ptr(1086, 7298), new foldPair.ptr(1089, 7299), new foldPair.ptr(1090, 7300), new foldPair.ptr(1098, 7302), new foldPair.ptr(1122, 1123), new foldPair.ptr(1123, 7303), new foldPair.ptr(7296, 1042), new foldPair.ptr(7297, 1044), new foldPair.ptr(7298, 1054), new foldPair.ptr(7299, 1057), new foldPair.ptr(7300, 7301), new foldPair.ptr(7301, 1058), new foldPair.ptr(7302, 1066), new foldPair.ptr(7303, 1122), new foldPair.ptr(7304, 42570), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197), new foldPair.ptr(42570, 42571), new foldPair.ptr(42571, 7304)]);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["reflect"] = (function() {
		var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, unicode, utf8, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, MapIter, sliceType$1, ptrType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, ptrType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$5, ptrType$6, structType$3, sliceType$8, sliceType$9, ptrType$7, ptrType$8, sliceType$10, sliceType$11, arrayType$1, sliceType$12, ptrType$9, ptrType$10, sliceType$13, sliceType$14, ptrType$11, sliceType$15, ptrType$17, sliceType$18, funcType$3, funcType$4, funcType$5, ptrType$18, arrayType$8, ptrType$19, ptrType$20, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, ArrayOf, FuncOf, MapOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, makemap, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapitervalue, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, DeepEqual, deepValueEqualJs, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, copyVal, overflowFloat32, typesMustMatch, grow, Append, MakeMap, MakeMapWithSize, Indirect, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
		errors = $packages["errors"];
		js = $packages["github.com/gopherjs/gopherjs/js"];
		math = $packages["math"];
		runtime = $packages["runtime"];
		strconv = $packages["strconv"];
		sync = $packages["sync"];
		unicode = $packages["unicode"];
		utf8 = $packages["unicode/utf8"];
		uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.pkgPath = 0;
				this.mcount = 0;
				this.xcount = 0;
				this.moff = 0;
				this._methods = sliceType$5.nil;
				return;
			}
			this.pkgPath = pkgPath_;
			this.mcount = mcount_;
			this.xcount = xcount_;
			this.moff = moff_;
			this._methods = _methods_;
		});
		funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.inCount = 0;
				this.outCount = 0;
				this._in = sliceType$2.nil;
				this._out = sliceType$2.nil;
				return;
			}
			this.rtype = rtype_;
			this.inCount = inCount_;
			this.outCount = outCount_;
			this._in = _in_;
			this._out = _out_;
		});
		name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.bytes = ptrType$4.nil;
				return;
			}
			this.bytes = bytes_;
		});
		nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.name = "";
				this.tag = "";
				this.exported = false;
				return;
			}
			this.name = name_;
			this.tag = tag_;
			this.exported = exported_;
		});
		mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_, last_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.t = $ifaceNil;
				this.m = null;
				this.keys = null;
				this.i = 0;
				this.last = null;
				return;
			}
			this.t = t_;
			this.m = m_;
			this.keys = keys_;
			this.i = i_;
			this.last = last_;
		});
		Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
		Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
		tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
		rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.size = 0;
				this.ptrdata = 0;
				this.hash = 0;
				this.tflag = 0;
				this.align = 0;
				this.fieldAlign = 0;
				this.kind = 0;
				this.alg = ptrType$3.nil;
				this.gcdata = ptrType$4.nil;
				this.str = 0;
				this.ptrToThis = 0;
				return;
			}
			this.size = size_;
			this.ptrdata = ptrdata_;
			this.hash = hash_;
			this.tflag = tflag_;
			this.align = align_;
			this.fieldAlign = fieldAlign_;
			this.kind = kind_;
			this.alg = alg_;
			this.gcdata = gcdata_;
			this.str = str_;
			this.ptrToThis = ptrToThis_;
		});
		typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.hash = $throwNilPointerError;
				this.equal = $throwNilPointerError;
				return;
			}
			this.hash = hash_;
			this.equal = equal_;
		});
		method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.name = 0;
				this.mtyp = 0;
				this.ifn = 0;
				this.tfn = 0;
				return;
			}
			this.name = name_;
			this.mtyp = mtyp_;
			this.ifn = ifn_;
			this.tfn = tfn_;
		});
		ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
		arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.elem = ptrType$1.nil;
				this.slice = ptrType$1.nil;
				this.len = 0;
				return;
			}
			this.rtype = rtype_;
			this.elem = elem_;
			this.slice = slice_;
			this.len = len_;
		});
		chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.elem = ptrType$1.nil;
				this.dir = 0;
				return;
			}
			this.rtype = rtype_;
			this.elem = elem_;
			this.dir = dir_;
		});
		imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.name = 0;
				this.typ = 0;
				return;
			}
			this.name = name_;
			this.typ = typ_;
		});
		interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.pkgPath = new name.ptr(ptrType$4.nil);
				this.methods = sliceType$6.nil;
				return;
			}
			this.rtype = rtype_;
			this.pkgPath = pkgPath_;
			this.methods = methods_;
		});
		mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, keysize_, valuesize_, bucketsize_, flags_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.key = ptrType$1.nil;
				this.elem = ptrType$1.nil;
				this.bucket = ptrType$1.nil;
				this.keysize = 0;
				this.valuesize = 0;
				this.bucketsize = 0;
				this.flags = 0;
				return;
			}
			this.rtype = rtype_;
			this.key = key_;
			this.elem = elem_;
			this.bucket = bucket_;
			this.keysize = keysize_;
			this.valuesize = valuesize_;
			this.bucketsize = bucketsize_;
			this.flags = flags_;
		});
		ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.elem = ptrType$1.nil;
				return;
			}
			this.rtype = rtype_;
			this.elem = elem_;
		});
		sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.elem = ptrType$1.nil;
				return;
			}
			this.rtype = rtype_;
			this.elem = elem_;
		});
		structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetEmbed_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.name = new name.ptr(ptrType$4.nil);
				this.typ = ptrType$1.nil;
				this.offsetEmbed = 0;
				return;
			}
			this.name = name_;
			this.typ = typ_;
			this.offsetEmbed = offsetEmbed_;
		});
		structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
				this.pkgPath = new name.ptr(ptrType$4.nil);
				this.fields = sliceType$7.nil;
				return;
			}
			this.rtype = rtype_;
			this.pkgPath = pkgPath_;
			this.fields = fields_;
		});
		Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Name = "";
				this.PkgPath = "";
				this.Type = $ifaceNil;
				this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
				this.Index = 0;
				return;
			}
			this.Name = Name_;
			this.PkgPath = PkgPath_;
			this.Type = Type_;
			this.Func = Func_;
			this.Index = Index_;
		});
		nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
		typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
		textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
		StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Name = "";
				this.PkgPath = "";
				this.Type = $ifaceNil;
				this.Tag = "";
				this.Offset = 0;
				this.Index = sliceType$13.nil;
				this.Anonymous = false;
				return;
			}
			this.Name = Name_;
			this.PkgPath = PkgPath_;
			this.Type = Type_;
			this.Tag = Tag_;
			this.Offset = Offset_;
			this.Index = Index_;
			this.Anonymous = Anonymous_;
		});
		StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
		fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.typ = ptrType$11.nil;
				this.index = sliceType$13.nil;
				return;
			}
			this.typ = typ_;
			this.index = index_;
		});
		Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.typ = ptrType$1.nil;
				this.ptr = 0;
				this.flag = 0;
				return;
			}
			this.typ = typ_;
			this.ptr = ptr_;
			this.flag = flag_;
		});
		flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
		ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Method = "";
				this.Kind = 0;
				return;
			}
			this.Method = Method_;
			this.Kind = Kind_;
		});
		MapIter = $pkg.MapIter = $newType(0, $kindStruct, "reflect.MapIter", true, "reflect", true, function(m_, it_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.m = new Value.ptr(ptrType$1.nil, 0, 0);
				this.it = 0;
				return;
			}
			this.m = m_;
			this.it = it_;
		});
		sliceType$1 = $sliceType(name);
		ptrType$1 = $ptrType(rtype);
		sliceType$2 = $sliceType(ptrType$1);
		sliceType$3 = $sliceType($emptyInterface);
		ptrType$2 = $ptrType(js.Object);
		funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
		sliceType$4 = $sliceType($String);
		ptrType$3 = $ptrType(typeAlg);
		ptrType$4 = $ptrType($Uint8);
		sliceType$5 = $sliceType(method);
		sliceType$6 = $sliceType(imethod);
		sliceType$7 = $sliceType(structField);
		ptrType$5 = $ptrType(uncommonType);
		ptrType$6 = $ptrType(nameData);
		structType$3 = $structType("reflect", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
		sliceType$8 = $sliceType(ptrType$2);
		sliceType$9 = $sliceType(Value);
		ptrType$7 = $ptrType(mapIter);
		ptrType$8 = $ptrType(funcType);
		sliceType$10 = $sliceType(Type);
		sliceType$11 = $sliceType(sliceType$8);
		arrayType$1 = $arrayType($UnsafePointer, 2);
		sliceType$12 = $sliceType(arrayType$1);
		ptrType$9 = $ptrType(interfaceType);
		ptrType$10 = $ptrType(imethod);
		sliceType$13 = $sliceType($Int);
		sliceType$14 = $sliceType(fieldScan);
		ptrType$11 = $ptrType(structType);
		sliceType$15 = $sliceType($Uint8);
		ptrType$17 = $ptrType($UnsafePointer);
		sliceType$18 = $sliceType($Int32);
		funcType$3 = $funcType([$String], [$Bool], false);
		funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
		funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
		ptrType$18 = $ptrType(structField);
		arrayType$8 = $arrayType($Uintptr, 2);
		ptrType$19 = $ptrType(MapIter);
		ptrType$20 = $ptrType(ValueError);
		init = function() {
			var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			used = (function(i) {
			});
			$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$4.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			initialized = true;
			uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
		};
		jsType = function(typ) {
			var typ;
			return typ.jsType;
		};
		reflectType = function(typ) {
			var _1, _i, _i$1, _i$2, _i$3, _key, _ref, _ref$1, _ref$2, _ref$3, dir, exported, exported$1, f, fields, i, i$1, i$2, i$3, i$4, i$5, imethods, in$1, m, m$1, m$2, methodSet, methods, offsetEmbed, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut, xcount;
			if (typ.reflectType === undefined) {
				rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), ptrType$3.nil, ptrType$4.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported)), name)), 0);
				rt.jsType = typ;
				typ.reflectType = rt;
				methodSet = $methodSet(typ);
				if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
					rt.tflag = (rt.tflag | (1)) >>> 0;
					if (!!(typ.named)) {
						rt.tflag = (rt.tflag | (4)) >>> 0;
					}
					reflectMethods = sliceType$5.nil;
					i = 0;
					while (true) {
						if (!(i < $parseInt(methodSet.length))) { break; }
						m = methodSet[i];
						exported = internalStr(m.pkg) === "";
						if (!exported) {
							i = i + (1) >> 0;
							continue;
						}
						reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", exported), name)), newTypeOff(reflectType(m.typ)), 0, 0));
						i = i + (1) >> 0;
					}
					xcount = ((reflectMethods.$length << 16 >>> 16));
					i$1 = 0;
					while (true) {
						if (!(i$1 < $parseInt(methodSet.length))) { break; }
						m$1 = methodSet[i$1];
						exported$1 = internalStr(m$1.pkg) === "";
						if (exported$1) {
							i$1 = i$1 + (1) >> 0;
							continue;
						}
						reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", exported$1), name)), newTypeOff(reflectType(m$1.typ)), 0, 0));
						i$1 = i$1 + (1) >> 0;
					}
					ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), xcount, 0, reflectMethods);
					_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
					ut.jsType = typ;
				}
				_1 = rt.Kind();
				if (_1 === (17)) {
					setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
				} else if (_1 === (18)) {
					dir = 3;
					if (!!(typ.sendOnly)) {
						dir = 2;
					}
					if (!!(typ.recvOnly)) {
						dir = 1;
					}
					setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
				} else if (_1 === (19)) {
					params = typ.params;
					in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
					_ref = in$1;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i$2 = _i;
						((i$2 < 0 || i$2 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$2] = reflectType(params[i$2]));
						_i++;
					}
					results = typ.results;
					out = $makeSlice(sliceType$2, $parseInt(results.length));
					_ref$1 = out;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$3 = _i$1;
						((i$3 < 0 || i$3 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$3] = reflectType(results[i$3]));
						_i$1++;
					}
					outCount = (($parseInt(results.length) << 16 >>> 16));
					if (!!(typ.variadic)) {
						outCount = (outCount | (32768)) >>> 0;
					}
					setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
				} else if (_1 === (20)) {
					methods = typ.methods;
					imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
					_ref$2 = imethods;
					_i$2 = 0;
					while (true) {
						if (!(_i$2 < _ref$2.$length)) { break; }
						i$4 = _i$2;
						m$2 = methods[i$4];
						imethod.copy(((i$4 < 0 || i$4 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$4]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$2.name), "", internalStr(m$2.pkg) === ""), name)), newTypeOff(reflectType(m$2.typ))));
						_i$2++;
					}
					setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false), name), imethods));
				} else if (_1 === (21)) {
					setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, 0, 0, 0, 0));
				} else if (_1 === (22)) {
					setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
				} else if (_1 === (23)) {
					setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
				} else if (_1 === (25)) {
					fields = typ.fields;
					reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
					_ref$3 = reflectFields;
					_i$3 = 0;
					while (true) {
						if (!(_i$3 < _ref$3.$length)) { break; }
						i$5 = _i$3;
						f = fields[i$5];
						offsetEmbed = ((i$5 >>> 0)) << 1 >>> 0;
						if (!!(f.embedded)) {
							offsetEmbed = (offsetEmbed | (1)) >>> 0;
						}
						structField.copy(((i$5 < 0 || i$5 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$5]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported)), name), reflectType(f.typ), offsetEmbed));
						_i$3++;
					}
					setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false), name), reflectFields));
				}
			}
			return ((typ.reflectType));
		};
		setKindType = function(rt, kindType) {
			var kindType, rt;
			rt.kindType = kindType;
			kindType.rtype = rt;
		};
		uncommonType.ptr.prototype.methods = function() {
			var t;
			t = this;
			return t._methods;
		};
		uncommonType.prototype.methods = function() { return this.$val.methods(); };
		uncommonType.ptr.prototype.exportedMethods = function() {
			var t;
			t = this;
			return $subslice(t._methods, 0, t.xcount, t.xcount);
		};
		uncommonType.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
		rtype.ptr.prototype.uncommon = function() {
			var _entry, t;
			t = this;
			return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$5.nil);
		};
		rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
		funcType.ptr.prototype.in$ = function() {
			var t;
			t = this;
			return t._in;
		};
		funcType.prototype.in$ = function() { return this.$val.in$(); };
		funcType.ptr.prototype.out = function() {
			var t;
			t = this;
			return t._out;
		};
		funcType.prototype.out = function() { return this.$val.out(); };
		name.ptr.prototype.name = function() {
			var _entry, n, s;
			s = "";
			n = this;
			s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).name;
			return s;
		};
		name.prototype.name = function() { return this.$val.name(); };
		name.ptr.prototype.tag = function() {
			var _entry, n, s;
			s = "";
			n = this;
			s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).tag;
			return s;
		};
		name.prototype.tag = function() { return this.$val.tag(); };
		name.ptr.prototype.pkgPath = function() {
			return "";
		};
		name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
		name.ptr.prototype.isExported = function() {
			var _entry, n;
			n = this;
			return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).exported;
		};
		name.prototype.isExported = function() { return this.$val.isExported(); };
		newName = function(n, tag, exported) {
			var _key, b, exported, n, tag;
			b = $newDataPointer(0, ptrType$4);
			_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, exported) };
			return new name.ptr(b);
		};
		rtype.ptr.prototype.nameOff = function(off) {
			var off, x;
			return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
		};
		rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
		newNameOff = function(n) {
			var i, n;
			i = nameOffList.$length;
			nameOffList = $append(nameOffList, n);
			return ((i >> 0));
		};
		rtype.ptr.prototype.typeOff = function(off) {
			var off, x;
			return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
		};
		rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
		newTypeOff = function(t) {
			var i, t;
			i = typeOffList.$length;
			typeOffList = $append(typeOffList, t);
			return ((i >> 0));
		};
		internalStr = function(strObj) {
			var c, strObj;
			c = new structType$3.ptr("");
			c.str = strObj;
			return c.str;
		};
		isWrapped = function(typ) {
			var typ;
			return !!(jsType(typ).wrapped);
		};
		copyStruct = function(dst, src, typ) {
			var dst, fields, i, prop, src, typ;
			fields = jsType(typ).fields;
			i = 0;
			while (true) {
				if (!(i < $parseInt(fields.length))) { break; }
				prop = $internalize(fields[i].prop, $String);
				dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
				i = i + (1) >> 0;
			}
		};
		makeValue = function(t, v, fl) {
			var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			rt = _r;
			_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
			_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v$1 = _r$2 === 25; case 5:
			if (_v$1) { _v = true; $s = 4; continue s; }
			_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3 === 22; case 4:
			/* */ if (_v) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_v) { */ case 2:
				_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
			/* } */ case 3:
			_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		MakeSlice = function(typ, len, cap) {
			var _r, _r$1, cap, len, typ, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			typ = [typ];
			_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!((_r === 23))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((_r === 23))) { */ case 1:
				$panic(new $String("reflect.MakeSlice of non-slice type"));
			/* } */ case 2:
			if (len < 0) {
				$panic(new $String("reflect.MakeSlice: negative len"));
			}
			if (cap < 0) {
				$panic(new $String("reflect.MakeSlice: negative cap"));
			}
			if (len > cap) {
				$panic(new $String("reflect.MakeSlice: len > cap"));
			}
			_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.MakeSlice = MakeSlice;
		TypeOf = function(i) {
			var i;
			if (!initialized) {
				return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			}
			if ($interfaceIsEqual(i, $ifaceNil)) {
				return $ifaceNil;
			}
			return reflectType(i.constructor);
		};
		$pkg.TypeOf = TypeOf;
		ValueOf = function(i) {
			var _r, i, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if ($interfaceIsEqual(i, $ifaceNil)) {
				$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.ValueOf = ValueOf;
		ArrayOf = function(count, elem) {
			var count, elem;
			return reflectType($arrayType(jsType(elem), count));
		};
		$pkg.ArrayOf = ArrayOf;
		FuncOf = function(in$1, out, variadic) {
			var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (!(variadic)) { _v = false; $s = 3; continue s; }
			if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
			_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v$1 = !((_r === 23)); case 4:
			_v = _v$1; case 3:
			/* */ if (_v) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_v) { */ case 1:
				$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
			/* } */ case 2:
			jsIn = $makeSlice(sliceType$8, in$1.$length);
			_ref = in$1;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
				_i++;
			}
			jsOut = $makeSlice(sliceType$8, out.$length);
			_ref$1 = out;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
				_i$1++;
			}
			$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
			/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.FuncOf = FuncOf;
		MapOf = function(key, elem) {
			var _1, _r, _r$1, elem, key, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; elem = $f.elem; key = $f.key; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r = key.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_1 = _r;
				/* */ if ((_1 === (19)) || (_1 === (21)) || (_1 === (23))) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if ((_1 === (19)) || (_1 === (21)) || (_1 === (23))) { */ case 3:
					_r$1 = key.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$panic(new $String("reflect.MapOf: invalid key type " + _r$1));
				/* } */ case 4:
			case 1:
			$s = -1; return reflectType($mapType(jsType(key), jsType(elem)));
			/* */ } return; } if ($f === undefined) { $f = { $blk: MapOf }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.elem = elem; $f.key = key; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.MapOf = MapOf;
		rtype.ptr.prototype.ptrTo = function() {
			var t;
			t = this;
			return reflectType($ptrType(jsType(t)));
		};
		rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
		SliceOf = function(t) {
			var t;
			return reflectType($sliceType(jsType(t)));
		};
		$pkg.SliceOf = SliceOf;
		Zero = function(typ) {
			var _r, typ, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Zero = Zero;
		unsafe_New = function(typ) {
			var _1, typ;
			_1 = typ.Kind();
			if (_1 === (25)) {
				return (new (jsType(typ).ptr)());
			} else if (_1 === (17)) {
				return (jsType(typ).zero());
			} else {
				return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
			}
		};
		makeInt = function(f, bits, t) {
			var _1, _r, bits, f, ptr, t, typ, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			typ = _r;
			ptr = unsafe_New(typ);
			_1 = typ.Kind();
			if (_1 === (3)) {
				(ptr).$set(((bits.$low << 24 >> 24)));
			} else if (_1 === (4)) {
				(ptr).$set(((bits.$low << 16 >> 16)));
			} else if ((_1 === (2)) || (_1 === (5))) {
				(ptr).$set(((bits.$low >> 0)));
			} else if (_1 === (6)) {
				(ptr).$set((new $Int64(bits.$high, bits.$low)));
			} else if (_1 === (8)) {
				(ptr).$set(((bits.$low << 24 >>> 24)));
			} else if (_1 === (9)) {
				(ptr).$set(((bits.$low << 16 >>> 16)));
			} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
				(ptr).$set(((bits.$low >>> 0)));
			} else if (_1 === (11)) {
				(ptr).$set((bits));
			}
			$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
		};
		typedmemmove = function(t, dst, src) {
			var dst, src;
			dst.$set(src.$get());
		};
		makemap = function(t, cap) {
			var m;
			m = 0;
			m = (new ($global.Object)());
			return m;
		};
		keyFor = function(t, key) {
			var k, key, kv, t;
			kv = key;
			if (!(kv.$get === undefined)) {
				kv = kv.$get();
			}
			k = $internalize(jsType(t.Key()).keyFor(kv), $String);
			return [kv, k];
		};
		mapaccess = function(t, m, key) {
			var _tuple, entry, k, key, m, t;
			_tuple = keyFor(t, key);
			k = _tuple[1];
			entry = m[$externalize(k, $String)];
			if (entry === undefined) {
				return 0;
			}
			return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
		};
		mapassign = function(t, m, key, val) {
			var _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tuple = keyFor(t, key);
			kv = _tuple[0];
			k = _tuple[1];
			jsVal = val.$get();
			et = t.Elem();
			_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 25) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_r === 25) { */ case 1:
				newVal = jsType(et).zero();
				copyStruct(newVal, jsVal, et);
				jsVal = newVal;
			/* } */ case 2:
			entry = new ($global.Object)();
			entry.k = kv;
			entry.v = jsVal;
			m[$externalize(k, $String)] = entry;
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		mapdelete = function(t, m, key) {
			var _tuple, k, key, m, t;
			_tuple = keyFor(t, key);
			k = _tuple[1];
			delete m[$externalize(k, $String)];
		};
		mapIter.ptr.prototype.skipUntilValidKey = function() {
			var iter, k;
			iter = this;
			while (true) {
				if (!(iter.i < $parseInt(iter.keys.length))) { break; }
				k = iter.keys[iter.i];
				if (!(iter.m[$externalize($internalize(k, $String), $String)] === undefined)) {
					break;
				}
				iter.i = iter.i + (1) >> 0;
			}
		};
		mapIter.prototype.skipUntilValidKey = function() { return this.$val.skipUntilValidKey(); };
		mapiterinit = function(t, m) {
			var m, t;
			return (new mapIter.ptr(t, m, $keys(m), 0, null));
		};
		mapiterkey = function(it) {
			var _r, _r$1, _r$2, it, iter, k, kv, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; kv = $f.kv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			iter = ($pointerOfStructConversion(it, ptrType$7));
			kv = null;
			if (!(iter.last === null)) {
				kv = iter.last;
			} else {
				iter.skipUntilValidKey();
				if (iter.i === $parseInt(iter.keys.length)) {
					$s = -1; return 0;
				}
				k = iter.keys[iter.i];
				kv = iter.m[$externalize($internalize(k, $String), $String)];
				iter.last = kv;
			}
			_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return ($newDataPointer(kv.k, _r$2));
			/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.kv = kv; $f.$s = $s; $f.$r = $r; return $f;
		};
		mapitervalue = function(it) {
			var _r, _r$1, _r$2, it, iter, k, kv, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; kv = $f.kv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			iter = ($pointerOfStructConversion(it, ptrType$7));
			kv = null;
			if (!(iter.last === null)) {
				kv = iter.last;
			} else {
				iter.skipUntilValidKey();
				if (iter.i === $parseInt(iter.keys.length)) {
					$s = -1; return 0;
				}
				k = iter.keys[iter.i];
				kv = iter.m[$externalize($internalize(k, $String), $String)];
				iter.last = kv;
			}
			_r = iter.t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return ($newDataPointer(kv.v, _r$2));
			/* */ } return; } if ($f === undefined) { $f = { $blk: mapitervalue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.kv = kv; $f.$s = $s; $f.$r = $r; return $f;
		};
		mapiternext = function(it) {
			var it, iter;
			iter = ($pointerOfStructConversion(it, ptrType$7));
			iter.last = null;
			iter.i = iter.i + (1) >> 0;
		};
		maplen = function(m) {
			var m;
			return $parseInt($keys(m).length);
		};
		cvtDirect = function(v, typ) {
			var _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			srcVal = $clone(v, Value).object();
			/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (srcVal === jsType(v.typ).nil) { */ case 1:
				_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 2:
			val = null;
				_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				k = _r$1;
				_1 = k;
				/* */ if (_1 === (23)) { $s = 6; continue; }
				/* */ if (_1 === (22)) { $s = 7; continue; }
				/* */ if (_1 === (25)) { $s = 8; continue; }
				/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_1 === (23)) { */ case 6:
					slice = new (jsType(typ))(srcVal.$array);
					slice.$offset = srcVal.$offset;
					slice.$length = srcVal.$length;
					slice.$capacity = srcVal.$capacity;
					val = $newDataPointer(slice, jsType(PtrTo(typ)));
					$s = 11; continue;
				/* } else if (_1 === (22)) { */ case 7:
					_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (_r$3 === 25) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_r$3 === 25) { */ case 12:
						_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
						/* */ $s = 17; continue;
						/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
							val = srcVal;
							/* break; */ $s = 4; continue;
						/* } */ case 17:
						val = new (jsType(typ))();
						_arg = val;
						_arg$1 = srcVal;
						_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_arg$2 = _r$5;
						$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* break; */ $s = 4; continue;
					/* } */ case 13:
					val = new (jsType(typ))(srcVal.$get, srcVal.$set);
					$s = 11; continue;
				/* } else if (_1 === (25)) { */ case 8:
					val = new (jsType(typ).ptr)();
					copyStruct(val, srcVal, typ);
					$s = 11; continue;
				/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
					val = v.ptr;
					$s = 11; continue;
				/* } else { */ case 10:
					$panic(new ValueError.ptr("reflect.Convert", k));
				/* } */ case 11:
			case 4:
			_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(_r$6, (val), (((new flag(v.flag).ro() | ((v.flag & 128) >>> 0)) >>> 0) | ((_r$7 >>> 0))) >>> 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Copy = function(dst, src) {
			var _r, _v, dk, dst, dstVal, sk, src, srcVal, stringCopy, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; stringCopy = $f.stringCopy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			dk = new flag(dst.flag).kind();
			if (!((dk === 17)) && !((dk === 23))) {
				$panic(new ValueError.ptr("reflect.Copy", dk));
			}
			if (dk === 17) {
				new flag(dst.flag).mustBeAssignable();
			}
			new flag(dst.flag).mustBeExported();
			sk = new flag(src.flag).kind();
			stringCopy = false;
			/* */ if (!((sk === 17)) && !((sk === 23))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((sk === 17)) && !((sk === 23))) { */ case 1:
				if (!(sk === 24)) { _v = false; $s = 3; continue s; }
				_r = dst.typ.Elem().Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === 8; case 3:
				stringCopy = _v;
				if (!stringCopy) {
					$panic(new ValueError.ptr("reflect.Copy", sk));
				}
			/* } */ case 2:
			new flag(src.flag).mustBeExported();
			/* */ if (!stringCopy) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!stringCopy) { */ case 5:
				$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			dstVal = $clone(dst, Value).object();
			if (dk === 17) {
				dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
			}
			srcVal = $clone(src, Value).object();
			if (sk === 17) {
				srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
			}
			if (stringCopy) {
				$s = -1; return $parseInt($copyString(dstVal, srcVal)) >> 0;
			}
			$s = -1; return $parseInt($copySlice(dstVal, srcVal)) >> 0;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f._r = _r; $f._v = _v; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.stringCopy = stringCopy; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Copy = Copy;
		methodReceiver = function(op, v, i) {
			var _$39, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x;
			_$39 = ptrType$1.nil;
			t = ptrType$8.nil;
			fn = 0;
			prop = "";
			if (v.typ.Kind() === 20) {
				tt = (v.typ.kindType);
				if (i < 0 || i >= tt.methods.$length) {
					$panic(new $String("reflect: internal error: invalid method index"));
				}
				m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
					$panic(new $String("reflect: " + op + " of unexported method"));
				}
				t = (tt.rtype.typeOff(m.typ).kindType);
				prop = $clone(tt.rtype.nameOff(m.name), name).name();
			} else {
				ms = v.typ.exportedMethods();
				if (((i >>> 0)) >= ((ms.$length >>> 0))) {
					$panic(new $String("reflect: internal error: invalid method index"));
				}
				m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
				if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
					$panic(new $String("reflect: " + op + " of unexported method"));
				}
				t = (v.typ.typeOff(m$1.mtyp).kindType);
				prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
			}
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
			fn = (rcvr[$externalize(prop, $String)]);
			return [_$39, t, fn];
		};
		valueInterface = function(v, safe) {
			var _r, safe, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (v.flag === 0) {
				$panic(new ValueError.ptr("reflect.Value.Interface", 0));
			}
			if (safe && !((((v.flag & 96) >>> 0) === 0))) {
				$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
			}
			/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
				_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				v = _r;
			/* } */ case 2:
			if (isWrapped(v.typ)) {
				$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
			}
			$s = -1; return (($clone(v, Value).object()));
			/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		ifaceE2I = function(t, src, dst) {
			var dst, src;
			dst.$set(src);
		};
		methodName = function() {
			return "?FIXME?";
		};
		makeMethodValue = function(op, v) {
			var _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			fn = [fn];
			rcvr = [rcvr];
			if (((v.flag & 512) >>> 0) === 0) {
				$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
			}
			_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
			fn[0] = _tuple[2];
			rcvr[0] = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr[0] = new (jsType(v.typ))(rcvr[0]);
			}
			fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
				var arguments$1;
				return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
			}; })(fn, rcvr));
			_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(_r, (fv), (new flag(v.flag).ro() | 19) >>> 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.ptr.prototype.pointers = function() {
			var _1, t;
			t = this;
			_1 = t.Kind();
			if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
				return true;
			} else {
				return false;
			}
		};
		rtype.prototype.pointers = function() { return this.$val.pointers(); };
		rtype.ptr.prototype.Comparable = function() {
			var _1, _r, _r$1, i, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
				_1 = t.Kind();
				/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
				/* */ if (_1 === (17)) { $s = 3; continue; }
				/* */ if (_1 === (25)) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
					$s = -1; return false;
				/* } else if (_1 === (17)) { */ case 3:
					_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
				/* } else if (_1 === (25)) { */ case 4:
					i = 0;
					/* while (true) { */ case 7:
						/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
						_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						/* */ if (!_r$1) { $s = 9; continue; }
						/* */ $s = 10; continue;
						/* if (!_r$1) { */ case 9:
							$s = -1; return false;
						/* } */ case 10:
						i = i + (1) >> 0;
					/* } */ $s = 7; continue; case 8:
				/* } */ case 5:
			case 1:
			$s = -1; return true;
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
		rtype.ptr.prototype.Method = function(i) {
			var _i, _i$1, _r, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			prop = [prop];
			m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			t = this;
			if (t.Kind() === 20) {
				tt = (t.kindType);
				Method.copy(m, tt.Method(i));
				$s = -1; return m;
			}
			methods = t.exportedMethods();
			if (i < 0 || i >= methods.$length) {
				$panic(new $String("reflect: Method index out of range"));
			}
			p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			m.Name = $clone(pname, name).name();
			fl = 19;
			mtyp = t.typeOff(p.mtyp);
			ft = (mtyp.kindType);
			in$1 = $makeSlice(sliceType$10, 0, (1 + ft.in$().$length >> 0));
			in$1 = $append(in$1, t);
			_ref = ft.in$();
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				in$1 = $append(in$1, arg);
				_i++;
			}
			out = $makeSlice(sliceType$10, 0, ft.out().$length);
			_ref$1 = ft.out();
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				out = $append(out, ret);
				_i$1++;
			}
			_r = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			mt = _r;
			m.Type = mt;
			prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
			fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
				var arguments$1, rcvr;
				rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
				return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
			}; })(prop));
			m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
			m.Index = i;
			Method.copy(m, m);
			$s = -1; return m;
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.Method = function(i) { return this.$val.Method(i); };
		Value.ptr.prototype.object = function() {
			var _1, newVal, v, val;
			v = this;
			if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
				return v.ptr;
			}
			if (!((((v.flag & 128) >>> 0) === 0))) {
				val = v.ptr.$get();
				if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
					switch (0) { default:
						_1 = v.typ.Kind();
						if ((_1 === (11)) || (_1 === (6))) {
							val = new (jsType(v.typ))(val.$high, val.$low);
						} else if ((_1 === (15)) || (_1 === (16))) {
							val = new (jsType(v.typ))(val.$real, val.$imag);
						} else if (_1 === (23)) {
							if (val === val.constructor.nil) {
								val = jsType(v.typ).nil;
								break;
							}
							newVal = new (jsType(v.typ))(val.$array);
							newVal.$offset = val.$offset;
							newVal.$length = val.$length;
							newVal.$capacity = val.$capacity;
							val = newVal;
						}
					}
				}
				return val;
			}
			return v.ptr;
		};
		Value.prototype.object = function() { return this.$val.object(); };
		Value.ptr.prototype.assignTo = function(context, dst, target) {
			var _r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
				_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				v = _r;
			/* } */ case 2:
				_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 5; continue; }
				/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r$1) { */ case 5:
					fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
					fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
					$s = -1; return new Value.ptr(dst, v.ptr, fl);
				/* } else if (implements$1(dst, v.typ)) { */ case 6:
					if (target === 0) {
						target = unsafe_New(dst);
					}
					_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = _r$2;
					if (dst.NumMethod() === 0) {
						(target).$set(x);
					} else {
						ifaceE2I(dst, x, target);
					}
					$s = -1; return new Value.ptr(dst, target, 148);
				/* } */ case 7:
			case 4:
			$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
		Value.ptr.prototype.call = function(op, in$1) {
			var _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			t = ptrType$8.nil;
			fn = 0;
			rcvr = null;
			if (!((((v.flag & 512) >>> 0) === 0))) {
				_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
				t = _tuple[1];
				fn = _tuple[2];
				rcvr = $clone(v, Value).object();
				if (isWrapped(v.typ)) {
					rcvr = new (jsType(v.typ))(rcvr);
				}
			} else {
				t = (v.typ.kindType);
				fn = ($clone(v, Value).object());
				rcvr = undefined;
			}
			if (fn === 0) {
				$panic(new $String("reflect.Value.Call: call of nil function"));
			}
			isSlice = op === "CallSlice";
			n = t.rtype.NumIn();
			if (isSlice) {
				if (!t.rtype.IsVariadic()) {
					$panic(new $String("reflect: CallSlice of non-variadic function"));
				}
				if (in$1.$length < n) {
					$panic(new $String("reflect: CallSlice with too few input arguments"));
				}
				if (in$1.$length > n) {
					$panic(new $String("reflect: CallSlice with too many input arguments"));
				}
			} else {
				if (t.rtype.IsVariadic()) {
					n = n - (1) >> 0;
				}
				if (in$1.$length < n) {
					$panic(new $String("reflect: Call with too few input arguments"));
				}
				if (!t.rtype.IsVariadic() && in$1.$length > n) {
					$panic(new $String("reflect: Call with too many input arguments"));
				}
			}
			_ref = in$1;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if ($clone(x, Value).Kind() === 0) {
					$panic(new $String("reflect: " + op + " using zero Value argument"));
				}
				_i++;
			}
			i = 0;
			/* while (true) { */ case 1:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
				_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
				_tmp$1 = t.rtype.In(i);
				xt = _tmp;
				targ = _tmp$1;
				_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!_r) { */ case 3:
					_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
				/* } */ case 4:
				i = i + (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			/* */ if (!isSlice && t.rtype.IsVariadic()) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!isSlice && t.rtype.IsVariadic()) { */ case 8:
				m = in$1.$length - n >> 0;
				_r$3 = MakeSlice(t.rtype.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				slice = _r$3;
				_r$4 = t.rtype.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				elem = _r$4;
				i$1 = 0;
				/* while (true) { */ case 12:
					/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
					x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
					xt$1 = $clone(x$2, Value).Type();
					_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* */ if (!_r$5) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!_r$5) { */ case 14:
						_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
					/* } */ case 15:
					_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 12; continue; case 13:
				origIn = in$1;
				in$1 = $makeSlice(sliceType$9, (n + 1 >> 0));
				$copySlice($subslice(in$1, 0, n), origIn);
				((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
			/* } */ case 9:
			nin = in$1.$length;
			if (!((nin === t.rtype.NumIn()))) {
				$panic(new $String("reflect.Value.Call: wrong argument count"));
			}
			nout = t.rtype.NumOut();
			argsArray = new ($global.Array)(t.rtype.NumIn());
			_ref$1 = in$1;
			_i$1 = 0;
			/* while (true) { */ case 21:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
				i$2 = _i$1;
				arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_arg = t.rtype.In(i$2);
				_r$9 = t.rtype.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$1 = _r$9;
				_arg$2 = 0;
				_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_arg$3 = _r$11;
				_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				argsArray[i$2] = _r$12;
				_i$1++;
			/* } */ $s = 21; continue; case 22:
			_r$13 = callHelper(new sliceType$3([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			results = _r$13;
				_1 = nout;
				/* */ if (_1 === (0)) { $s = 29; continue; }
				/* */ if (_1 === (1)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (_1 === (0)) { */ case 29:
					$s = -1; return sliceType$9.nil;
				/* } else if (_1 === (1)) { */ case 30:
					_r$14 = makeValue(t.rtype.Out(0), wrapJsObject(t.rtype.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					$s = -1; return new sliceType$9([$clone(_r$14, Value)]);
				/* } else { */ case 31:
					ret = $makeSlice(sliceType$9, nout);
					_ref$2 = ret;
					_i$2 = 0;
					/* while (true) { */ case 34:
						/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 35; continue; }
						i$3 = _i$2;
						_r$15 = makeValue(t.rtype.Out(i$3), wrapJsObject(t.rtype.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
						_i$2++;
					/* } */ $s = 34; continue; case 35:
					$s = -1; return ret;
				/* } */ case 32:
			case 28:
			$s = -1; return sliceType$9.nil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
		Value.ptr.prototype.Cap = function() {
			var _1, k, v;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (17)) {
				return v.typ.Len();
			} else if ((_1 === (18)) || (_1 === (23))) {
				return $parseInt($clone(v, Value).object().$capacity) >> 0;
			}
			$panic(new ValueError.ptr("reflect.Value.Cap", k));
		};
		Value.prototype.Cap = function() { return this.$val.Cap(); };
		wrapJsObject = function(typ, val) {
			var typ, val;
			if ($interfaceIsEqual(typ, jsObjectPtr)) {
				return new (jsType(jsObjectPtr))(val);
			}
			return val;
		};
		unwrapJsObject = function(typ, val) {
			var typ, val;
			if ($interfaceIsEqual(typ, jsObjectPtr)) {
				return val.object;
			}
			return val;
		};
		Value.ptr.prototype.Elem = function() {
			var _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
				k = new flag(v.flag).kind();
				_1 = k;
				/* */ if (_1 === (20)) { $s = 2; continue; }
				/* */ if (_1 === (22)) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (_1 === (20)) { */ case 2:
					val = $clone(v, Value).object();
					if (val === $ifaceNil) {
						$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
					}
					typ = reflectType(val.constructor);
					_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
				/* } else if (_1 === (22)) { */ case 3:
					if ($clone(v, Value).IsNil()) {
						$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
					}
					val$1 = $clone(v, Value).object();
					tt = (v.typ.kindType);
					fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
					fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
					$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
				/* } else { */ case 4:
					$panic(new ValueError.ptr("reflect.Value.Elem", k));
				/* } */ case 5:
			case 1:
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Elem = function() { return this.$val.Elem(); };
		Value.ptr.prototype.Field = function(i) {
			var _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			jsTag = [jsTag];
			prop = [prop];
			s = [s];
			typ = [typ];
			v = this;
			if (!((new flag(v.flag).kind() === 25))) {
				$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
			}
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
				$panic(new $String("reflect: Field index out of range"));
			}
			prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
			field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			typ[0] = field.typ;
			fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
			if (!$clone(field.name, name).isExported()) {
				if (field.embedded()) {
					fl = (fl | (64)) >>> 0;
				} else {
					fl = (fl | (32)) >>> 0;
				}
			}
			tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
			/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!(tag === "") && !((i === 0))) { */ case 1:
				jsTag[0] = getJsTag(tag);
				/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!(jsTag[0] === "")) { */ case 3:
					/* while (true) { */ case 5:
						o = [o];
						_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						v = _r;
						/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
						/* */ $s = 9; continue;
						/* if (v.typ === jsObjectPtr) { */ case 8:
							o[0] = $clone(v, Value).object().object;
							$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
								return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
							}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
								var x$2;
								o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
							}; })(jsTag, o, prop, s, typ))), fl);
						/* } */ case 9:
						/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
						/* */ $s = 11; continue;
						/* if (v.typ.Kind() === 22) { */ case 10:
							_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							v = _r$1;
						/* } */ case 11:
					/* } */ $s = 5; continue; case 6:
				/* } */ case 4:
			/* } */ case 2:
			s[0] = v.ptr;
			/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
				$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
					return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
				}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
					var x$2;
					s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
				}; })(jsTag, prop, s, typ))), fl);
			/* } */ case 14:
			_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Field = function(i) { return this.$val.Field(i); };
		getJsTag = function(tag) {
			var _tuple, i, name$1, qvalue, tag, value;
			while (true) {
				if (!(!(tag === ""))) { break; }
				i = 0;
				while (true) {
					if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
					i = i + (1) >> 0;
				}
				tag = $substring(tag, i);
				if (tag === "") {
					break;
				}
				i = 0;
				while (true) {
					if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
					i = i + (1) >> 0;
				}
				if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
					break;
				}
				name$1 = ($substring(tag, 0, i));
				tag = $substring(tag, (i + 1 >> 0));
				i = 1;
				while (true) {
					if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
					if (tag.charCodeAt(i) === 92) {
						i = i + (1) >> 0;
					}
					i = i + (1) >> 0;
				}
				if (i >= tag.length) {
					break;
				}
				qvalue = ($substring(tag, 0, (i + 1 >> 0)));
				tag = $substring(tag, (i + 1 >> 0));
				if (name$1 === "js") {
					_tuple = strconv.Unquote(qvalue);
					value = _tuple[0];
					return value;
				}
			}
			return "";
		};
		Value.ptr.prototype.Index = function(i) {
			var _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			a = [a];
			a$1 = [a$1];
			c = [c];
			i = [i];
			typ = [typ];
			typ$1 = [typ$1];
			v = this;
				k = new flag(v.flag).kind();
				_1 = k;
				/* */ if (_1 === (17)) { $s = 2; continue; }
				/* */ if (_1 === (23)) { $s = 3; continue; }
				/* */ if (_1 === (24)) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (_1 === (17)) { */ case 2:
					tt = (v.typ.kindType);
					if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
						$panic(new $String("reflect: array index out of range"));
					}
					typ[0] = tt.elem;
					fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
					a[0] = v.ptr;
					/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
							return wrapJsObject(typ[0], a[0][i[0]]);
						}; })(a, a$1, c, i, typ), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
							var x;
							a[0][i[0]] = unwrapJsObject(typ[0], x);
						}; })(a, a$1, c, i, typ))), fl);
					/* } */ case 8:
					_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
				/* } else if (_1 === (23)) { */ case 3:
					s = $clone(v, Value).object();
					if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
						$panic(new $String("reflect: slice index out of range"));
					}
					tt$1 = (v.typ.kindType);
					typ$1[0] = tt$1.elem;
					fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
					i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
					a$1[0] = s.$array;
					/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
						$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
							return wrapJsObject(typ$1[0], a$1[0][i[0]]);
						}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
							var x;
							a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
						}; })(a, a$1, c, i, typ, typ$1))), fl$1);
					/* } */ case 11:
					_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return _r$1;
				/* } else if (_1 === (24)) { */ case 4:
					str = (v.ptr).$get();
					if (i[0] < 0 || i[0] >= str.length) {
						$panic(new $String("reflect: string index out of range"));
					}
					fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
					c[0] = str.charCodeAt(i[0]);
					$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
				/* } else { */ case 5:
					$panic(new ValueError.ptr("reflect.Value.Index", k));
				/* } */ case 6:
			case 1:
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Index = function(i) { return this.$val.Index(i); };
		Value.ptr.prototype.InterfaceData = function() {
			$panic(errors.New("InterfaceData is not supported by GopherJS"));
		};
		Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
		Value.ptr.prototype.IsNil = function() {
			var _1, k, v;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if ((_1 === (22)) || (_1 === (23))) {
				return $clone(v, Value).object() === jsType(v.typ).nil;
			} else if (_1 === (18)) {
				return $clone(v, Value).object() === $chanNil;
			} else if (_1 === (19)) {
				return $clone(v, Value).object() === $throwNilPointerError;
			} else if (_1 === (21)) {
				return $clone(v, Value).object() === false;
			} else if (_1 === (20)) {
				return $clone(v, Value).object() === $ifaceNil;
			} else if (_1 === (26)) {
				return $clone(v, Value).object() === 0;
			} else {
				$panic(new ValueError.ptr("reflect.Value.IsNil", k));
			}
		};
		Value.prototype.IsNil = function() { return this.$val.IsNil(); };
		Value.ptr.prototype.Len = function() {
			var _1, k, v;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if ((_1 === (17)) || (_1 === (24))) {
				return $parseInt($clone(v, Value).object().length);
			} else if (_1 === (23)) {
				return $parseInt($clone(v, Value).object().$length) >> 0;
			} else if (_1 === (18)) {
				return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
			} else if (_1 === (21)) {
				return $parseInt($keys($clone(v, Value).object()).length);
			} else {
				$panic(new ValueError.ptr("reflect.Value.Len", k));
			}
		};
		Value.prototype.Len = function() { return this.$val.Len(); };
		Value.ptr.prototype.Pointer = function() {
			var _1, k, v;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
				if ($clone(v, Value).IsNil()) {
					return 0;
				}
				return $clone(v, Value).object();
			} else if (_1 === (19)) {
				if ($clone(v, Value).IsNil()) {
					return 0;
				}
				return 1;
			} else if (_1 === (23)) {
				if ($clone(v, Value).IsNil()) {
					return 0;
				}
				return $clone(v, Value).object().$array;
			} else {
				$panic(new ValueError.ptr("reflect.Value.Pointer", k));
			}
		};
		Value.prototype.Pointer = function() { return this.$val.Pointer(); };
		Value.ptr.prototype.Set = function(x) {
			var _1, _r, _r$1, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(x.flag).mustBeExported();
			_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
					_1 = v.typ.Kind();
					/* */ if (_1 === (17)) { $s = 5; continue; }
					/* */ if (_1 === (20)) { $s = 6; continue; }
					/* */ if (_1 === (25)) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (_1 === (17)) { */ case 5:
						jsType(v.typ).copy(v.ptr, x.ptr);
						$s = 9; continue;
					/* } else if (_1 === (20)) { */ case 6:
						_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v.ptr.$set(_r$1);
						$s = 9; continue;
					/* } else if (_1 === (25)) { */ case 7:
						copyStruct(v.ptr, x.ptr, v.typ);
						$s = 9; continue;
					/* } else { */ case 8:
						v.ptr.$set($clone(x, Value).object());
					/* } */ case 9:
				case 4:
				$s = -1; return;
			/* } */ case 3:
			v.ptr = x.ptr;
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Set = function(x) { return this.$val.Set(x); };
		Value.ptr.prototype.SetBytes = function(x) {
			var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(v.flag).mustBe(23);
			_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!((_r === 8))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((_r === 8))) { */ case 1:
				$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
			/* } */ case 2:
			slice = x;
			if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
			_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = !(_r$1 === ""); case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				typedSlice = new (jsType(v.typ))(slice.$array);
				typedSlice.$offset = slice.$offset;
				typedSlice.$length = slice.$length;
				typedSlice.$capacity = slice.$capacity;
				slice = typedSlice;
			/* } */ case 5:
			v.ptr.$set(slice);
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
		Value.ptr.prototype.SetCap = function(n) {
			var n, newSlice, s, v;
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(v.flag).mustBe(23);
			s = v.ptr.$get();
			if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
				$panic(new $String("reflect: slice capacity out of range in SetCap"));
			}
			newSlice = new (jsType(v.typ))(s.$array);
			newSlice.$offset = s.$offset;
			newSlice.$length = s.$length;
			newSlice.$capacity = n;
			v.ptr.$set(newSlice);
		};
		Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
		Value.ptr.prototype.SetLen = function(n) {
			var n, newSlice, s, v;
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(v.flag).mustBe(23);
			s = v.ptr.$get();
			if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
				$panic(new $String("reflect: slice length out of range in SetLen"));
			}
			newSlice = new (jsType(v.typ))(s.$array);
			newSlice.$offset = s.$offset;
			newSlice.$length = n;
			newSlice.$capacity = s.$capacity;
			v.ptr.$set(newSlice);
		};
		Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
		Value.ptr.prototype.Slice = function(i, j) {
			var _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			cap = 0;
			typ = $ifaceNil;
			s = null;
				kind = new flag(v.flag).kind();
				_1 = kind;
				/* */ if (_1 === (17)) { $s = 2; continue; }
				/* */ if (_1 === (23)) { $s = 3; continue; }
				/* */ if (_1 === (24)) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (_1 === (17)) { */ case 2:
					if (((v.flag & 256) >>> 0) === 0) {
						$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
					}
					tt = (v.typ.kindType);
					cap = ((tt.len >> 0));
					typ = SliceOf(tt.elem);
					s = new (jsType(typ))($clone(v, Value).object());
					$s = 6; continue;
				/* } else if (_1 === (23)) { */ case 3:
					typ = v.typ;
					s = $clone(v, Value).object();
					cap = $parseInt(s.$capacity) >> 0;
					$s = 6; continue;
				/* } else if (_1 === (24)) { */ case 4:
					str = (v.ptr).$get();
					if (i < 0 || j < i || j > str.length) {
						$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
					}
					_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
				/* } else { */ case 5:
					$panic(new ValueError.ptr("reflect.Value.Slice", kind));
				/* } */ case 6:
			case 1:
			if (i < 0 || j < i || j > cap) {
				$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
			}
			_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
		Value.ptr.prototype.Slice3 = function(i, j, k) {
			var _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			cap = 0;
			typ = $ifaceNil;
			s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			if (_1 === (17)) {
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
			} else if (_1 === (23)) {
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
			} else {
				$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
			}
			if (i < 0 || j < i || k < j || k > cap) {
				$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
			}
			_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
		Value.ptr.prototype.Close = function() {
			var v;
			v = this;
			new flag(v.flag).mustBe(18);
			new flag(v.flag).mustBeExported();
			$close($clone(v, Value).object());
		};
		Value.prototype.Close = function() { return this.$val.Close(); };
		chanrecv = function(ch, nb, val) {
			var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			selected = false;
			received = false;
			comms = new sliceType$11([new sliceType$8([ch])]);
			if (nb) {
				comms = $append(comms, new sliceType$8([]));
			}
			_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			selectRes = _r;
			if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
				_tmp = false;
				_tmp$1 = false;
				selected = _tmp;
				received = _tmp$1;
				$s = -1; return [selected, received];
			}
			recvRes = selectRes[1];
			val.$set(recvRes[0]);
			_tmp$2 = true;
			_tmp$3 = !!(recvRes[1]);
			selected = _tmp$2;
			received = _tmp$3;
			$s = -1; return [selected, received];
			/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		chansend = function(ch, val, nb) {
			var _r, ch, comms, nb, selectRes, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			comms = new sliceType$11([new sliceType$8([ch, val.$get()])]);
			if (nb) {
				comms = $append(comms, new sliceType$8([]));
			}
			_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			selectRes = _r;
			if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
				$s = -1; return false;
			}
			$s = -1; return true;
			/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		DeepEqual = function(a1, a2) {
			var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, a1, a2, i1, i2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; a1 = $f.a1; a2 = $f.a2; i1 = $f.i1; i2 = $f.i2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			i1 = a1;
			i2 = a2;
			if (i1 === i2) {
				$s = -1; return true;
			}
			if (i1 === null || i2 === null || !(i1.constructor === i2.constructor)) {
				$s = -1; return false;
			}
			_r = ValueOf(a1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg = $clone(_r, Value);
			_r$1 = ValueOf(a2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = $clone(_r$1, Value);
			_arg$2 = sliceType$12.nil;
			_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: DeepEqual }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.a1 = a1; $f.a2 = a2; $f.i1 = i1; $f.i2 = i2; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.DeepEqual = DeepEqual;
		deepValueEqualJs = function(v1, v2, visited) {
			var _1, _2, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, entry, i, i$1, k, keys, n, n$1, v1, v2, val1, val2, visited, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; entry = $f.entry; i = $f.i; i$1 = $f.i$1; k = $f.k; keys = $f.keys; n = $f.n; n$1 = $f.n$1; v1 = $f.v1; v2 = $f.v2; val1 = $f.val1; val2 = $f.val2; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (!$clone(v1, Value).IsValid() || !$clone(v2, Value).IsValid()) {
				$s = -1; return !$clone(v1, Value).IsValid() && !$clone(v2, Value).IsValid();
			}
			if (!($interfaceIsEqual($clone(v1, Value).Type(), $clone(v2, Value).Type()))) {
				$s = -1; return false;
			}
			if ($interfaceIsEqual($clone(v1, Value).Type(), jsObjectPtr)) {
				$s = -1; return unwrapJsObject(jsObjectPtr, $clone(v1, Value).object()) === unwrapJsObject(jsObjectPtr, $clone(v2, Value).object());
			}
			_1 = $clone(v1, Value).Kind();
			if ((_1 === (17)) || (_1 === (21)) || (_1 === (23)) || (_1 === (25))) {
				_ref = visited;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					entry = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
					if (v1.ptr === entry[0] && v2.ptr === entry[1]) {
						$s = -1; return true;
					}
					_i++;
				}
				visited = $append(visited, $toNativeArray($kindUnsafePointer, [v1.ptr, v2.ptr]));
			}
				_2 = $clone(v1, Value).Kind();
				/* */ if ((_2 === (17)) || (_2 === (23))) { $s = 2; continue; }
				/* */ if (_2 === (20)) { $s = 3; continue; }
				/* */ if (_2 === (22)) { $s = 4; continue; }
				/* */ if (_2 === (25)) { $s = 5; continue; }
				/* */ if (_2 === (21)) { $s = 6; continue; }
				/* */ if (_2 === (19)) { $s = 7; continue; }
				/* */ if (_2 === (26)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ((_2 === (17)) || (_2 === (23))) { */ case 2:
					if ($clone(v1, Value).Kind() === 23) {
						if (!($clone(v1, Value).IsNil() === $clone(v2, Value).IsNil())) {
							$s = -1; return false;
						}
						if ($clone(v1, Value).object() === $clone(v2, Value).object()) {
							$s = -1; return true;
						}
					}
					n = $clone(v1, Value).Len();
					if (!((n === $clone(v2, Value).Len()))) {
						$s = -1; return false;
					}
					i = 0;
					/* while (true) { */ case 10:
						/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 11; continue; }
						_r = $clone(v1, Value).Index(i); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_arg = $clone(_r, Value);
						_r$1 = $clone(v2, Value).Index(i); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_arg$1 = $clone(_r$1, Value);
						_arg$2 = visited;
						_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						/* */ if (!_r$2) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (!_r$2) { */ case 12:
							$s = -1; return false;
						/* } */ case 13:
						i = i + (1) >> 0;
					/* } */ $s = 10; continue; case 11:
					$s = -1; return true;
				/* } else if (_2 === (20)) { */ case 3:
					if ($clone(v1, Value).IsNil() || $clone(v2, Value).IsNil()) {
						$s = -1; return $clone(v1, Value).IsNil() && $clone(v2, Value).IsNil();
					}
					_r$3 = $clone(v1, Value).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$3 = $clone(_r$3, Value);
					_r$4 = $clone(v2, Value).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_arg$4 = $clone(_r$4, Value);
					_arg$5 = visited;
					_r$5 = deepValueEqualJs(_arg$3, _arg$4, _arg$5); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$s = -1; return _r$5;
				/* } else if (_2 === (22)) { */ case 4:
					_r$6 = $clone(v1, Value).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$6 = $clone(_r$6, Value);
					_r$7 = $clone(v2, Value).Elem(); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_arg$7 = $clone(_r$7, Value);
					_arg$8 = visited;
					_r$8 = deepValueEqualJs(_arg$6, _arg$7, _arg$8); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$s = -1; return _r$8;
				/* } else if (_2 === (25)) { */ case 5:
					n$1 = $clone(v1, Value).NumField();
					i$1 = 0;
					/* while (true) { */ case 23:
						/* if (!(i$1 < n$1)) { break; } */ if(!(i$1 < n$1)) { $s = 24; continue; }
						_r$9 = $clone(v1, Value).Field(i$1); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_arg$9 = $clone(_r$9, Value);
						_r$10 = $clone(v2, Value).Field(i$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_arg$10 = $clone(_r$10, Value);
						_arg$11 = visited;
						_r$11 = deepValueEqualJs(_arg$9, _arg$10, _arg$11); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						/* */ if (!_r$11) { $s = 25; continue; }
						/* */ $s = 26; continue;
						/* if (!_r$11) { */ case 25:
							$s = -1; return false;
						/* } */ case 26:
						i$1 = i$1 + (1) >> 0;
					/* } */ $s = 23; continue; case 24:
					$s = -1; return true;
				/* } else if (_2 === (21)) { */ case 6:
					if (!($clone(v1, Value).IsNil() === $clone(v2, Value).IsNil())) {
						$s = -1; return false;
					}
					if ($clone(v1, Value).object() === $clone(v2, Value).object()) {
						$s = -1; return true;
					}
					_r$12 = $clone(v1, Value).MapKeys(); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					keys = _r$12;
					if (!((keys.$length === $clone(v2, Value).Len()))) {
						$s = -1; return false;
					}
					_ref$1 = keys;
					_i$1 = 0;
					/* while (true) { */ case 31:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 32; continue; }
						k = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						_r$13 = $clone(v1, Value).MapIndex($clone(k, Value)); /* */ $s = 33; case 33: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						val1 = _r$13;
						_r$14 = $clone(v2, Value).MapIndex($clone(k, Value)); /* */ $s = 34; case 34: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						val2 = _r$14;
						if (!$clone(val1, Value).IsValid() || !$clone(val2, Value).IsValid()) { _v = true; $s = 37; continue s; }
						_r$15 = deepValueEqualJs($clone(val1, Value), $clone(val2, Value), visited); /* */ $s = 38; case 38: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_v = !_r$15; case 37:
						/* */ if (_v) { $s = 35; continue; }
						/* */ $s = 36; continue;
						/* if (_v) { */ case 35:
							$s = -1; return false;
						/* } */ case 36:
						_i$1++;
					/* } */ $s = 31; continue; case 32:
					$s = -1; return true;
				/* } else if (_2 === (19)) { */ case 7:
					$s = -1; return $clone(v1, Value).IsNil() && $clone(v2, Value).IsNil();
				/* } else if (_2 === (26)) { */ case 8:
					$s = -1; return $clone(v1, Value).object() === $clone(v2, Value).object();
				/* } */ case 9:
			case 1:
			_r$16 = valueInterface($clone(v1, Value), false); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = valueInterface($clone(v2, Value), false); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			$s = -1; return !!($interfaceIsEqual(_r$16, _r$17));
			/* */ } return; } if ($f === undefined) { $f = { $blk: deepValueEqualJs }; } $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.entry = entry; $f.i = i; $f.i$1 = i$1; $f.k = k; $f.keys = keys; $f.n = n; $f.n$1 = n$1; $f.v1 = v1; $f.v2 = v2; $f.val1 = val1; $f.val2 = val2; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
		};
		structField.ptr.prototype.offset = function() {
			var f;
			f = this;
			return f.offsetEmbed >>> 1 >>> 0;
		};
		structField.prototype.offset = function() { return this.$val.offset(); };
		structField.ptr.prototype.embedded = function() {
			var f;
			f = this;
			return !((((f.offsetEmbed & 1) >>> 0) === 0));
		};
		structField.prototype.embedded = function() { return this.$val.embedded(); };
		Kind.prototype.String = function() {
			var k;
			k = this.$val;
			if (((k >> 0)) < kindNames.$length) {
				return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
			}
			return "kind" + strconv.Itoa(((k >> 0)));
		};
		$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
		rtype.ptr.prototype.String = function() {
			var s, t;
			t = this;
			s = $clone(t.nameOff(t.str), name).name();
			if (!((((t.tflag & 2) >>> 0) === 0))) {
				return $substring(s, 1);
			}
			return s;
		};
		rtype.prototype.String = function() { return this.$val.String(); };
		rtype.ptr.prototype.Size = function() {
			var t;
			t = this;
			return t.size;
		};
		rtype.prototype.Size = function() { return this.$val.Size(); };
		rtype.ptr.prototype.Bits = function() {
			var k, t;
			t = this;
			if (t === ptrType$1.nil) {
				$panic(new $String("reflect: Bits of nil Type"));
			}
			k = t.Kind();
			if (k < 2 || k > 16) {
				$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
			}
			return $imul(((t.size >> 0)), 8);
		};
		rtype.prototype.Bits = function() { return this.$val.Bits(); };
		rtype.ptr.prototype.Align = function() {
			var t;
			t = this;
			return ((t.align >> 0));
		};
		rtype.prototype.Align = function() { return this.$val.Align(); };
		rtype.ptr.prototype.FieldAlign = function() {
			var t;
			t = this;
			return ((t.fieldAlign >> 0));
		};
		rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
		rtype.ptr.prototype.Kind = function() {
			var t;
			t = this;
			return ((((t.kind & 31) >>> 0) >>> 0));
		};
		rtype.prototype.Kind = function() { return this.$val.Kind(); };
		rtype.ptr.prototype.common = function() {
			var t;
			t = this;
			return t;
		};
		rtype.prototype.common = function() { return this.$val.common(); };
		rtype.ptr.prototype.exportedMethods = function() {
			var t, ut;
			t = this;
			ut = t.uncommon();
			if (ut === ptrType$5.nil) {
				return sliceType$5.nil;
			}
			return ut.exportedMethods();
		};
		rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
		rtype.ptr.prototype.NumMethod = function() {
			var t, tt;
			t = this;
			if (t.Kind() === 20) {
				tt = (t.kindType);
				return tt.NumMethod();
			}
			return t.exportedMethods().$length;
		};
		rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
		rtype.ptr.prototype.MethodByName = function(name$1) {
			var _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, t, tt, ut, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; t = $f.t; tt = $f.tt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			ok = false;
			t = this;
			if (t.Kind() === 20) {
				tt = (t.kindType);
				_tuple = tt.MethodByName(name$1);
				Method.copy(m, _tuple[0]);
				ok = _tuple[1];
				$s = -1; return [m, ok];
			}
			ut = t.uncommon();
			if (ut === ptrType$5.nil) {
				_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
				_tmp$1 = false;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				$s = -1; return [m, ok];
			}
			_ref = ut.exportedMethods();
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				i = _i;
				p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
				/* */ if ($clone(t.nameOff(p.name), name).name() === name$1) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if ($clone(t.nameOff(p.name), name).name() === name$1) { */ case 3:
					_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp$2 = $clone(_r, Method);
					_tmp$3 = true;
					Method.copy(m, _tmp$2);
					ok = _tmp$3;
					$s = -1; return [m, ok];
				/* } */ case 4:
				_i++;
			/* } */ $s = 1; continue; case 2:
			_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$5 = false;
			Method.copy(m, _tmp$4);
			ok = _tmp$5;
			$s = -1; return [m, ok];
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.t = t; $f.tt = tt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
		rtype.ptr.prototype.PkgPath = function() {
			var t, ut;
			t = this;
			if (((t.tflag & 4) >>> 0) === 0) {
				return "";
			}
			ut = t.uncommon();
			if (ut === ptrType$5.nil) {
				return "";
			}
			return $clone(t.nameOff(ut.pkgPath), name).name();
		};
		rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
		rtype.ptr.prototype.Name = function() {
			var i, s, t;
			t = this;
			if (((t.tflag & 4) >>> 0) === 0) {
				return "";
			}
			s = t.String();
			i = s.length - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if (s.charCodeAt(i) === 46) {
					break;
				}
				i = i - (1) >> 0;
			}
			return $substring(s, (i + 1 >> 0));
		};
		rtype.prototype.Name = function() { return this.$val.Name(); };
		rtype.ptr.prototype.ChanDir = function() {
			var t, tt;
			t = this;
			if (!((t.Kind() === 18))) {
				$panic(new $String("reflect: ChanDir of non-chan type"));
			}
			tt = (t.kindType);
			return ((tt.dir >> 0));
		};
		rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
		rtype.ptr.prototype.IsVariadic = function() {
			var t, tt;
			t = this;
			if (!((t.Kind() === 19))) {
				$panic(new $String("reflect: IsVariadic of non-func type"));
			}
			tt = (t.kindType);
			return !((((tt.outCount & 32768) >>> 0) === 0));
		};
		rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
		rtype.ptr.prototype.Elem = function() {
			var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
			t = this;
			_1 = t.Kind();
			if (_1 === (17)) {
				tt = (t.kindType);
				return toType(tt.elem);
			} else if (_1 === (18)) {
				tt$1 = (t.kindType);
				return toType(tt$1.elem);
			} else if (_1 === (21)) {
				tt$2 = (t.kindType);
				return toType(tt$2.elem);
			} else if (_1 === (22)) {
				tt$3 = (t.kindType);
				return toType(tt$3.elem);
			} else if (_1 === (23)) {
				tt$4 = (t.kindType);
				return toType(tt$4.elem);
			}
			$panic(new $String("reflect: Elem of invalid type"));
		};
		rtype.prototype.Elem = function() { return this.$val.Elem(); };
		rtype.ptr.prototype.Field = function(i) {
			var i, t, tt;
			t = this;
			if (!((t.Kind() === 25))) {
				$panic(new $String("reflect: Field of non-struct type"));
			}
			tt = (t.kindType);
			return tt.Field(i);
		};
		rtype.prototype.Field = function(i) { return this.$val.Field(i); };
		rtype.ptr.prototype.FieldByIndex = function(index) {
			var _r, index, t, tt, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			if (!((t.Kind() === 25))) {
				$panic(new $String("reflect: FieldByIndex of non-struct type"));
			}
			tt = (t.kindType);
			_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
		rtype.ptr.prototype.FieldByName = function(name$1) {
			var _r, name$1, t, tt, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			if (!((t.Kind() === 25))) {
				$panic(new $String("reflect: FieldByName of non-struct type"));
			}
			tt = (t.kindType);
			_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
		rtype.ptr.prototype.FieldByNameFunc = function(match) {
			var _r, match, t, tt, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			if (!((t.Kind() === 25))) {
				$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
			}
			tt = (t.kindType);
			_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
		rtype.ptr.prototype.In = function(i) {
			var i, t, tt, x;
			t = this;
			if (!((t.Kind() === 19))) {
				$panic(new $String("reflect: In of non-func type"));
			}
			tt = (t.kindType);
			return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
		};
		rtype.prototype.In = function(i) { return this.$val.In(i); };
		rtype.ptr.prototype.Key = function() {
			var t, tt;
			t = this;
			if (!((t.Kind() === 21))) {
				$panic(new $String("reflect: Key of non-map type"));
			}
			tt = (t.kindType);
			return toType(tt.key);
		};
		rtype.prototype.Key = function() { return this.$val.Key(); };
		rtype.ptr.prototype.Len = function() {
			var t, tt;
			t = this;
			if (!((t.Kind() === 17))) {
				$panic(new $String("reflect: Len of non-array type"));
			}
			tt = (t.kindType);
			return ((tt.len >> 0));
		};
		rtype.prototype.Len = function() { return this.$val.Len(); };
		rtype.ptr.prototype.NumField = function() {
			var t, tt;
			t = this;
			if (!((t.Kind() === 25))) {
				$panic(new $String("reflect: NumField of non-struct type"));
			}
			tt = (t.kindType);
			return tt.fields.$length;
		};
		rtype.prototype.NumField = function() { return this.$val.NumField(); };
		rtype.ptr.prototype.NumIn = function() {
			var t, tt;
			t = this;
			if (!((t.Kind() === 19))) {
				$panic(new $String("reflect: NumIn of non-func type"));
			}
			tt = (t.kindType);
			return ((tt.inCount >> 0));
		};
		rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
		rtype.ptr.prototype.NumOut = function() {
			var t, tt;
			t = this;
			if (!((t.Kind() === 19))) {
				$panic(new $String("reflect: NumOut of non-func type"));
			}
			tt = (t.kindType);
			return tt.out().$length;
		};
		rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
		rtype.ptr.prototype.Out = function(i) {
			var i, t, tt, x;
			t = this;
			if (!((t.Kind() === 19))) {
				$panic(new $String("reflect: Out of non-func type"));
			}
			tt = (t.kindType);
			return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
		};
		rtype.prototype.Out = function(i) { return this.$val.Out(i); };
		ChanDir.prototype.String = function() {
			var _1, d;
			d = this.$val;
			_1 = d;
			if (_1 === (2)) {
				return "chan<-";
			} else if (_1 === (1)) {
				return "<-chan";
			} else if (_1 === (3)) {
				return "chan";
			}
			return "ChanDir" + strconv.Itoa(((d >> 0)));
		};
		$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
		interfaceType.ptr.prototype.Method = function(i) {
			var i, m, p, pname, t, x;
			m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			t = this;
			if (i < 0 || i >= t.methods.$length) {
				return m;
			}
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			pname = $clone(t.rtype.nameOff(p.name), name);
			m.Name = $clone(pname, name).name();
			if (!$clone(pname, name).isExported()) {
				m.PkgPath = $clone(pname, name).pkgPath();
				if (m.PkgPath === "") {
					m.PkgPath = $clone(t.pkgPath, name).name();
				}
			}
			m.Type = toType(t.rtype.typeOff(p.typ));
			m.Index = i;
			return m;
		};
		interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
		interfaceType.ptr.prototype.NumMethod = function() {
			var t;
			t = this;
			return t.methods.$length;
		};
		interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
		interfaceType.ptr.prototype.MethodByName = function(name$1) {
			var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
			m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			ok = false;
			t = this;
			if (t === ptrType$9.nil) {
				return [m, ok];
			}
			p = ptrType$10.nil;
			_ref = t.methods;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
					_tmp = $clone(t.Method(i), Method);
					_tmp$1 = true;
					Method.copy(m, _tmp);
					ok = _tmp$1;
					return [m, ok];
				}
				_i++;
			}
			return [m, ok];
		};
		interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
		StructTag.prototype.Get = function(key) {
			var _tuple, key, tag, v;
			tag = this.$val;
			_tuple = new StructTag(tag).Lookup(key);
			v = _tuple[0];
			return v;
		};
		$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
		StructTag.prototype.Lookup = function(key) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
			value = "";
			ok = false;
			tag = this.$val;
			while (true) {
				if (!(!(tag === ""))) { break; }
				i = 0;
				while (true) {
					if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
					i = i + (1) >> 0;
				}
				tag = $substring(tag, i);
				if (tag === "") {
					break;
				}
				i = 0;
				while (true) {
					if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
					i = i + (1) >> 0;
				}
				if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
					break;
				}
				name$1 = ($substring(tag, 0, i));
				tag = $substring(tag, (i + 1 >> 0));
				i = 1;
				while (true) {
					if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
					if (tag.charCodeAt(i) === 92) {
						i = i + (1) >> 0;
					}
					i = i + (1) >> 0;
				}
				if (i >= tag.length) {
					break;
				}
				qvalue = ($substring(tag, 0, (i + 1 >> 0)));
				tag = $substring(tag, (i + 1 >> 0));
				if (key === name$1) {
					_tuple = strconv.Unquote(qvalue);
					value$1 = _tuple[0];
					err = _tuple[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						break;
					}
					_tmp = value$1;
					_tmp$1 = true;
					value = _tmp;
					ok = _tmp$1;
					return [value, ok];
				}
			}
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			ok = _tmp$3;
			return [value, ok];
		};
		$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
		structType.ptr.prototype.Field = function(i) {
			var f, i, p, t, tag, x;
			f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
			t = this;
			if (i < 0 || i >= t.fields.$length) {
				$panic(new $String("reflect: Field index out of bounds"));
			}
			p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			f.Type = toType(p.typ);
			f.Name = $clone(p.name, name).name();
			f.Anonymous = p.embedded();
			if (!$clone(p.name, name).isExported()) {
				f.PkgPath = $clone(t.pkgPath, name).name();
			}
			tag = $clone(p.name, name).tag();
			if (!(tag === "")) {
				f.Tag = (tag);
			}
			f.Offset = p.offset();
			f.Index = new sliceType$13([i]);
			return f;
		};
		structType.prototype.Field = function(i) { return this.$val.Field(i); };
		structType.ptr.prototype.FieldByIndex = function(index) {
			var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
			t = this;
			f.Type = toType(t.rtype);
			_ref = index;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				i = _i;
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				/* */ if (i > 0) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (i > 0) { */ case 3:
					ft = f.Type;
					_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					if (!(_r === 22)) { _v = false; $s = 7; continue s; }
					_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_v = _r$2 === 25; case 7:
					/* */ if (_v) { $s = 5; continue; }
					/* */ $s = 6; continue;
					/* if (_v) { */ case 5:
						_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						ft = _r$3;
					/* } */ case 6:
					f.Type = ft;
				/* } */ case 4:
				_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				StructField.copy(f, _r$4);
				_i++;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return f;
			/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
		structType.ptr.prototype.FieldByNameFunc = function(match) {
			var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
			ok = false;
			t = this;
			current = new sliceType$14([]);
			next = new sliceType$14([new fieldScan.ptr(t, sliceType$13.nil)]);
			nextCount = false;
			visited = $makeMap(ptrType$11.keyFor, []);
			/* while (true) { */ case 1:
				/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
				_tmp = next;
				_tmp$1 = $subslice(current, 0, 0);
				current = _tmp;
				next = _tmp$1;
				count = nextCount;
				nextCount = false;
				_ref = current;
				_i = 0;
				/* while (true) { */ case 3:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
					scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
					t$1 = scan.typ;
					/* */ if ((_entry = visited[ptrType$11.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
					/* */ $s = 6; continue;
					/* if ((_entry = visited[ptrType$11.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
						_i++;
						/* continue; */ $s = 3; continue;
					/* } */ case 6:
					_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$11.keyFor(_key)] = { k: _key, v: true };
					_ref$1 = t$1.fields;
					_i$1 = 0;
					/* while (true) { */ case 7:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
						i = _i$1;
						f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
						fname = $clone(f.name, name).name();
						ntyp = ptrType$1.nil;
						/* */ if (f.embedded()) { $s = 9; continue; }
						/* */ $s = 10; continue;
						/* if (f.embedded()) { */ case 9:
							ntyp = f.typ;
							/* */ if (ntyp.Kind() === 22) { $s = 11; continue; }
							/* */ $s = 12; continue;
							/* if (ntyp.Kind() === 22) { */ case 11:
								_r = ntyp.Elem().common(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
								ntyp = _r;
							/* } */ case 12:
						/* } */ case 10:
						_r$1 = match(fname); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						/* */ if (_r$1) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if (_r$1) { */ case 14:
							if ((_entry$1 = count[ptrType$11.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
								_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
								_tmp$3 = false;
								StructField.copy(result, _tmp$2);
								ok = _tmp$3;
								$s = -1; return [result, ok];
							}
							StructField.copy(result, t$1.Field(i));
							result.Index = sliceType$13.nil;
							result.Index = $appendSlice(result.Index, scan.index);
							result.Index = $append(result.Index, i);
							ok = true;
							_i$1++;
							/* continue; */ $s = 7; continue;
						/* } */ case 15:
						if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
							_i$1++;
							/* continue; */ $s = 7; continue;
						}
						styp = (ntyp.kindType);
						if ((_entry$2 = nextCount[ptrType$11.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
							_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$11.keyFor(_key$1)] = { k: _key$1, v: 2 };
							_i$1++;
							/* continue; */ $s = 7; continue;
						}
						if (nextCount === false) {
							nextCount = $makeMap(ptrType$11.keyFor, []);
						}
						_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$11.keyFor(_key$2)] = { k: _key$2, v: 1 };
						if ((_entry$3 = count[ptrType$11.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
							_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$11.keyFor(_key$3)] = { k: _key$3, v: 2 };
						}
						index = sliceType$13.nil;
						index = $appendSlice(index, scan.index);
						index = $append(index, i);
						next = $append(next, new fieldScan.ptr(styp, index));
						_i$1++;
					/* } */ $s = 7; continue; case 8:
					_i++;
				/* } */ $s = 3; continue; case 4:
				if (ok) {
					/* break; */ $s = 2; continue;
				}
			/* } */ $s = 1; continue; case 2:
			$s = -1; return [result, ok];
			/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
		structType.ptr.prototype.FieldByName = function(name$1) {
			var _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasEmbeds, i, name$1, present, t, tf, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasEmbeds = $f.hasEmbeds; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			name$1 = [name$1];
			f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
			present = false;
			t = this;
			hasEmbeds = false;
			if (!(name$1[0] === "")) {
				_ref = t.fields;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					if ($clone(tf.name, name).name() === name$1[0]) {
						_tmp = $clone(t.Field(i), StructField);
						_tmp$1 = true;
						StructField.copy(f, _tmp);
						present = _tmp$1;
						$s = -1; return [f, present];
					}
					if (tf.embedded()) {
						hasEmbeds = true;
					}
					_i++;
				}
			}
			if (!hasEmbeds) {
				$s = -1; return [f, present];
			}
			_r = t.FieldByNameFunc((function(name$1) { return function(s) {
				var s;
				return s === name$1[0];
			}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			StructField.copy(f, _tuple[0]);
			present = _tuple[1];
			$s = -1; return [f, present];
			/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasEmbeds = hasEmbeds; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
		PtrTo = function(t) {
			var t;
			return $assertType(t, ptrType$1).ptrTo();
		};
		$pkg.PtrTo = PtrTo;
		rtype.ptr.prototype.Implements = function(u) {
			var _r, t, u, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			if ($interfaceIsEqual(u, $ifaceNil)) {
				$panic(new $String("reflect: nil type passed to Type.Implements"));
			}
			_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!((_r === 20))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((_r === 20))) { */ case 1:
				$panic(new $String("reflect: non-interface type passed to Type.Implements"));
			/* } */ case 2:
			$s = -1; return implements$1($assertType(u, ptrType$1), t);
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
		rtype.ptr.prototype.AssignableTo = function(u) {
			var _r, t, u, uu, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			if ($interfaceIsEqual(u, $ifaceNil)) {
				$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
			}
			uu = $assertType(u, ptrType$1);
			_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r || implements$1(uu, t);
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
		rtype.ptr.prototype.ConvertibleTo = function(u) {
			var _r, t, u, uu, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			if ($interfaceIsEqual(u, $ifaceNil)) {
				$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
			}
			uu = $assertType(u, ptrType$1);
			_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return !(_r === $throwNilPointerError);
			/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
		};
		rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
		implements$1 = function(T, V) {
			var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
			if (!((T.Kind() === 20))) {
				return false;
			}
			t = (T.kindType);
			if (t.methods.$length === 0) {
				return true;
			}
			if (V.Kind() === 20) {
				v = (V.kindType);
				i = 0;
				j = 0;
				while (true) {
					if (!(j < v.methods.$length)) { break; }
					tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					tmName = $clone(t.rtype.nameOff(tm.name), name);
					vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
					vmName = $clone(V.nameOff(vm.name), name);
					if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
						if (!$clone(tmName, name).isExported()) {
							tmPkgPath = $clone(tmName, name).pkgPath();
							if (tmPkgPath === "") {
								tmPkgPath = $clone(t.pkgPath, name).name();
							}
							vmPkgPath = $clone(vmName, name).pkgPath();
							if (vmPkgPath === "") {
								vmPkgPath = $clone(v.pkgPath, name).name();
							}
							if (!(tmPkgPath === vmPkgPath)) {
								j = j + (1) >> 0;
								continue;
							}
						}
						i = i + (1) >> 0;
						if (i >= t.methods.$length) {
							return true;
						}
					}
					j = j + (1) >> 0;
				}
				return false;
			}
			v$1 = V.uncommon();
			if (v$1 === ptrType$5.nil) {
				return false;
			}
			i$1 = 0;
			vmethods = v$1.methods();
			j$1 = 0;
			while (true) {
				if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
				tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
				tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
				vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
				vmName$1 = $clone(V.nameOff(vm$1.name), name);
				if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
					if (!$clone(tmName$1, name).isExported()) {
						tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
						if (tmPkgPath$1 === "") {
							tmPkgPath$1 = $clone(t.pkgPath, name).name();
						}
						vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
						if (vmPkgPath$1 === "") {
							vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
						}
						if (!(tmPkgPath$1 === vmPkgPath$1)) {
							j$1 = j$1 + (1) >> 0;
							continue;
						}
					}
					i$1 = i$1 + (1) >> 0;
					if (i$1 >= t.methods.$length) {
						return true;
					}
				}
				j$1 = j$1 + (1) >> 0;
			}
			return false;
		};
		directlyAssignable = function(T, V) {
			var T, V, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (T === V) {
				$s = -1; return true;
			}
			if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
				$s = -1; return false;
			}
			_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		};
		haveIdenticalType = function(T, V, cmpTags) {
			var T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (cmpTags) {
				$s = -1; return $interfaceIsEqual(T, V);
			}
			_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
			_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = !((_r$2 === _r$3)); case 3:
			/* */ if (_v) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_v) { */ case 1:
				$s = -1; return false;
			/* } */ case 2:
			_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg = _r$4;
			_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$1 = _r$5;
			_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
		};
		haveIdenticalUnderlyingType = function(T, V, cmpTags) {
			var T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (T === V) {
				$s = -1; return true;
			}
			kind = T.Kind();
			if (!((kind === V.Kind()))) {
				$s = -1; return false;
			}
			if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
				$s = -1; return true;
			}
				_1 = kind;
				/* */ if (_1 === (17)) { $s = 2; continue; }
				/* */ if (_1 === (18)) { $s = 3; continue; }
				/* */ if (_1 === (19)) { $s = 4; continue; }
				/* */ if (_1 === (20)) { $s = 5; continue; }
				/* */ if (_1 === (21)) { $s = 6; continue; }
				/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
				/* */ if (_1 === (25)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_1 === (17)) { */ case 2:
					if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
					_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_v = _r; case 10:
					$s = -1; return _v;
				/* } else if (_1 === (18)) { */ case 3:
					if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
					_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_v$1 = _r$1; case 14:
					/* */ if (_v$1) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_v$1) { */ case 12:
						$s = -1; return true;
					/* } */ case 13:
					if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
					_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_v$2 = _r$2; case 16:
					$s = -1; return _v$2;
				/* } else if (_1 === (19)) { */ case 4:
					t = (T.kindType);
					v = (V.kindType);
					if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
						$s = -1; return false;
					}
					i = 0;
					/* while (true) { */ case 18:
						/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
						_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						/* */ if (!_r$3) { $s = 20; continue; }
						/* */ $s = 21; continue;
						/* if (!_r$3) { */ case 20:
							$s = -1; return false;
						/* } */ case 21:
						i = i + (1) >> 0;
					/* } */ $s = 18; continue; case 19:
					i$1 = 0;
					/* while (true) { */ case 23:
						/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
						_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						/* */ if (!_r$4) { $s = 25; continue; }
						/* */ $s = 26; continue;
						/* if (!_r$4) { */ case 25:
							$s = -1; return false;
						/* } */ case 26:
						i$1 = i$1 + (1) >> 0;
					/* } */ $s = 23; continue; case 24:
					$s = -1; return true;
				/* } else if (_1 === (20)) { */ case 5:
					t$1 = (T.kindType);
					v$1 = (V.kindType);
					if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
						$s = -1; return true;
					}
					$s = -1; return false;
				/* } else if (_1 === (21)) { */ case 6:
					_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
					_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = _r$6; case 28:
					$s = -1; return _v$3;
				/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
					_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$s = -1; return _r$7;
				/* } else if (_1 === (25)) { */ case 8:
					t$2 = (T.kindType);
					v$2 = (V.kindType);
					if (!((t$2.fields.$length === v$2.fields.$length))) {
						$s = -1; return false;
					}
					if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
						$s = -1; return false;
					}
					_ref = t$2.fields;
					_i = 0;
					/* while (true) { */ case 32:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
						i$2 = _i;
						tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
						vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
						if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
							$s = -1; return false;
						}
						_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						/* */ if (!_r$8) { $s = 34; continue; }
						/* */ $s = 35; continue;
						/* if (!_r$8) { */ case 34:
							$s = -1; return false;
						/* } */ case 35:
						if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
							$s = -1; return false;
						}
						if (!((tf.offsetEmbed === vf.offsetEmbed))) {
							$s = -1; return false;
						}
						_i++;
					/* } */ $s = 32; continue; case 33:
					$s = -1; return true;
				/* } */ case 9:
			case 1:
			$s = -1; return false;
			/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		toType = function(t) {
			var t;
			if (t === ptrType$1.nil) {
				return $ifaceNil;
			}
			return t;
		};
		ifaceIndir = function(t) {
			var t;
			return ((t.kind & 32) >>> 0) === 0;
		};
		flag.prototype.kind = function() {
			var f;
			f = this.$val;
			return ((((f & 31) >>> 0) >>> 0));
		};
		$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
		flag.prototype.ro = function() {
			var f;
			f = this.$val;
			if (!((((f & 96) >>> 0) === 0))) {
				return 32;
			}
			return 0;
		};
		$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
		Value.ptr.prototype.pointer = function() {
			var v;
			v = this;
			if (!((v.typ.size === 4)) || !v.typ.pointers()) {
				$panic(new $String("can't call pointer on a non-pointer Value"));
			}
			if (!((((v.flag & 128) >>> 0) === 0))) {
				return (v.ptr).$get();
			}
			return v.ptr;
		};
		Value.prototype.pointer = function() { return this.$val.pointer(); };
		ValueError.ptr.prototype.Error = function() {
			var e;
			e = this;
			if (e.Kind === 0) {
				return "reflect: call of " + e.Method + " on zero Value";
			}
			return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
		};
		ValueError.prototype.Error = function() { return this.$val.Error(); };
		flag.prototype.mustBe = function(expected) {
			var expected, f;
			f = this.$val;
			if (!((new flag(f).kind() === expected))) {
				$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
			}
		};
		$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
		flag.prototype.mustBeExported = function() {
			var f;
			f = this.$val;
			if (f === 0) {
				$panic(new ValueError.ptr(methodName(), 0));
			}
			if (!((((f & 96) >>> 0) === 0))) {
				$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
			}
		};
		$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
		flag.prototype.mustBeAssignable = function() {
			var f;
			f = this.$val;
			if (f === 0) {
				$panic(new ValueError.ptr(methodName(), 0));
			}
			if (!((((f & 96) >>> 0) === 0))) {
				$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
			}
			if (((f & 256) >>> 0) === 0) {
				$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
			}
		};
		$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
		Value.ptr.prototype.Addr = function() {
			var v;
			v = this;
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Addr of unaddressable value"));
			}
			return new Value.ptr(v.typ.ptrTo(), v.ptr, (new flag(v.flag).ro() | 22) >>> 0);
		};
		Value.prototype.Addr = function() { return this.$val.Addr(); };
		Value.ptr.prototype.Bool = function() {
			var v;
			v = this;
			new flag(v.flag).mustBe(1);
			return (v.ptr).$get();
		};
		Value.prototype.Bool = function() { return this.$val.Bool(); };
		Value.ptr.prototype.Bytes = function() {
			var _r, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(23);
			_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!((_r === 8))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((_r === 8))) { */ case 1:
				$panic(new $String("reflect.Value.Bytes of non-byte slice"));
			/* } */ case 2:
			$s = -1; return (v.ptr).$get();
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Bytes = function() { return this.$val.Bytes(); };
		Value.ptr.prototype.runes = function() {
			var _r, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(23);
			_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!((_r === 5))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((_r === 5))) { */ case 1:
				$panic(new $String("reflect.Value.Bytes of non-rune slice"));
			/* } */ case 2:
			$s = -1; return (v.ptr).$get();
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.runes = function() { return this.$val.runes(); };
		Value.ptr.prototype.CanAddr = function() {
			var v;
			v = this;
			return !((((v.flag & 256) >>> 0) === 0));
		};
		Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
		Value.ptr.prototype.CanSet = function() {
			var v;
			v = this;
			return ((v.flag & 352) >>> 0) === 256;
		};
		Value.prototype.CanSet = function() { return this.$val.CanSet(); };
		Value.ptr.prototype.Call = function(in$1) {
			var _r, in$1, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(19);
			new flag(v.flag).mustBeExported();
			_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
		Value.ptr.prototype.CallSlice = function(in$1) {
			var _r, in$1, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(19);
			new flag(v.flag).mustBeExported();
			_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
		Value.ptr.prototype.Complex = function() {
			var _1, k, v, x;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (15)) {
				return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
			} else if (_1 === (16)) {
				return (v.ptr).$get();
			}
			$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
		};
		Value.prototype.Complex = function() { return this.$val.Complex(); };
		Value.ptr.prototype.FieldByIndex = function(index) {
			var _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			/* */ if (index.$length === 1) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (index.$length === 1) { */ case 1:
				_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 2:
			new flag(v.flag).mustBe(25);
			_ref = index;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				i = _i;
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				/* */ if (i > 0) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (i > 0) { */ case 6:
					if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
					_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_v = _r$1 === 25; case 10:
					/* */ if (_v) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (_v) { */ case 8:
						if ($clone(v, Value).IsNil()) {
							$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
						}
						_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						v = _r$2;
					/* } */ case 9:
				/* } */ case 7:
				_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				v = _r$3;
				_i++;
			/* } */ $s = 4; continue; case 5:
			$s = -1; return v;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
		Value.ptr.prototype.FieldByName = function(name$1) {
			var _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(25);
			_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			f = $clone(_tuple[0], StructField);
			ok = _tuple[1];
			/* */ if (ok) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (ok) { */ case 2:
				_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } */ case 3:
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
		Value.ptr.prototype.FieldByNameFunc = function(match) {
			var _r, _r$1, _tuple, f, match, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			f = $clone(_tuple[0], StructField);
			ok = _tuple[1];
			/* */ if (ok) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (ok) { */ case 2:
				_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } */ case 3:
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
		Value.ptr.prototype.Float = function() {
			var _1, k, v;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (13)) {
				return ((v.ptr).$get());
			} else if (_1 === (14)) {
				return (v.ptr).$get();
			}
			$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
		};
		Value.prototype.Float = function() { return this.$val.Float(); };
		Value.ptr.prototype.Int = function() {
			var _1, k, p, v;
			v = this;
			k = new flag(v.flag).kind();
			p = v.ptr;
			_1 = k;
			if (_1 === (2)) {
				return (new $Int64(0, (p).$get()));
			} else if (_1 === (3)) {
				return (new $Int64(0, (p).$get()));
			} else if (_1 === (4)) {
				return (new $Int64(0, (p).$get()));
			} else if (_1 === (5)) {
				return (new $Int64(0, (p).$get()));
			} else if (_1 === (6)) {
				return (p).$get();
			}
			$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
		};
		Value.prototype.Int = function() { return this.$val.Int(); };
		Value.ptr.prototype.CanInterface = function() {
			var v;
			v = this;
			if (v.flag === 0) {
				$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
			}
			return ((v.flag & 96) >>> 0) === 0;
		};
		Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
		Value.ptr.prototype.Interface = function() {
			var _r, i, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			i = $ifaceNil;
			v = this;
			_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i = _r;
			$s = -1; return i;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Interface = function() { return this.$val.Interface(); };
		Value.ptr.prototype.IsValid = function() {
			var v;
			v = this;
			return !((v.flag === 0));
		};
		Value.prototype.IsValid = function() { return this.$val.IsValid(); };
		Value.ptr.prototype.Kind = function() {
			var v;
			v = this;
			return new flag(v.flag).kind();
		};
		Value.prototype.Kind = function() { return this.$val.Kind(); };
		Value.ptr.prototype.MapIndex = function(key) {
			var _r, e, fl, k, key, tt, typ, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(21);
			tt = (v.typ.kindType);
			_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			k = 0;
			if (!((((key.flag & 128) >>> 0) === 0))) {
				k = key.ptr;
			} else {
				k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
			}
			e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
			if (e === 0) {
				$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			typ = tt.elem;
			fl = new flag((((v.flag | key.flag) >>> 0))).ro();
			fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
			$s = -1; return copyVal(typ, fl, e);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
		Value.ptr.prototype.MapKeys = function() {
			var _r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(21);
			tt = (v.typ.kindType);
			keyType = tt.key;
			fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
			m = $clone(v, Value).pointer();
			mlen = 0;
			if (!(m === 0)) {
				mlen = maplen(m);
			}
			it = mapiterinit(v.typ, m);
			a = $makeSlice(sliceType$9, mlen);
			i = 0;
			i = 0;
			/* while (true) { */ case 1:
				/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
				_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				key = _r;
				if (key === 0) {
					/* break; */ $s = 2; continue;
				}
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = copyVal(keyType, fl, key));
				mapiternext(it);
				i = i + (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return $subslice(a, 0, i);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
		MapIter.ptr.prototype.Key = function() {
			var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, it, ktype, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; ktype = $f.ktype; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			it = this;
			if (it.it === 0) {
				$panic(new $String("MapIter.Key called before Next"));
			}
			_r = mapiterkey(it.it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_r === 0) { */ case 1:
				$panic(new $String("MapIter.Key called on exhausted iterator"));
			/* } */ case 2:
			t = (it.m.typ.kindType);
			ktype = t.key;
			_arg = ktype;
			_arg$1 = (new flag(it.m.flag).ro() | ((ktype.Kind() >>> 0))) >>> 0;
			_r$1 = mapiterkey(it.it); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$2 = _r$1;
			_r$2 = copyVal(_arg, _arg$1, _arg$2); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: MapIter.ptr.prototype.Key }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.ktype = ktype; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		MapIter.prototype.Key = function() { return this.$val.Key(); };
		MapIter.ptr.prototype.Value = function() {
			var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, it, t, vtype, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; t = $f.t; vtype = $f.vtype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			it = this;
			if (it.it === 0) {
				$panic(new $String("MapIter.Value called before Next"));
			}
			_r = mapiterkey(it.it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_r === 0) { */ case 1:
				$panic(new $String("MapIter.Value called on exhausted iterator"));
			/* } */ case 2:
			t = (it.m.typ.kindType);
			vtype = t.elem;
			_arg = vtype;
			_arg$1 = (new flag(it.m.flag).ro() | ((vtype.Kind() >>> 0))) >>> 0;
			_r$1 = mapitervalue(it.it); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$2 = _r$1;
			_r$2 = copyVal(_arg, _arg$1, _arg$2); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: MapIter.ptr.prototype.Value }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.t = t; $f.vtype = vtype; $f.$s = $s; $f.$r = $r; return $f;
		};
		MapIter.prototype.Value = function() { return this.$val.Value(); };
		MapIter.ptr.prototype.Next = function() {
			var _r, _r$1, it, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; it = $f.it; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			it = this;
			/* */ if (it.it === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (it.it === 0) { */ case 1:
				it.it = mapiterinit(it.m.typ, $clone(it.m, Value).pointer());
				$s = 3; continue;
			/* } else { */ case 2:
				_r = mapiterkey(it.it); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === 0) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (_r === 0) { */ case 4:
					$panic(new $String("MapIter.Next called on exhausted iterator"));
				/* } */ case 5:
				mapiternext(it.it);
			/* } */ case 3:
			_r$1 = mapiterkey(it.it); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return !(_r$1 === 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: MapIter.ptr.prototype.Next }; } $f._r = _r; $f._r$1 = _r$1; $f.it = it; $f.$s = $s; $f.$r = $r; return $f;
		};
		MapIter.prototype.Next = function() { return this.$val.Next(); };
		Value.ptr.prototype.MapRange = function() {
			var v;
			v = this;
			new flag(v.flag).mustBe(21);
			return new MapIter.ptr($clone(v, Value), 0);
		};
		Value.prototype.MapRange = function() { return this.$val.MapRange(); };
		copyVal = function(typ, fl, ptr) {
			var c, fl, ptr, typ;
			if (ifaceIndir(typ)) {
				c = unsafe_New(typ);
				typedmemmove(typ, c, ptr);
				return new Value.ptr(typ, c, (fl | 128) >>> 0);
			}
			return new Value.ptr(typ, (ptr).$get(), fl);
		};
		Value.ptr.prototype.Method = function(i) {
			var fl, i, v;
			v = this;
			if (v.typ === ptrType$1.nil) {
				$panic(new ValueError.ptr("reflect.Value.Method", 0));
			}
			if (!((((v.flag & 512) >>> 0) === 0)) || ((i >>> 0)) >= ((v.typ.NumMethod() >>> 0))) {
				$panic(new $String("reflect: Method index out of range"));
			}
			if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
				$panic(new $String("reflect: Method on nil interface value"));
			}
			fl = (v.flag & 160) >>> 0;
			fl = (fl | (19)) >>> 0;
			fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
			return new Value.ptr(v.typ, v.ptr, fl);
		};
		Value.prototype.Method = function(i) { return this.$val.Method(i); };
		Value.ptr.prototype.NumMethod = function() {
			var v;
			v = this;
			if (v.typ === ptrType$1.nil) {
				$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
			}
			if (!((((v.flag & 512) >>> 0) === 0))) {
				return 0;
			}
			return v.typ.NumMethod();
		};
		Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
		Value.ptr.prototype.MethodByName = function(name$1) {
			var _r, _tuple, m, name$1, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			if (v.typ === ptrType$1.nil) {
				$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
			}
			if (!((((v.flag & 512) >>> 0) === 0))) {
				$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = $clone(_tuple[0], Method);
			ok = _tuple[1];
			if (!ok) {
				$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			$s = -1; return $clone(v, Value).Method(m.Index);
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f._r = _r; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
		Value.ptr.prototype.NumField = function() {
			var tt, v;
			v = this;
			new flag(v.flag).mustBe(25);
			tt = (v.typ.kindType);
			return tt.fields.$length;
		};
		Value.prototype.NumField = function() { return this.$val.NumField(); };
		Value.ptr.prototype.OverflowComplex = function(x) {
			var _1, k, v, x;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (15)) {
				return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
			} else if (_1 === (16)) {
				return false;
			}
			$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
		};
		Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
		Value.ptr.prototype.OverflowFloat = function(x) {
			var _1, k, v, x;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (13)) {
				return overflowFloat32(x);
			} else if (_1 === (14)) {
				return false;
			}
			$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
		};
		Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
		overflowFloat32 = function(x) {
			var x;
			if (x < 0) {
				x = -x;
			}
			return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
		};
		Value.ptr.prototype.OverflowInt = function(x) {
			var _1, bitSize, k, trunc, v, x;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
				bitSize = $imul(v.typ.size, 8) >>> 0;
				trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
				return !((x.$high === trunc.$high && x.$low === trunc.$low));
			}
			$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
		};
		Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
		Value.ptr.prototype.OverflowUint = function(x) {
			var _1, bitSize, k, trunc, v, x;
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
				bitSize = $imul(v.typ.size, 8) >>> 0;
				trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
				return !((x.$high === trunc.$high && x.$low === trunc.$low));
			}
			$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
		};
		Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
		Value.ptr.prototype.Recv = function() {
			var _r, _tuple, ok, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			x = new Value.ptr(ptrType$1.nil, 0, 0);
			ok = false;
			v = this;
			new flag(v.flag).mustBe(18);
			new flag(v.flag).mustBeExported();
			_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			ok = _tuple[1];
			$s = -1; return [x, ok];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Recv = function() { return this.$val.Recv(); };
		Value.ptr.prototype.recv = function(nb) {
			var _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			val = new Value.ptr(ptrType$1.nil, 0, 0);
			ok = false;
			v = this;
			tt = (v.typ.kindType);
			if ((((tt.dir >> 0)) & 1) === 0) {
				$panic(new $String("reflect: recv on send-only channel"));
			}
			t = tt.elem;
			val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
			p = 0;
			if (ifaceIndir(t)) {
				p = unsafe_New(t);
				val.ptr = p;
				val.flag = (val.flag | (128)) >>> 0;
			} else {
				p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
			}
			_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			selected = _tuple[0];
			ok = _tuple[1];
			if (!selected) {
				val = new Value.ptr(ptrType$1.nil, 0, 0);
			}
			$s = -1; return [val, ok];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
		Value.ptr.prototype.Send = function(x) {
			var _r, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(18);
			new flag(v.flag).mustBeExported();
			_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Send = function(x) { return this.$val.Send(x); };
		Value.ptr.prototype.send = function(x, nb) {
			var _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			selected = false;
			v = this;
			tt = (v.typ.kindType);
			if ((((tt.dir >> 0)) & 2) === 0) {
				$panic(new $String("reflect: send on recv-only channel"));
			}
			new flag(x.flag).mustBeExported();
			_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			p = 0;
			if (!((((x.flag & 128) >>> 0) === 0))) {
				p = x.ptr;
			} else {
				p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
			}
			_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			selected = _r$1;
			$s = -1; return selected;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
		Value.ptr.prototype.SetBool = function(x) {
			var v, x;
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(v.flag).mustBe(1);
			(v.ptr).$set(x);
		};
		Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
		Value.ptr.prototype.setRunes = function(x) {
			var _r, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(v.flag).mustBe(23);
			_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!((_r === 5))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((_r === 5))) { */ case 1:
				$panic(new $String("reflect.Value.setRunes of non-rune slice"));
			/* } */ case 2:
			(v.ptr).$set(x);
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
		Value.ptr.prototype.SetComplex = function(x) {
			var _1, k, v, x;
			v = this;
			new flag(v.flag).mustBeAssignable();
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (15)) {
				(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
			} else if (_1 === (16)) {
				(v.ptr).$set(x);
			} else {
				$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
			}
		};
		Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
		Value.ptr.prototype.SetFloat = function(x) {
			var _1, k, v, x;
			v = this;
			new flag(v.flag).mustBeAssignable();
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (13)) {
				(v.ptr).$set(($fround(x)));
			} else if (_1 === (14)) {
				(v.ptr).$set(x);
			} else {
				$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
			}
		};
		Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
		Value.ptr.prototype.SetInt = function(x) {
			var _1, k, v, x;
			v = this;
			new flag(v.flag).mustBeAssignable();
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (2)) {
				(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
			} else if (_1 === (3)) {
				(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
			} else if (_1 === (4)) {
				(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
			} else if (_1 === (5)) {
				(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
			} else if (_1 === (6)) {
				(v.ptr).$set(x);
			} else {
				$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
			}
		};
		Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
		Value.ptr.prototype.SetMapIndex = function(key, val) {
			var _r, _r$1, e, k, key, tt, v, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(21);
			new flag(v.flag).mustBeExported();
			new flag(key.flag).mustBeExported();
			tt = (v.typ.kindType);
			_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			k = 0;
			if (!((((key.flag & 128) >>> 0) === 0))) {
				k = key.ptr;
			} else {
				k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
			}
			if (val.typ === ptrType$1.nil) {
				mapdelete(v.typ, $clone(v, Value).pointer(), k);
				$s = -1; return;
			}
			new flag(val.flag).mustBeExported();
			_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
			e = 0;
			if (!((((val.flag & 128) >>> 0) === 0))) {
				e = val.ptr;
			} else {
				e = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
			}
			$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
		Value.ptr.prototype.SetUint = function(x) {
			var _1, k, v, x;
			v = this;
			new flag(v.flag).mustBeAssignable();
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (7)) {
				(v.ptr).$set(((x.$low >>> 0)));
			} else if (_1 === (8)) {
				(v.ptr).$set(((x.$low << 24 >>> 24)));
			} else if (_1 === (9)) {
				(v.ptr).$set(((x.$low << 16 >>> 16)));
			} else if (_1 === (10)) {
				(v.ptr).$set(((x.$low >>> 0)));
			} else if (_1 === (11)) {
				(v.ptr).$set(x);
			} else if (_1 === (12)) {
				(v.ptr).$set(((x.$low >>> 0)));
			} else {
				$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
			}
		};
		Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
		Value.ptr.prototype.SetPointer = function(x) {
			var v, x;
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(v.flag).mustBe(26);
			(v.ptr).$set(x);
		};
		Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
		Value.ptr.prototype.SetString = function(x) {
			var v, x;
			v = this;
			new flag(v.flag).mustBeAssignable();
			new flag(v.flag).mustBe(24);
			(v.ptr).$set(x);
		};
		Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
		Value.ptr.prototype.String = function() {
			var _1, _r, k, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			if (_1 === (0)) {
				$s = -1; return "<invalid Value>";
			} else if (_1 === (24)) {
				$s = -1; return (v.ptr).$get();
			}
			_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return "<" + _r + " Value>";
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.String = function() { return this.$val.String(); };
		Value.ptr.prototype.TryRecv = function() {
			var _r, _tuple, ok, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			x = new Value.ptr(ptrType$1.nil, 0, 0);
			ok = false;
			v = this;
			new flag(v.flag).mustBe(18);
			new flag(v.flag).mustBeExported();
			_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			ok = _tuple[1];
			$s = -1; return [x, ok];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
		Value.ptr.prototype.TrySend = function(x) {
			var _r, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			new flag(v.flag).mustBe(18);
			new flag(v.flag).mustBeExported();
			_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
		Value.ptr.prototype.Type = function() {
			var f, i, m, m$1, ms, tt, v, x;
			v = this;
			f = v.flag;
			if (f === 0) {
				$panic(new ValueError.ptr("reflect.Value.Type", 0));
			}
			if (((f & 512) >>> 0) === 0) {
				return v.typ;
			}
			i = ((v.flag >> 0)) >> 10 >> 0;
			if (v.typ.Kind() === 20) {
				tt = (v.typ.kindType);
				if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
					$panic(new $String("reflect: internal error: invalid method index"));
				}
				m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				return v.typ.typeOff(m.typ);
			}
			ms = v.typ.exportedMethods();
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			return v.typ.typeOff(m$1.mtyp);
		};
		Value.prototype.Type = function() { return this.$val.Type(); };
		Value.ptr.prototype.Uint = function() {
			var _1, k, p, v, x;
			v = this;
			k = new flag(v.flag).kind();
			p = v.ptr;
			_1 = k;
			if (_1 === (7)) {
				return (new $Uint64(0, (p).$get()));
			} else if (_1 === (8)) {
				return (new $Uint64(0, (p).$get()));
			} else if (_1 === (9)) {
				return (new $Uint64(0, (p).$get()));
			} else if (_1 === (10)) {
				return (new $Uint64(0, (p).$get()));
			} else if (_1 === (11)) {
				return (p).$get();
			} else if (_1 === (12)) {
				return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
			}
			$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
		};
		Value.prototype.Uint = function() { return this.$val.Uint(); };
		Value.ptr.prototype.UnsafeAddr = function() {
			var v;
			v = this;
			if (v.typ === ptrType$1.nil) {
				$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
			}
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
			}
			return (v.ptr);
		};
		Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
		typesMustMatch = function(what, t1, t2) {
			var _r, _r$1, t1, t2, what, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
				_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$panic(new $String(what + ": " + _r + " != " + _r$1));
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
		};
		grow = function(s, extra) {
			var _q, _r, _r$1, _r$2, extra, i0, i1, m, s, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; extra = $f.extra; i0 = $f.i0; i1 = $f.i1; m = $f.m; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			i0 = $clone(s, Value).Len();
			i1 = i0 + extra >> 0;
			if (i1 < i0) {
				$panic(new $String("reflect.Append: slice overflow"));
			}
			m = $clone(s, Value).Cap();
			/* */ if (i1 <= m) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (i1 <= m) { */ case 1:
				_r = $clone(s, Value).Slice(0, i1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return [_r, i0, i1];
			/* } */ case 2:
			if (m === 0) {
				m = extra;
			} else {
				while (true) {
					if (!(m < i1)) { break; }
					if (i0 < 1024) {
						m = m + (m) >> 0;
					} else {
						m = m + ((_q = m / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
					}
				}
			}
			_r$1 = MakeSlice($clone(s, Value).Type(), i1, m); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = _r$1;
			_r$2 = Copy($clone(t, Value), $clone(s, Value)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return [t, i0, i1];
			/* */ } return; } if ($f === undefined) { $f = { $blk: grow }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.extra = extra; $f.i0 = i0; $f.i1 = i1; $f.m = m; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Append = function(s, x) {
			var _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i0, i1, j, s, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i0 = $f.i0; i1 = $f.i1; j = $f.j; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			new flag(s.flag).mustBe(23);
			_r = grow($clone(s, Value), x.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			s = _tuple[0];
			i0 = _tuple[1];
			i1 = _tuple[2];
			_tmp = i0;
			_tmp$1 = 0;
			i = _tmp;
			j = _tmp$1;
			/* while (true) { */ case 2:
				/* if (!(i < i1)) { break; } */ if(!(i < i1)) { $s = 3; continue; }
				_r$1 = $clone(s, Value).Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = $clone(_r$1, Value).Set($clone(((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]), Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$2 = i + 1 >> 0;
				_tmp$3 = j + 1 >> 0;
				i = _tmp$2;
				j = _tmp$3;
			/* } */ $s = 2; continue; case 3:
			$s = -1; return s;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Append }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.j = j; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Append = Append;
		MakeMap = function(typ) {
			var _r, typ, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = MakeMapWithSize(typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMap }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.MakeMap = MakeMap;
		MakeMapWithSize = function(typ, n) {
			var _r, m, n, t, typ, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; m = $f.m; n = $f.n; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!((_r === 21))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((_r === 21))) { */ case 1:
				$panic(new $String("reflect.MakeMapWithSize of non-map type"));
			/* } */ case 2:
			t = $assertType(typ, ptrType$1);
			m = makemap(t, n);
			$s = -1; return new Value.ptr(t, m, 21);
			/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMapWithSize }; } $f._r = _r; $f.m = m; $f.n = n; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.MakeMapWithSize = MakeMapWithSize;
		Indirect = function(v) {
			var _r, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (!(($clone(v, Value).Kind() === 22))) {
				$s = -1; return v;
			}
			_r = $clone(v, Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Indirect }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Indirect = Indirect;
		New = function(typ) {
			var fl, ptr, t, typ;
			if ($interfaceIsEqual(typ, $ifaceNil)) {
				$panic(new $String("reflect: New(nil)"));
			}
			t = $assertType(typ, ptrType$1);
			ptr = unsafe_New(t);
			fl = 22;
			return new Value.ptr(t.ptrTo(), ptr, fl);
		};
		$pkg.New = New;
		Value.ptr.prototype.Convert = function(t) {
			var _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = this;
			/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
				_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				v = _r;
			/* } */ case 2:
			_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			op = _r$2;
			/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (op === $throwNilPointerError) { */ case 6:
				_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
			/* } */ case 7:
			_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
		convertOp = function(dst, src) {
			var _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_1 = src.Kind();
				/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
				/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
				/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
				/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
				/* */ if (_1 === (24)) { $s = 6; continue; }
				/* */ if (_1 === (23)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
					_2 = dst.Kind();
					if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
						$s = -1; return cvtInt;
					} else if ((_2 === (13)) || (_2 === (14))) {
						$s = -1; return cvtIntFloat;
					} else if (_2 === (24)) {
						$s = -1; return cvtIntString;
					}
					$s = 8; continue;
				/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
					_3 = dst.Kind();
					if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
						$s = -1; return cvtUint;
					} else if ((_3 === (13)) || (_3 === (14))) {
						$s = -1; return cvtUintFloat;
					} else if (_3 === (24)) {
						$s = -1; return cvtUintString;
					}
					$s = 8; continue;
				/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
					_4 = dst.Kind();
					if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
						$s = -1; return cvtFloatInt;
					} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
						$s = -1; return cvtFloatUint;
					} else if ((_4 === (13)) || (_4 === (14))) {
						$s = -1; return cvtFloat;
					}
					$s = 8; continue;
				/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
					_5 = dst.Kind();
					if ((_5 === (15)) || (_5 === (16))) {
						$s = -1; return cvtComplex;
					}
					$s = 8; continue;
				/* } else if (_1 === (24)) { */ case 6:
					if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
					_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_v = _r === ""; case 11:
					/* */ if (_v) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (_v) { */ case 9:
							_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							_6 = _r$1;
							if (_6 === (8)) {
								$s = -1; return cvtStringBytes;
							} else if (_6 === (5)) {
								$s = -1; return cvtStringRunes;
							}
						case 13:
					/* } */ case 10:
					$s = 8; continue;
				/* } else if (_1 === (23)) { */ case 7:
					if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
					_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_v$1 = _r$2 === ""; case 17:
					/* */ if (_v$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_v$1) { */ case 15:
							_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_7 = _r$3;
							if (_7 === (8)) {
								$s = -1; return cvtBytesString;
							} else if (_7 === (5)) {
								$s = -1; return cvtRunesString;
							}
						case 19:
					/* } */ case 16:
				/* } */ case 8:
			case 1:
			_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (_r$4) { */ case 21:
				$s = -1; return cvtDirect;
			/* } */ case 22:
			if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
			_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg = _r$5;
			_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$1 = _r$6;
			_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_v$2 = _r$7; case 26:
			/* */ if (_v$2) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (_v$2) { */ case 24:
				$s = -1; return cvtDirect;
			/* } */ case 25:
			if (implements$1(dst, src)) {
				if (src.Kind() === 20) {
					$s = -1; return cvtI2I;
				}
				$s = -1; return cvtT2I;
			}
			$s = -1; return $throwNilPointerError;
			/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
		};
		makeFloat = function(f, v, t) {
			var _1, _r, f, ptr, t, typ, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			typ = _r;
			ptr = unsafe_New(typ);
			_1 = typ.size;
			if (_1 === (4)) {
				(ptr).$set(($fround(v)));
			} else if (_1 === (8)) {
				(ptr).$set(v);
			}
			$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		makeComplex = function(f, v, t) {
			var _1, _r, f, ptr, t, typ, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			typ = _r;
			ptr = unsafe_New(typ);
			_1 = typ.size;
			if (_1 === (8)) {
				(ptr).$set((new $Complex64(v.$real, v.$imag)));
			} else if (_1 === (16)) {
				(ptr).$set(v);
			}
			$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		makeString = function(f, v, t) {
			var _r, f, ret, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			$clone(ret, Value).SetString(v);
			ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
			$s = -1; return ret;
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f._r = _r; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		makeBytes = function(f, v, t) {
			var _r, f, ret, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			$r = $clone(ret, Value).SetBytes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
			$s = -1; return ret;
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f._r = _r; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		makeRunes = function(f, v, t) {
			var _r, f, ret, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			$r = $clone(ret, Value).setRunes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
			$s = -1; return ret;
			/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f._r = _r; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtInt = function(v, t) {
			var _r, t, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeInt(new flag(v.flag).ro(), ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtUint = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeInt(new flag(v.flag).ro(), $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtFloatInt = function(v, t) {
			var _r, t, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeInt(new flag(v.flag).ro(), ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtFloatUint = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeInt(new flag(v.flag).ro(), (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtIntFloat = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtUintFloat = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtFloat = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeFloat(new flag(v.flag).ro(), $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtComplex = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeComplex(new flag(v.flag).ro(), $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtIntString = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Int().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtUintString = function(v, t) {
			var _r, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Uint().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtBytesString = function(v, t) {
			var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = new flag(v.flag).ro();
			_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = ($bytesToString(_r));
			_arg$2 = t;
			_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtStringBytes = function(v, t) {
			var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = new flag(v.flag).ro();
			_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = (new sliceType$15($stringToBytes(_r)));
			_arg$2 = t;
			_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtRunesString = function(v, t) {
			var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = new flag(v.flag).ro();
			_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = ($runesToString(_r));
			_arg$2 = t;
			_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtStringRunes = function(v, t) {
			var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = new flag(v.flag).ro();
			_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = (new sliceType$18($stringToRunes(_r)));
			_arg$2 = t;
			_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtT2I = function(v, typ) {
			var _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			target = _r$1;
			_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x = _r$2;
			_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$3 === 0) { */ case 4:
				(target).$set(x);
				$s = 6; continue;
			/* } else { */ case 5:
				ifaceE2I($assertType(typ, ptrType$1), x, target);
			/* } */ case 6:
			_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(_r$4, target, (((new flag(v.flag).ro() | 128) >>> 0) | 20) >>> 0);
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		cvtI2I = function(v, typ) {
			var _r, _r$1, _r$2, ret, typ, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if ($clone(v, Value).IsNil()) { */ case 1:
				_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				ret = _r;
				ret.flag = (ret.flag | (new flag(v.flag).ro())) >>> 0;
				$s = -1; return ret;
			/* } */ case 2:
			_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		ptrType$5.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}];
		ptrType$8.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
		name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int, $String], [ptrType$4], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
		ptrType$7.methods = [{prop: "skipUntilValidKey", name: "skipUntilValidKey", pkg: "reflect", typ: $funcType([], [], false)}];
		Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
		ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
		ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
		ptrType$9.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
		ptrType$18.methods = [{prop: "offset", name: "offset", pkg: "reflect", typ: $funcType([], [$Uintptr], false)}, {prop: "embedded", name: "embedded", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
		ptrType$11.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
		StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
		Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$8], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$18], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "MapRange", name: "MapRange", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$18], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
		flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "reflect", typ: $funcType([], [flag], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
		ptrType$20.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
		ptrType$19.methods = [{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([], [$Bool], false)}];
		uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "xcount", name: "xcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", embedded: false, exported: false, typ: sliceType$5, tag: ""}]);
		funcType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
		name.init("reflect", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: ptrType$4, tag: ""}]);
		nameData.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", embedded: false, exported: false, typ: $Bool, tag: ""}]);
		mapIter.init("reflect", [{prop: "t", name: "t", embedded: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
		Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}]);
		rtype.init("reflect", [{prop: "size", name: "size", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", embedded: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", embedded: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "gcdata", name: "gcdata", embedded: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", embedded: false, exported: false, typ: typeOff, tag: ""}]);
		typeAlg.init("reflect", [{prop: "hash", name: "hash", embedded: false, exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", embedded: false, exported: false, typ: funcType$5, tag: ""}]);
		method.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", embedded: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", embedded: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", embedded: false, exported: false, typ: textOff, tag: ""}]);
		arrayType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
		chanType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
		imethod.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: typeOff, tag: ""}]);
		interfaceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", embedded: false, exported: false, typ: sliceType$6, tag: ""}]);
		mapType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "flags", name: "flags", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
		ptrType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
		sliceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
		structField.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetEmbed", name: "offsetEmbed", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
		structType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
		Method.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}]);
		StructField.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", embedded: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", embedded: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Anonymous", name: "Anonymous", embedded: false, exported: true, typ: $Bool, tag: ""}]);
		fieldScan.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$11, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: sliceType$13, tag: ""}]);
		Value.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", embedded: true, exported: false, typ: flag, tag: ""}]);
		ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", embedded: false, exported: true, typ: Kind, tag: ""}]);
		MapIter.init("reflect", [{prop: "m", name: "m", embedded: false, exported: false, typ: Value, tag: ""}, {prop: "it", name: "it", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = unicode.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			nameOffList = sliceType$1.nil;
			typeOffList = sliceType$2.nil;
			initialized = false;
			uncommonTypeMap = {};
			nameMap = {};
			callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
			selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
			jsObjectPtr = reflectType($jsObjectPtr);
			kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
			uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
			$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["io"] = (function() {
		var $pkg = {}, $init, errors, sync, atomic, errWhence, errOffset;
		errors = $packages["errors"];
		sync = $packages["sync"];
		atomic = $packages["sync/atomic"];
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$pkg.ErrShortWrite = errors.New("short write");
			$pkg.ErrShortBuffer = errors.New("short buffer");
			$pkg.EOF = errors.New("EOF");
			$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
			$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
			errWhence = errors.New("Seek: invalid whence");
			errOffset = errors.New("Seek: invalid offset");
			$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["strings"] = (function() {
		var $pkg = {}, $init, errors, js, bytealg, io, sync, unicode, utf8, Builder, ptrType, sliceType, sliceType$1, Index, Count, explode, genSplit, SplitN, Split, Join, HasSuffix, Map, ToUpper, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, TrimSpace, TrimSuffix, EqualFold;
		errors = $packages["errors"];
		js = $packages["github.com/gopherjs/gopherjs/js"];
		bytealg = $packages["internal/bytealg"];
		io = $packages["io"];
		sync = $packages["sync"];
		unicode = $packages["unicode"];
		utf8 = $packages["unicode/utf8"];
		Builder = $pkg.Builder = $newType(0, $kindStruct, "strings.Builder", true, "strings", true, function(addr_, buf_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.addr = ptrType.nil;
				this.buf = sliceType.nil;
				return;
			}
			this.addr = addr_;
			this.buf = buf_;
		});
		ptrType = $ptrType(Builder);
		sliceType = $sliceType($Uint8);
		sliceType$1 = $sliceType($String);
		Index = function(s, sep) {
			var s, sep;
			return $parseInt(s.indexOf(sep)) >> 0;
		};
		$pkg.Index = Index;
		Count = function(s, sep) {
			var n, pos, s, sep;
			n = 0;
			if ((sep.length === 0)) {
				return utf8.RuneCountInString(s) + 1 >> 0;
			} else if (sep.length > s.length) {
				return 0;
			} else if ((sep.length === s.length)) {
				if (sep === s) {
					return 1;
				}
				return 0;
			}
			while (true) {
				pos = Index(s, sep);
				if (pos === -1) {
					break;
				}
				n = n + (1) >> 0;
				s = $substring(s, (pos + sep.length >> 0));
			}
			return n;
		};
		$pkg.Count = Count;
		Builder.ptr.prototype.String = function() {
			var b;
			b = this;
			return ($bytesToString(b.buf));
		};
		Builder.prototype.String = function() { return this.$val.String(); };
		Builder.ptr.prototype.copyCheck = function() {
			var b;
			b = this;
			if (b.addr === ptrType.nil) {
				b.addr = b;
			} else if (!(b.addr === b)) {
				$panic(new $String("strings: illegal use of non-zero Builder copied by value"));
			}
		};
		Builder.prototype.copyCheck = function() { return this.$val.copyCheck(); };
		Builder.ptr.prototype.Len = function() {
			var b;
			b = this;
			return b.buf.$length;
		};
		Builder.prototype.Len = function() { return this.$val.Len(); };
		Builder.ptr.prototype.Cap = function() {
			var b;
			b = this;
			return b.buf.$capacity;
		};
		Builder.prototype.Cap = function() { return this.$val.Cap(); };
		Builder.ptr.prototype.Reset = function() {
			var b;
			b = this;
			b.addr = ptrType.nil;
			b.buf = sliceType.nil;
		};
		Builder.prototype.Reset = function() { return this.$val.Reset(); };
		Builder.ptr.prototype.grow = function(n) {
			var b, buf, n;
			b = this;
			buf = $makeSlice(sliceType, b.buf.$length, (($imul(2, b.buf.$capacity)) + n >> 0));
			$copySlice(buf, b.buf);
			b.buf = buf;
		};
		Builder.prototype.grow = function(n) { return this.$val.grow(n); };
		Builder.ptr.prototype.Grow = function(n) {
			var b, n;
			b = this;
			b.copyCheck();
			if (n < 0) {
				$panic(new $String("strings.Builder.Grow: negative count"));
			}
			if ((b.buf.$capacity - b.buf.$length >> 0) < n) {
				b.grow(n);
			}
		};
		Builder.prototype.Grow = function(n) { return this.$val.Grow(n); };
		Builder.ptr.prototype.Write = function(p) {
			var b, p;
			b = this;
			b.copyCheck();
			b.buf = $appendSlice(b.buf, p);
			return [p.$length, $ifaceNil];
		};
		Builder.prototype.Write = function(p) { return this.$val.Write(p); };
		Builder.ptr.prototype.WriteByte = function(c) {
			var b, c;
			b = this;
			b.copyCheck();
			b.buf = $append(b.buf, c);
			return $ifaceNil;
		};
		Builder.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
		Builder.ptr.prototype.WriteRune = function(r) {
			var b, l, n, r;
			b = this;
			b.copyCheck();
			if (r < 128) {
				b.buf = $append(b.buf, ((r << 24 >>> 24)));
				return [1, $ifaceNil];
			}
			l = b.buf.$length;
			if ((b.buf.$capacity - l >> 0) < 4) {
				b.grow(4);
			}
			n = utf8.EncodeRune($subslice(b.buf, l, (l + 4 >> 0)), r);
			b.buf = $subslice(b.buf, 0, (l + n >> 0));
			return [n, $ifaceNil];
		};
		Builder.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
		Builder.ptr.prototype.WriteString = function(s) {
			var b, s;
			b = this;
			b.copyCheck();
			b.buf = $appendSlice(b.buf, s);
			return [s.length, $ifaceNil];
		};
		Builder.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
		explode = function(s, n) {
			var _tuple, a, ch, i, l, n, s, size, x;
			l = utf8.RuneCountInString(s);
			if (n < 0 || n > l) {
				n = l;
			}
			a = $makeSlice(sliceType$1, n);
			i = 0;
			while (true) {
				if (!(i < (n - 1 >> 0))) { break; }
				_tuple = utf8.DecodeRuneInString(s);
				ch = _tuple[0];
				size = _tuple[1];
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, size));
				s = $substring(s, size);
				if (ch === 65533) {
					((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
				}
				i = i + (1) >> 0;
			}
			if (n > 0) {
				(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = s));
			}
			return a;
		};
		genSplit = function(s, sep, sepSave, n) {
			var a, i, m, n, s, sep, sepSave;
			if (n === 0) {
				return sliceType$1.nil;
			}
			if (sep === "") {
				return explode(s, n);
			}
			if (n < 0) {
				n = Count(s, sep) + 1 >> 0;
			}
			a = $makeSlice(sliceType$1, n);
			n = n - (1) >> 0;
			i = 0;
			while (true) {
				if (!(i < n)) { break; }
				m = Index(s, sep);
				if (m < 0) {
					break;
				}
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, (m + sepSave >> 0)));
				s = $substring(s, (m + sep.length >> 0));
				i = i + (1) >> 0;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = s);
			return $subslice(a, 0, (i + 1 >> 0));
		};
		SplitN = function(s, sep, n) {
			var n, s, sep;
			return genSplit(s, sep, 0, n);
		};
		$pkg.SplitN = SplitN;
		Split = function(s, sep) {
			var s, sep;
			return genSplit(s, sep, 0, -1);
		};
		$pkg.Split = Split;
		Join = function(a, sep) {
			var _1, _i, _ref, a, b, i, n, s, sep;
			_1 = a.$length;
			if (_1 === (0)) {
				return "";
			} else if (_1 === (1)) {
				return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
			}
			n = $imul(sep.length, ((a.$length - 1 >> 0)));
			i = 0;
			while (true) {
				if (!(i < a.$length)) { break; }
				n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
				i = i + (1) >> 0;
			}
			b = new Builder.ptr(ptrType.nil, sliceType.nil);
			b.Grow(n);
			b.WriteString((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
			_ref = $subslice(a, 1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				b.WriteString(sep);
				b.WriteString(s);
				_i++;
			}
			return b.String();
		};
		$pkg.Join = Join;
		HasSuffix = function(s, suffix) {
			var s, suffix;
			return s.length >= suffix.length && $substring(s, (s.length - suffix.length >> 0)) === suffix;
		};
		$pkg.HasSuffix = HasSuffix;
		Map = function(mapping, s) {
			var _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, r, r$1, s, width, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _rune = $f._rune; _rune$1 = $f._rune$1; _tuple = $f._tuple; b = $f.b; c = $f.c; c$1 = $f.c$1; i = $f.i; mapping = $f.mapping; r = $f.r; r$1 = $f.r$1; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			b = new Builder.ptr(ptrType.nil, sliceType.nil);
			_ref = s;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				r = _r;
				if ((r === c) && !((c === 65533))) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				width = 0;
				if (c === 65533) {
					_tuple = utf8.DecodeRuneInString($substring(s, i));
					c = _tuple[0];
					width = _tuple[1];
					if (!((width === 1)) && (r === c)) {
						_i += _rune[1];
						/* continue; */ $s = 1; continue;
					}
				} else {
					width = utf8.RuneLen(c);
				}
				b.Grow(s.length + 4 >> 0);
				b.WriteString($substring(s, 0, i));
				if (r >= 0) {
					b.WriteRune(r);
				}
				s = $substring(s, (i + width >> 0));
				/* break; */ $s = 2; continue;
			/* } */ $s = 1; continue; case 2:
			if (b.Cap() === 0) {
				$s = -1; return s;
			}
			_ref$1 = s;
			_i$1 = 0;
			/* while (true) { */ case 4:
				/* if (!(_i$1 < _ref$1.length)) { break; } */ if(!(_i$1 < _ref$1.length)) { $s = 5; continue; }
				_rune$1 = $decodeRune(_ref$1, _i$1);
				c$1 = _rune$1[0];
				_r$1 = mapping(c$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				r$1 = _r$1;
				if (r$1 >= 0) {
					if (r$1 < 128) {
						b.WriteByte(((r$1 << 24 >>> 24)));
					} else {
						b.WriteRune(r$1);
					}
				}
				_i$1 += _rune$1[1];
			/* } */ $s = 4; continue; case 5:
			$s = -1; return b.String();
			/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._rune = _rune; $f._rune$1 = _rune$1; $f._tuple = _tuple; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.mapping = mapping; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Map = Map;
		ToUpper = function(s) {
			var _r, _tmp, _tmp$1, b, c, c$1, hasLower, i, i$1, isASCII, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; c = $f.c; c$1 = $f.c$1; hasLower = $f.hasLower; i = $f.i; i$1 = $f.i$1; isASCII = $f.isASCII; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tmp = true;
			_tmp$1 = false;
			isASCII = _tmp;
			hasLower = _tmp$1;
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c = s.charCodeAt(i);
				if (c >= 128) {
					isASCII = false;
					break;
				}
				hasLower = hasLower || (c >= 97 && c <= 122);
				i = i + (1) >> 0;
			}
			if (isASCII) {
				if (!hasLower) {
					$s = -1; return s;
				}
				b = new Builder.ptr(ptrType.nil, sliceType.nil);
				b.Grow(s.length);
				i$1 = 0;
				while (true) {
					if (!(i$1 < s.length)) { break; }
					c$1 = s.charCodeAt(i$1);
					if (c$1 >= 97 && c$1 <= 122) {
						c$1 = c$1 - (32) << 24 >>> 24;
					}
					b.WriteByte(c$1);
					i$1 = i$1 + (1) >> 0;
				}
				$s = -1; return b.String();
			}
			_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: ToUpper }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.hasLower = hasLower; $f.i = i; $f.i$1 = i$1; $f.isASCII = isASCII; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.ToUpper = ToUpper;
		TrimLeftFunc = function(s, f) {
			var _r, f, i, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i = _r;
			if (i === -1) {
				$s = -1; return "";
			}
			$s = -1; return $substring(s, i);
			/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.TrimLeftFunc = TrimLeftFunc;
		TrimRightFunc = function(s, f) {
			var _r, _tuple, f, i, s, wid, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i = _r;
			if (i >= 0 && s.charCodeAt(i) >= 128) {
				_tuple = utf8.DecodeRuneInString($substring(s, i));
				wid = _tuple[1];
				i = i + (wid) >> 0;
			} else {
				i = i + (1) >> 0;
			}
			$s = -1; return $substring(s, 0, i);
			/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.TrimRightFunc = TrimRightFunc;
		TrimFunc = function(s, f) {
			var _r, _r$1, f, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.TrimFunc = TrimFunc;
		indexFunc = function(s, f, truth) {
			var _i, _r, _ref, _rune, f, i, r, s, truth, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; f = $f.f; i = $f.i; r = $f.r; s = $f.s; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_ref = s;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r = _rune[0];
				_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === truth) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (_r === truth) { */ case 3:
					$s = -1; return i;
				/* } */ case 4:
				_i += _rune[1];
			/* } */ $s = 1; continue; case 2:
			$s = -1; return -1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
		};
		lastIndexFunc = function(s, f, truth) {
			var _r, _tuple, f, i, r, s, size, truth, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			i = s.length;
			/* while (true) { */ case 1:
				/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
				_tuple = utf8.DecodeLastRuneInString($substring(s, 0, i));
				r = _tuple[0];
				size = _tuple[1];
				i = i - (size) >> 0;
				_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === truth) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (_r === truth) { */ case 3:
					$s = -1; return i;
				/* } */ case 4:
			/* } */ $s = 1; continue; case 2:
			$s = -1; return -1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
		};
		TrimSpace = function(s) {
			var _r, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.TrimSpace = TrimSpace;
		TrimSuffix = function(s, suffix) {
			var s, suffix;
			if (HasSuffix(s, suffix)) {
				return $substring(s, 0, (s.length - suffix.length >> 0));
			}
			return s;
		};
		$pkg.TrimSuffix = TrimSuffix;
		EqualFold = function(s, t) {
			var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
			while (true) {
				if (!(!(s === "") && !(t === ""))) { break; }
				_tmp = 0;
				_tmp$1 = 0;
				sr = _tmp;
				tr = _tmp$1;
				if (s.charCodeAt(0) < 128) {
					_tmp$2 = ((s.charCodeAt(0) >> 0));
					_tmp$3 = $substring(s, 1);
					sr = _tmp$2;
					s = _tmp$3;
				} else {
					_tuple = utf8.DecodeRuneInString(s);
					r = _tuple[0];
					size = _tuple[1];
					_tmp$4 = r;
					_tmp$5 = $substring(s, size);
					sr = _tmp$4;
					s = _tmp$5;
				}
				if (t.charCodeAt(0) < 128) {
					_tmp$6 = ((t.charCodeAt(0) >> 0));
					_tmp$7 = $substring(t, 1);
					tr = _tmp$6;
					t = _tmp$7;
				} else {
					_tuple$1 = utf8.DecodeRuneInString(t);
					r$1 = _tuple$1[0];
					size$1 = _tuple$1[1];
					_tmp$8 = r$1;
					_tmp$9 = $substring(t, size$1);
					tr = _tmp$8;
					t = _tmp$9;
				}
				if (tr === sr) {
					continue;
				}
				if (tr < sr) {
					_tmp$10 = sr;
					_tmp$11 = tr;
					tr = _tmp$10;
					sr = _tmp$11;
				}
				if (tr < 128) {
					if (65 <= sr && sr <= 90 && (tr === ((sr + 97 >> 0) - 65 >> 0))) {
						continue;
					}
					return false;
				}
				r$2 = unicode.SimpleFold(sr);
				while (true) {
					if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
					r$2 = unicode.SimpleFold(r$2);
				}
				if (r$2 === tr) {
					continue;
				}
				return false;
			}
			return s === t;
		};
		$pkg.EqualFold = EqualFold;
		ptrType.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "copyCheck", name: "copyCheck", pkg: "strings", typ: $funcType([], [], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "strings", typ: $funcType([$Int], [], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
		Builder.init("strings", [{prop: "addr", name: "addr", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = bytealg.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = unicode.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["github.com/rocketlaunchr/react/forks/fmtless"] = (function() {
		var $pkg = {}, $init, errors, reflect, strconv, strings, sprintMatch, sliceType, sliceType$1, sliceType$2, sliceType$3, Errorf, Sprintf, splitFmtSpecs, getSpec, fmtI, fmtBytes, fmtString, fmtUEscape, fmtInt, fmtFloat, SRepeat;
		errors = $packages["errors"];
		reflect = $packages["reflect"];
		strconv = $packages["strconv"];
		strings = $packages["strings"];
		sprintMatch = $pkg.sprintMatch = $newType(0, $kindStruct, "fmt.sprintMatch", true, "github.com/rocketlaunchr/react/forks/fmtless", false, function(before_, spec_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.before = "";
				this.spec = "";
				return;
			}
			this.before = before_;
			this.spec = spec_;
		});
		sliceType = $sliceType($Uint8);
		sliceType$1 = $sliceType($String);
		sliceType$2 = $sliceType($emptyInterface);
		sliceType$3 = $sliceType(sprintMatch);
		Errorf = function(format, a) {
			var _r, _r$1, a, format, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Errorf = Errorf;
		Sprintf = function(fmts, args) {
			var _i, _r, _ref, args, bits, fmlist, fmts, i, idx, sm, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; args = $f.args; bits = $f.bits; fmlist = $f.fmlist; fmts = $f.fmts; i = $f.i; idx = $f.idx; sm = $f.sm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			bits = sliceType$1.nil;
			fmlist = splitFmtSpecs(fmts);
			_ref = fmlist;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				idx = _i;
				sm = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), sprintMatch);
				i = $ifaceNil;
				i = $ifaceNil;
				if (idx < args.$length) {
					i = ((idx < 0 || idx >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + idx]);
				}
				_r = $clone(sm, sprintMatch).render(new sliceType$2([i])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				bits = $append(bits, _r);
				_i++;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return strings.Join(bits, "");
			/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.args = args; $f.bits = bits; $f.fmlist = fmlist; $f.fmts = fmts; $f.i = i; $f.idx = idx; $f.sm = sm; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Sprintf = Sprintf;
		sprintMatch.ptr.prototype.render = function(i) {
			var _r, i, spm, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; spm = $f.spm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			spm = this;
			if (spm.spec === "") {
				$s = -1; return spm.before;
			}
			_r = fmtI(spm.spec, (0 >= i.$length ? ($throwRuntimeError("index out of range"), undefined) : i.$array[i.$offset + 0])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return spm.before + _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: sprintMatch.ptr.prototype.render }; } $f._r = _r; $f.i = i; $f.spm = spm; $f.$s = $s; $f.$r = $r; return $f;
		};
		sprintMatch.prototype.render = function(i) { return this.$val.render(i); };
		splitFmtSpecs = function(fmts) {
			var _tuple, bound, fmts, i, lastMatch, lm, matches, ok, percent, sm, spec, window;
			lastMatch = 0;
			window = sliceType.nil;
			matches = sliceType$3.nil;
			percent = 37;
			i = 0;
			while (true) {
				if (!(i < fmts.length)) { break; }
				bound = i + 3 >> 0;
				if (bound >= fmts.length) {
					bound = fmts.length;
				}
				window = $subslice((new sliceType($stringToBytes(fmts))), i, bound);
				if (window.$length < 2 || !(((0 >= window.$length ? ($throwRuntimeError("index out of range"), undefined) : window.$array[window.$offset + 0]) === percent))) {
					i = i + (1) >> 0;
					continue;
				}
				_tuple = getSpec(window);
				spec = _tuple[0];
				ok = _tuple[1];
				if (!ok) {
					i = i + (1) >> 0;
					continue;
				}
				sm = new sprintMatch.ptr($substring(fmts, lastMatch, i), spec);
				matches = $append(matches, sm);
				lastMatch = i + sm.spec.length >> 0;
				i = i + ((sm.spec.length - 1 >> 0)) >> 0;
				i = i + (1) >> 0;
			}
			if (lastMatch < fmts.length) {
				lm = new sprintMatch.ptr($substring(fmts, lastMatch), "");
				matches = $append(matches, lm);
			}
			return matches;
		};
		getSpec = function(window) {
			var _1, speclen, window, x;
			if (!(((0 >= window.$length ? ($throwRuntimeError("index out of range"), undefined) : window.$array[window.$offset + 0]) === 37))) {
				return ["", false];
			}
			speclen = 0;
			if (((1 >= window.$length ? ($throwRuntimeError("index out of range"), undefined) : window.$array[window.$offset + 1]) === 43) || ((1 >= window.$length ? ($throwRuntimeError("index out of range"), undefined) : window.$array[window.$offset + 1]) === 35)) {
				speclen = 3;
			} else {
				speclen = 2;
			}
			_1 = (x = speclen - 1 >> 0, ((x < 0 || x >= window.$length) ? ($throwRuntimeError("index out of range"), undefined) : window.$array[window.$offset + x]));
			if ((_1 === (118)) || (_1 === (115)) || (_1 === (113)) || (_1 === (100)) || (_1 === (98)) || (_1 === (102)) || (_1 === (70)) || (_1 === (103)) || (_1 === (71)) || (_1 === (101)) || (_1 === (69)) || (_1 === (111)) || (_1 === (120)) || (_1 === (88)) || (_1 === (85))) {
				return [($bytesToString($subslice(window, 0, speclen))), true];
			} else {
				return ["", false];
			}
		};
		fmtI = function(spec, i) {
			var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, i, spec, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; i = $f.i; spec = $f.spec; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_ref = i;
			/* */ if ($assertType(_ref, reflect.Type, true)[1]) { $s = 1; continue; }
			/* */ if ($assertType(_ref, $error, true)[1]) { $s = 2; continue; }
			/* */ if ($assertType(_ref, $String, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int64, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, reflect.Kind, true)[1]) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ($assertType(_ref, reflect.Type, true)[1]) { */ case 1:
				_arg = spec;
				_r = $assertType(i, reflect.Type).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg$1 = _r;
				_r$1 = fmtString(_arg, _arg$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if ($assertType(_ref, $error, true)[1]) { */ case 2:
				_arg$2 = spec;
				_r$2 = $assertType(i, $error).Error(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$3 = _r$2;
				_r$3 = fmtString(_arg$2, _arg$3); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if ($assertType(_ref, $String, true)[1]) { */ case 3:
				$s = -1; return fmtString(spec, $assertType(i, $String));
			/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 4:
				_r$4 = fmtBytes(spec, $assertType(i, sliceType)); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 5:
				_r$5 = fmtUEscape($assertType(i, $Int32)); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } else if ($assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int64, true)[1]) { */ case 6:
				_r$6 = fmtInt(spec, i); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } else if ($assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1]) { */ case 7:
				$s = -1; return fmtFloat(spec, i);
			/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 8:
				_arg$4 = spec;
				_r$7 = $clone(($assertType(i, reflect.Value)), reflect.Value).Interface(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$5 = _r$7;
				_r$8 = fmtI(_arg$4, _arg$5); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$s = -1; return _r$8;
			/* } else if ($assertType(_ref, reflect.Kind, true)[1]) { */ case 9:
				$panic(new $String("unsupported interface for fmtless.Sprintf (reflect.Kind): " + new reflect.Kind(($assertType(i, reflect.Kind))).String()));
				$s = 11; continue;
			/* } else { */ case 10:
				_r$9 = reflect.TypeOf(i).String(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$panic(new $String("unsupported interface for fmtless.Sprintf: " + _r$9));
			/* } */ case 11:
			$s = -1; return "";
			/* */ } return; } if ($f === undefined) { $f = { $blk: fmtI }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.i = i; $f.spec = spec; $f.$s = $s; $f.$r = $r; return $f;
		};
		fmtBytes = function(spec, i) {
			var _1, _i, _r, _ref, b, b16bytes, bs, i, spec, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _ref = $f._ref; b = $f.b; b16bytes = $f.b16bytes; bs = $f.bs; i = $f.i; spec = $f.spec; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_1 = spec;
				/* */ if (_1 === ("%v") || _1 === ("%q") || _1 === ("%s")) { $s = 2; continue; }
				/* */ if (_1 === ("%x") || _1 === ("%X")) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (_1 === ("%v") || _1 === ("%q") || _1 === ("%s")) { */ case 2:
					$s = -1; return fmtString(spec, ($bytesToString(i)));
				/* } else if (_1 === ("%x") || _1 === ("%X")) { */ case 3:
					b16bytes = sliceType$1.nil;
					_ref = i;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						bs = strconv.FormatInt((new $Int64(0, b)), 16);
						if (bs.length === 1) {
							bs = "0" + bs;
						}
						b16bytes = $append(b16bytes, bs);
						_i++;
					}
					/* */ if (spec === "%X") { $s = 6; continue; }
					/* */ $s = 7; continue;
					/* if (spec === "%X") { */ case 6:
						_r = strings.ToUpper(strings.Join(b16bytes, "")); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						$s = -1; return _r;
					/* } */ case 7:
					$s = -1; return strings.Join(b16bytes, "");
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(new $String("Unsupported spec for []byte: " + spec));
				/* } */ case 5:
			case 1:
			$s = -1; return "";
			/* */ } return; } if ($f === undefined) { $f = { $blk: fmtBytes }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.b = b; $f.b16bytes = b16bytes; $f.bs = bs; $f.i = i; $f.spec = spec; $f.$s = $s; $f.$r = $r; return $f;
		};
		fmtString = function(spec, i) {
			var _1, i, spec;
			_1 = spec;
			if (_1 === ("%s") || _1 === ("%v") || _1 === ("%#v")) {
				return i;
			} else if (_1 === ("%q")) {
				return strconv.Quote(i);
			} else {
				$panic(new $String("Unsupported spec for string: " + spec));
			}
		};
		fmtUEscape = function(r) {
			var _r, r, rcode, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; rcode = $f.rcode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = strings.ToUpper(strconv.FormatInt((new $Int64(0, r)), 16)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			rcode = _r;
			rcode = "U+" + SRepeat("0", 4 - rcode.length >> 0) + rcode;
			$s = -1; return rcode;
			/* */ } return; } if ($f === undefined) { $f = { $blk: fmtUEscape }; } $f._r = _r; $f.r = r; $f.rcode = rcode; $f.$s = $s; $f.$r = $r; return $f;
		};
		fmtInt = function(spec, i) {
			var _1, _r, _ref, base, i, i64, out, spec, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _ref = $f._ref; base = $f.base; i = $f.i; i64 = $f.i64; out = $f.out; spec = $f.spec; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			i64 = new $Int64(0, 0);
			base = 0;
			_ref = i;
			if ($assertType(_ref, $Int, true)[1]) {
				i64 = (new $Int64(0, $assertType(i, $Int)));
			} else if ($assertType(_ref, $Int32, true)[1]) {
				i64 = (new $Int64(0, $assertType(i, $Int32)));
			} else if ($assertType(_ref, $Int64, true)[1]) {
				i64 = $assertType(i, $Int64);
			}
			_1 = spec;
			if (_1 === ("%s") || _1 === ("%d") || _1 === ("%v")) {
				base = 10;
			} else if (_1 === ("%o")) {
				base = 8;
			} else if (_1 === ("%b")) {
				base = 2;
			} else if (_1 === ("%X") || _1 === ("%x")) {
				base = 16;
			}
			out = strconv.FormatInt(i64, base);
			/* */ if (spec === "%X") { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (spec === "%X") { */ case 1:
				_r = strings.ToUpper(out); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				out = _r;
			/* } */ case 2:
			$s = -1; return out;
			/* */ } return; } if ($f === undefined) { $f = { $blk: fmtInt }; } $f._1 = _1; $f._r = _r; $f._ref = _ref; $f.base = base; $f.i = i; $f.i64 = i64; $f.out = out; $f.spec = spec; $f.$s = $s; $f.$r = $r; return $f;
		};
		fmtFloat = function(spec, i) {
			var _1, _ref, bs, i, ifl, spec;
			bs = 0;
			ifl = 0;
			_ref = i;
			if ($assertType(_ref, $Float32, true)[1]) {
				ifl = ($assertType(i, $Float32));
				bs = 32;
			} else if ($assertType(_ref, $Float64, true)[1]) {
				ifl = $assertType(i, $Float64);
				bs = 64;
			} else {
				$panic(new $String("Unpossible"));
			}
			_1 = spec;
			if (_1 === ("%b") || _1 === ("%f") || _1 === ("%F") || _1 === ("%g") || _1 === ("%G") || _1 === ("%e") || _1 === ("%E")) {
				return strconv.FormatFloat(ifl, spec.charCodeAt(1), -1, bs);
			} else if (_1 === ("%s") || _1 === ("%v")) {
				return strconv.FormatFloat(ifl, 102, -1, bs);
			} else {
				$panic(new $String("Unsupported specifier for floats: " + spec));
			}
		};
		SRepeat = function(char$1, repeat) {
			var char$1, i, out, repeat;
			out = new sliceType$1([]);
			i = 0;
			while (true) {
				if (!(i < repeat)) { break; }
				out = $append(out, char$1);
				i = i + (1) >> 0;
			}
			return strings.Join(out, "");
		};
		$pkg.SRepeat = SRepeat;
		sprintMatch.methods = [{prop: "render", name: "render", pkg: "github.com/rocketlaunchr/react/forks/fmtless", typ: $funcType([sliceType$2], [$String], true)}];
		sprintMatch.init("github.com/rocketlaunchr/react/forks/fmtless", [{prop: "before", name: "before", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "spec", name: "spec", embedded: false, exported: false, typ: $String, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = reflect.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["sort"] = (function() {
		var $pkg = {}, $init, reflect, StringSlice, sliceType$2, Search, SearchStrings, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth, Strings;
		reflect = $packages["reflect"];
		StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", true, "sort", true, null);
		sliceType$2 = $sliceType($String);
		Search = function(n, f) {
			var _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tmp = 0;
			_tmp$1 = n;
			i = _tmp;
			j = _tmp$1;
			/* while (true) { */ case 1:
				/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
				h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
				_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!_r) { */ case 3:
					i = h + 1 >> 0;
					$s = 5; continue;
				/* } else { */ case 4:
					j = h;
				/* } */ case 5:
			/* } */ $s = 1; continue; case 2:
			$s = -1; return i;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Search = Search;
		SearchStrings = function(a, x) {
			var _r, a, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			a = [a];
			x = [x];
			_r = Search(a[0].$length, (function(a, x) { return function(i) {
				var i;
				return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
			}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.SearchStrings = SearchStrings;
		StringSlice.prototype.Search = function(x) {
			var _r, p, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			p = this;
			_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
		insertionSort = function(data, a, b) {
			var _r, _v, a, b, data, i, j, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			i = a + 1 >> 0;
			/* while (true) { */ case 1:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
				j = i;
				/* while (true) { */ case 3:
					if (!(j > a)) { _v = false; $s = 5; continue s; }
					_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_v = _r; case 5:
					/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
					$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					j = j - (1) >> 0;
				/* } */ $s = 3; continue; case 4:
				i = i + (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
		};
		siftDown = function(data, lo, hi, first) {
			var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			root = lo;
			/* while (true) { */ case 1:
				child = ($imul(2, root)) + 1 >> 0;
				if (child >= hi) {
					/* break; */ $s = 2; continue;
				}
				if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
				_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* */ if (_v) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (_v) { */ case 3:
					child = child + (1) >> 0;
				/* } */ case 4:
				_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!_r$1) { */ case 7:
					$s = -1; return;
				/* } */ case 8:
				$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				root = child;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
		};
		heapSort = function(data, a, b) {
			var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			first = a;
			lo = 0;
			hi = b - a >> 0;
			i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			/* while (true) { */ case 1:
				/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
				$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i - (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			i$1 = hi - 1 >> 0;
			/* while (true) { */ case 4:
				/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
				$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 - (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
		};
		medianOfThree = function(data, m1, m0, m2) {
			var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_r) { */ case 1:
				$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$1) { */ case 5:
				$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r$2) { */ case 9:
					$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 10:
			/* } */ case 6:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
		};
		doPivot = function(data, lo, hi) {
			var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			midlo = 0;
			midhi = 0;
			m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if ((hi - lo >> 0) > 40) { */ case 1:
				s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			pivot = lo;
			_tmp = lo + 1 >> 0;
			_tmp$1 = hi - 1 >> 0;
			a = _tmp;
			c = _tmp$1;
			/* while (true) { */ case 7:
				if (!(a < c)) { _v = false; $s = 9; continue s; }
				_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 9:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
				a = a + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
			b = a;
			/* while (true) { */ case 11:
				/* while (true) { */ case 13:
					if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
					_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_v$1 = !_r$1; case 15:
					/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
					b = b + (1) >> 0;
				/* } */ $s = 13; continue; case 14:
				/* while (true) { */ case 17:
					if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
					_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_v$2 = _r$2; case 19:
					/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
					c = c - (1) >> 0;
				/* } */ $s = 17; continue; case 18:
				if (b >= c) {
					/* break; */ $s = 12; continue;
				}
				$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b + (1) >> 0;
				c = c - (1) >> 0;
			/* } */ $s = 11; continue; case 12:
			protect = (hi - c >> 0) < 5;
			/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
				dups = 0;
				_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (!_r$3) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!_r$3) { */ case 24:
					$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					c = c + (1) >> 0;
					dups = dups + (1) >> 0;
				/* } */ case 25:
				_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (!_r$4) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (!_r$4) { */ case 28:
					b = b - (1) >> 0;
					dups = dups + (1) >> 0;
				/* } */ case 29:
				_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if (!_r$5) { */ case 31:
					$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					b = b - (1) >> 0;
					dups = dups + (1) >> 0;
				/* } */ case 32:
				protect = dups > 1;
			/* } */ case 23:
			/* */ if (protect) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (protect) { */ case 35:
				/* while (true) { */ case 37:
					/* while (true) { */ case 39:
						if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
						_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_v$3 = !_r$6; case 41:
						/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
						b = b - (1) >> 0;
					/* } */ $s = 39; continue; case 40:
					/* while (true) { */ case 43:
						if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
						_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_v$4 = _r$7; case 45:
						/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
						a = a + (1) >> 0;
					/* } */ $s = 43; continue; case 44:
					if (a >= b) {
						/* break; */ $s = 38; continue;
					}
					$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					a = a + (1) >> 0;
					b = b - (1) >> 0;
				/* } */ $s = 37; continue; case 38:
			/* } */ case 36:
			$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = b - 1 >> 0;
			_tmp$3 = c;
			midlo = _tmp$2;
			midhi = _tmp$3;
			$s = -1; return [midlo, midhi];
			/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		};
		quickSort = function(data, a, b, maxDepth$1) {
			var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* while (true) { */ case 1:
				/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
				/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (maxDepth$1 === 0) { */ case 3:
					$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 4:
				maxDepth$1 = maxDepth$1 - (1) >> 0;
				_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				mlo = _tuple[0];
				mhi = _tuple[1];
				/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
					$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					a = mhi;
					$s = 9; continue;
				/* } else { */ case 8:
					$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					b = mlo;
				/* } */ case 9:
			/* } */ $s = 1; continue; case 2:
			/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((b - a >> 0) > 1) { */ case 12:
				i = a + 6 >> 0;
				/* while (true) { */ case 14:
					/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
					_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (_r$1) { */ case 16:
						$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 17:
					i = i + (1) >> 0;
				/* } */ $s = 14; continue; case 15:
				$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
		};
		Sort = function(data) {
			var _r, data, n, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			n = _r;
			$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Sort = Sort;
		maxDepth = function(n) {
			var depth, i, n;
			depth = 0;
			i = n;
			while (true) {
				if (!(i > 0)) { break; }
				depth = depth + (1) >> 0;
				i = (i >> $min((1), 31)) >> 0;
			}
			return $imul(depth, 2);
		};
		StringSlice.prototype.Len = function() {
			var p;
			p = this;
			return p.$length;
		};
		$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
		StringSlice.prototype.Less = function(i, j) {
			var i, j, p;
			p = this;
			return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		};
		$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
		StringSlice.prototype.Swap = function(i, j) {
			var _tmp, _tmp$1, i, j, p;
			p = this;
			_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
			_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
			((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
		};
		$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
		StringSlice.prototype.Sort = function() {
			var p, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			p = this;
			$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
		};
		$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
		Strings = function(a) {
			var a, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = Sort(($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Strings }; } $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Strings = Strings;
		StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
		StringSlice.init($String);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
		var $pkg = {}, $init, Once, funcType$1, ptrType$4;
		Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.doing = false;
				this.done = false;
				return;
			}
			this.doing = doing_;
			this.done = done_;
		});
		funcType$1 = $funcType([], [], false);
		ptrType$4 = $ptrType(Once);
		Once.ptr.prototype.Do = function(f) {
			var f, o, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			o = [o];
			o[0] = this;
			if (o[0].done) {
				$s = -1; return;
			}
			if (o[0].doing) {
				$panic(new $String("nosync: Do called within f"));
			}
			o[0].doing = true;
			$deferred.push([(function(o) { return function() {
				o[0].doing = false;
				o[0].done = true;
			}; })(o), []]);
			$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		};
		Once.prototype.Do = function(f) { return this.$val.Do(f); };
		ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
		Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", embedded: false, exported: false, typ: $Bool, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $s = $f.$s; $r = $f.$r; } s: while (true) { return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["syscall"] = (function() {
		var $pkg = {}, $init, js, race, runtime, sync, mmapper, Errno, sliceType, sliceType$1, ptrType$2, arrayType$4, structType, ptrType$26, mapType, funcType$2, funcType$3, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envs, mapper, errEAGAIN, errEINVAL, errENOENT, errors, init, printWarning, printToConsole, indexByte, runtime_envs, syscallByName, Syscall, Syscall6, itoa, uitoa, errnoErr, munmap, mmap;
		js = $packages["github.com/gopherjs/gopherjs/js"];
		race = $packages["internal/race"];
		runtime = $packages["runtime"];
		sync = $packages["sync"];
		mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Mutex = new sync.Mutex.ptr(0, 0);
				this.active = false;
				this.mmap = $throwNilPointerError;
				this.munmap = $throwNilPointerError;
				return;
			}
			this.Mutex = Mutex_;
			this.active = active_;
			this.mmap = mmap_;
			this.munmap = munmap_;
		});
		Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
		sliceType = $sliceType($Uint8);
		sliceType$1 = $sliceType($String);
		ptrType$2 = $ptrType($Uint8);
		arrayType$4 = $arrayType($Uint8, 32);
		structType = $structType("syscall", [{prop: "addr", name: "addr", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", embedded: false, exported: false, typ: $Int, tag: ""}]);
		ptrType$26 = $ptrType(mmapper);
		mapType = $mapType(ptrType$2, sliceType);
		funcType$2 = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
		funcType$3 = $funcType([$Uintptr, $Uintptr], [$error], false);
		init = function() {
			$flushConsole = (function() {
				if (!((lineBuffer.$length === 0))) {
					$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
					lineBuffer = sliceType.nil;
				}
			});
		};
		printWarning = function() {
			if (!warningPrinted) {
				$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
			}
			warningPrinted = true;
		};
		printToConsole = function(b) {
			var b, goPrintToConsole, i;
			goPrintToConsole = $global.goPrintToConsole;
			if (!(goPrintToConsole === undefined)) {
				goPrintToConsole(b);
				return;
			}
			lineBuffer = $appendSlice(lineBuffer, b);
			while (true) {
				i = indexByte(lineBuffer, 10);
				if (i === -1) {
					break;
				}
				$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
				lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
			}
		};
		indexByte = function(s, c) {
			var _i, _ref, b, c, i, s;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (b === c) {
					return i;
				}
				_i++;
			}
			return -1;
		};
		runtime_envs = function() {
			var envkeys, envs$1, i, jsEnv, key, process;
			process = $global.process;
			if (process === undefined) {
				return sliceType$1.nil;
			}
			jsEnv = process.env;
			envkeys = $global.Object.keys(jsEnv);
			envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
			i = 0;
			while (true) {
				if (!(i < $parseInt(envkeys.length))) { break; }
				key = $internalize(envkeys[i], $String);
				((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
				i = i + (1) >> 0;
			}
			return envs$1;
		};
		syscallByName = function(name) {
			var name, require, $deferred;
			/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			$deferred.push([(function() {
				$recover();
			}), []]);
			if (syscallModule === null) {
				if (alreadyTriedToLoad) {
					return null;
				}
				alreadyTriedToLoad = true;
				require = $global.require;
				if (require === undefined) {
					$panic(new $String(""));
				}
				syscallModule = require($externalize("syscall", $String));
			}
			return syscallModule[$externalize(name, $String)];
			/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
		};
		Syscall = function(trap, a1, a2, a3) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
			r1 = 0;
			r2 = 0;
			err = 0;
			f = syscallByName("Syscall");
			if (!(f === null)) {
				r = f(trap, a1, a2, a3);
				_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
				_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
				_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
				r1 = _tmp;
				r2 = _tmp$1;
				err = _tmp$2;
				return [r1, r2, err];
			}
			if ((trap === 1) && ((a1 === 1) || (a1 === 2))) {
				array = a2;
				slice = $makeSlice(sliceType, $parseInt(array.length));
				slice.$array = array;
				printToConsole(slice);
				_tmp$3 = (($parseInt(array.length) >>> 0));
				_tmp$4 = 0;
				_tmp$5 = 0;
				r1 = _tmp$3;
				r2 = _tmp$4;
				err = _tmp$5;
				return [r1, r2, err];
			}
			if (trap === 231) {
				runtime.Goexit();
			}
			printWarning();
			_tmp$6 = ((minusOne >>> 0));
			_tmp$7 = 0;
			_tmp$8 = 13;
			r1 = _tmp$6;
			r2 = _tmp$7;
			err = _tmp$8;
			return [r1, r2, err];
		};
		$pkg.Syscall = Syscall;
		Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
			r1 = 0;
			r2 = 0;
			err = 0;
			f = syscallByName("Syscall6");
			if (!(f === null)) {
				r = f(trap, a1, a2, a3, a4, a5, a6);
				_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
				_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
				_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
				r1 = _tmp;
				r2 = _tmp$1;
				err = _tmp$2;
				return [r1, r2, err];
			}
			if (!((trap === 202))) {
				printWarning();
			}
			_tmp$3 = ((minusOne >>> 0));
			_tmp$4 = 0;
			_tmp$5 = 13;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		};
		$pkg.Syscall6 = Syscall6;
		itoa = function(val) {
			var val;
			if (val < 0) {
				return "-" + uitoa(((-val >>> 0)));
			}
			return uitoa(((val >>> 0)));
		};
		uitoa = function(val) {
			var _q, _r, buf, i, val;
			buf = arrayType$4.zero();
			i = 31;
			while (true) {
				if (!(val >= 10)) { break; }
				((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
				i = i - (1) >> 0;
				val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			}
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
			return ($bytesToString($subslice(new sliceType(buf), i)));
		};
		mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
			var _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			sl = [sl];
			data = sliceType.nil;
			err = $ifaceNil;
			m = this;
			if (length <= 0) {
				_tmp = sliceType.nil;
				_tmp$1 = new Errno(22);
				data = _tmp;
				err = _tmp$1;
				$s = -1; return [data, err];
			}
			_r = m.mmap(0, ((length >>> 0)), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			addr = _tuple[0];
			errno = _tuple[1];
			if (!($interfaceIsEqual(errno, $ifaceNil))) {
				_tmp$2 = sliceType.nil;
				_tmp$3 = errno;
				data = _tmp$2;
				err = _tmp$3;
				$s = -1; return [data, err];
			}
			sl[0] = new structType.ptr(addr, length, length);
			b = sl[0];
			p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
			$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
			_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
			_tmp$4 = b;
			_tmp$5 = $ifaceNil;
			data = _tmp$4;
			err = _tmp$5;
			$s = -1; return [data, err];
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		};
		mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
		mmapper.ptr.prototype.Munmap = function(data) {
			var _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			err = $ifaceNil;
			m = this;
			if ((data.$length === 0) || !((data.$length === data.$capacity))) {
				err = new Errno(22);
				$s = -1; return err;
			}
			p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
			$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
			b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
			if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
				err = new Errno(22);
				$s = -1; return err;
			}
			_r = m.munmap((($sliceToArray(b))), ((b.$length >>> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			errno = _r;
			if (!($interfaceIsEqual(errno, $ifaceNil))) {
				err = errno;
				$s = -1; return err;
			}
			delete m.active[ptrType$2.keyFor(p)];
			err = $ifaceNil;
			$s = -1; return err;
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		};
		mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
		Errno.prototype.Error = function() {
			var e, s;
			e = this.$val;
			if (0 <= ((e >> 0)) && ((e >> 0)) < 133) {
				s = ((e < 0 || e >= errors.length) ? ($throwRuntimeError("index out of range"), undefined) : errors[e]);
				if (!(s === "")) {
					return s;
				}
			}
			return "errno " + itoa(((e >> 0)));
		};
		$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
		Errno.prototype.Temporary = function() {
			var e;
			e = this.$val;
			return (e === 4) || (e === 24) || new Errno(e).Timeout();
		};
		$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
		Errno.prototype.Timeout = function() {
			var e;
			e = this.$val;
			return (e === 11) || (e === 11) || (e === 110);
		};
		$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
		errnoErr = function(e) {
			var _1, e;
			_1 = e;
			if (_1 === (0)) {
				return $ifaceNil;
			} else if (_1 === (11)) {
				return errEAGAIN;
			} else if (_1 === (22)) {
				return errEINVAL;
			} else if (_1 === (2)) {
				return errENOENT;
			}
			return new Errno(e);
		};
		munmap = function(addr, length) {
			var _tuple, addr, e1, err, length;
			err = $ifaceNil;
			_tuple = Syscall(11, (addr), (length), 0);
			e1 = _tuple[2];
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			}
			return err;
		};
		mmap = function(addr, length, prot, flags, fd, offset) {
			var _tuple, addr, e1, err, fd, flags, length, offset, prot, r0, xaddr;
			xaddr = 0;
			err = $ifaceNil;
			_tuple = Syscall6(9, (addr), (length), ((prot >>> 0)), ((flags >>> 0)), ((fd >>> 0)), ((offset.$low >>> 0)));
			r0 = _tuple[0];
			e1 = _tuple[2];
			xaddr = (r0);
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			}
			return [xaddr, err];
		};
		ptrType$26.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
		Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
		mmapper.init("syscall", [{prop: "Mutex", name: "Mutex", embedded: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", embedded: false, exported: false, typ: funcType$2, tag: ""}, {prop: "munmap", name: "munmap", embedded: false, exported: false, typ: funcType$3, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			lineBuffer = sliceType.nil;
			syscallModule = null;
			warningPrinted = false;
			alreadyTriedToLoad = false;
			minusOne = -1;
			envs = runtime_envs();
			errEAGAIN = new Errno(11);
			errEINVAL = new Errno(22);
			errENOENT = new Errno(2);
			errors = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "no such device or address", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource temporarily unavailable", "cannot allocate memory", "permission denied", "bad address", "block device required", "device or resource busy", "file exists", "invalid cross-device link", "no such device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "numerical result out of range", "resource deadlock avoided", "file name too long", "no locks available", "function not implemented", "directory not empty", "too many levels of symbolic links", "", "no message of desired type", "identifier removed", "channel number out of range", "level 2 not synchronized", "level 3 halted", "level 3 reset", "link number out of range", "protocol driver not attached", "no CSI structure available", "level 2 halted", "invalid exchange", "invalid request descriptor", "exchange full", "no anode", "invalid request code", "invalid slot", "", "bad font file format", "device not a stream", "no data available", "timer expired", "out of streams resources", "machine is not on the network", "package not installed", "object is remote", "link has been severed", "advertise error", "srmount error", "communication error on send", "protocol error", "multihop attempted", "RFS specific error", "bad message", "value too large for defined data type", "name not unique on network", "file descriptor in bad state", "remote address changed", "can not access a needed shared library", "accessing a corrupted shared library", ".lib section in a.out corrupted", "attempting to link in too many shared libraries", "cannot exec a shared library directly", "invalid or incomplete multibyte or wide character", "interrupted system call should be restarted", "streams pipe error", "too many users", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol", "address already in use", "cannot assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "transport endpoint is already connected", "transport endpoint is not connected", "cannot send after transport endpoint shutdown", "too many references: cannot splice", "connection timed out", "connection refused", "host is down", "no route to host", "operation already in progress", "operation now in progress", "stale NFS file handle", "structure needs cleaning", "not a XENIX named type file", "no XENIX semaphores available", "is a named type file", "remote I/O error", "disk quota exceeded", "no medium found", "wrong medium type", "operation canceled", "required key not available", "key has expired", "key has been revoked", "key was rejected by service", "owner died", "state not recoverable", "operation not possible due to RF-kill"]);
			mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
			init();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["time"] = (function() {
		var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$2, arrayType$3, ptrType$4, ptrType$7, zoneSources, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, startNano, utcLoc, localLoc, localOnce, errLocation, badData, x, init, initLocal, runtimeNano, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseSignedOffset, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, unixTime, Unix, isLeap, norm, Date, div, FixedZone;
		errors = $packages["errors"];
		js = $packages["github.com/gopherjs/gopherjs/js"];
		nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
		runtime = $packages["runtime"];
		syscall = $packages["syscall"];
		ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Layout = "";
				this.Value = "";
				this.LayoutElem = "";
				this.ValueElem = "";
				this.Message = "";
				return;
			}
			this.Layout = Layout_;
			this.Value = Value_;
			this.LayoutElem = LayoutElem_;
			this.ValueElem = ValueElem_;
			this.Message = Message_;
		});
		Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.wall = new $Uint64(0, 0);
				this.ext = new $Int64(0, 0);
				this.loc = ptrType$2.nil;
				return;
			}
			this.wall = wall_;
			this.ext = ext_;
			this.loc = loc_;
		});
		Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
		Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
		Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
		Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.name = "";
				this.zone = sliceType.nil;
				this.tx = sliceType$1.nil;
				this.cacheStart = new $Int64(0, 0);
				this.cacheEnd = new $Int64(0, 0);
				this.cacheZone = ptrType.nil;
				return;
			}
			this.name = name_;
			this.zone = zone_;
			this.tx = tx_;
			this.cacheStart = cacheStart_;
			this.cacheEnd = cacheEnd_;
			this.cacheZone = cacheZone_;
		});
		zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.name = "";
				this.offset = 0;
				this.isDST = false;
				return;
			}
			this.name = name_;
			this.offset = offset_;
			this.isDST = isDST_;
		});
		zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.when = new $Int64(0, 0);
				this.index = 0;
				this.isstd = false;
				this.isutc = false;
				return;
			}
			this.when = when_;
			this.index = index_;
			this.isstd = isstd_;
			this.isutc = isutc_;
		});
		sliceType = $sliceType(zone);
		sliceType$1 = $sliceType(zoneTrans);
		ptrType = $ptrType(zone);
		sliceType$2 = $sliceType($String);
		arrayType = $arrayType($Uint8, 20);
		sliceType$3 = $sliceType($Uint8);
		arrayType$1 = $arrayType($Uint8, 9);
		arrayType$2 = $arrayType($Uint8, 64);
		ptrType$2 = $ptrType(Location);
		arrayType$3 = $arrayType($Uint8, 32);
		ptrType$4 = $ptrType(ParseError);
		ptrType$7 = $ptrType(Time);
		init = function() {
			$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
		};
		initLocal = function() {
			var d, i, j, s;
			d = new ($global.Date)();
			s = $internalize(d, $String);
			i = indexByte(s, 40);
			j = indexByte(s, 41);
			if ((i === -1) || (j === -1)) {
				localLoc.name = "UTC";
				return;
			}
			localLoc.name = $substring(s, (i + 1 >> 0), j);
			localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
		};
		runtimeNano = function() {
			return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
		};
		indexByte = function(s, c) {
			var c, s;
			return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
		};
		startsWithLowerCase = function(str) {
			var c, str;
			if (str.length === 0) {
				return false;
			}
			c = str.charCodeAt(0);
			return 97 <= c && c <= 122;
		};
		nextStdChunk = function(layout) {
			var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x$1;
			prefix = "";
			std = 0;
			suffix = "";
			i = 0;
			while (true) {
				if (!(i < layout.length)) { break; }
				c = ((layout.charCodeAt(i) >> 0));
				_1 = c;
				if (_1 === (74)) {
					if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
						if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
							_tmp = $substring(layout, 0, i);
							_tmp$1 = 257;
							_tmp$2 = $substring(layout, (i + 7 >> 0));
							prefix = _tmp;
							std = _tmp$1;
							suffix = _tmp$2;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$3 = $substring(layout, 0, i);
							_tmp$4 = 258;
							_tmp$5 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$3;
							std = _tmp$4;
							suffix = _tmp$5;
							return [prefix, std, suffix];
						}
					}
				} else if (_1 === (77)) {
					if (layout.length >= (i + 3 >> 0)) {
						if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
							if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
								_tmp$6 = $substring(layout, 0, i);
								_tmp$7 = 261;
								_tmp$8 = $substring(layout, (i + 6 >> 0));
								prefix = _tmp$6;
								std = _tmp$7;
								suffix = _tmp$8;
								return [prefix, std, suffix];
							}
							if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
								_tmp$9 = $substring(layout, 0, i);
								_tmp$10 = 262;
								_tmp$11 = $substring(layout, (i + 3 >> 0));
								prefix = _tmp$9;
								std = _tmp$10;
								suffix = _tmp$11;
								return [prefix, std, suffix];
							}
						}
						if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
							_tmp$12 = $substring(layout, 0, i);
							_tmp$13 = 21;
							_tmp$14 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$12;
							std = _tmp$13;
							suffix = _tmp$14;
							return [prefix, std, suffix];
						}
					}
				} else if (_1 === (48)) {
					if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
						_tmp$15 = $substring(layout, 0, i);
						_tmp$16 = (x$1 = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x$1 < 0 || x$1 >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x$1]));
						_tmp$17 = $substring(layout, (i + 2 >> 0));
						prefix = _tmp$15;
						std = _tmp$16;
						suffix = _tmp$17;
						return [prefix, std, suffix];
					}
				} else if (_1 === (49)) {
					if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
						_tmp$18 = $substring(layout, 0, i);
						_tmp$19 = 522;
						_tmp$20 = $substring(layout, (i + 2 >> 0));
						prefix = _tmp$18;
						std = _tmp$19;
						suffix = _tmp$20;
						return [prefix, std, suffix];
					}
					_tmp$21 = $substring(layout, 0, i);
					_tmp$22 = 259;
					_tmp$23 = $substring(layout, (i + 1 >> 0));
					prefix = _tmp$21;
					std = _tmp$22;
					suffix = _tmp$23;
					return [prefix, std, suffix];
				} else if (_1 === (50)) {
					if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
						_tmp$24 = $substring(layout, 0, i);
						_tmp$25 = 273;
						_tmp$26 = $substring(layout, (i + 4 >> 0));
						prefix = _tmp$24;
						std = _tmp$25;
						suffix = _tmp$26;
						return [prefix, std, suffix];
					}
					_tmp$27 = $substring(layout, 0, i);
					_tmp$28 = 263;
					_tmp$29 = $substring(layout, (i + 1 >> 0));
					prefix = _tmp$27;
					std = _tmp$28;
					suffix = _tmp$29;
					return [prefix, std, suffix];
				} else if (_1 === (95)) {
					if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
						if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
							_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
							_tmp$31 = 273;
							_tmp$32 = $substring(layout, (i + 5 >> 0));
							prefix = _tmp$30;
							std = _tmp$31;
							suffix = _tmp$32;
							return [prefix, std, suffix];
						}
						_tmp$33 = $substring(layout, 0, i);
						_tmp$34 = 264;
						_tmp$35 = $substring(layout, (i + 2 >> 0));
						prefix = _tmp$33;
						std = _tmp$34;
						suffix = _tmp$35;
						return [prefix, std, suffix];
					}
				} else if (_1 === (51)) {
					_tmp$36 = $substring(layout, 0, i);
					_tmp$37 = 523;
					_tmp$38 = $substring(layout, (i + 1 >> 0));
					prefix = _tmp$36;
					std = _tmp$37;
					suffix = _tmp$38;
					return [prefix, std, suffix];
				} else if (_1 === (52)) {
					_tmp$39 = $substring(layout, 0, i);
					_tmp$40 = 525;
					_tmp$41 = $substring(layout, (i + 1 >> 0));
					prefix = _tmp$39;
					std = _tmp$40;
					suffix = _tmp$41;
					return [prefix, std, suffix];
				} else if (_1 === (53)) {
					_tmp$42 = $substring(layout, 0, i);
					_tmp$43 = 527;
					_tmp$44 = $substring(layout, (i + 1 >> 0));
					prefix = _tmp$42;
					std = _tmp$43;
					suffix = _tmp$44;
					return [prefix, std, suffix];
				} else if (_1 === (80)) {
					if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
						_tmp$45 = $substring(layout, 0, i);
						_tmp$46 = 531;
						_tmp$47 = $substring(layout, (i + 2 >> 0));
						prefix = _tmp$45;
						std = _tmp$46;
						suffix = _tmp$47;
						return [prefix, std, suffix];
					}
				} else if (_1 === (112)) {
					if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
						_tmp$48 = $substring(layout, 0, i);
						_tmp$49 = 532;
						_tmp$50 = $substring(layout, (i + 2 >> 0));
						prefix = _tmp$48;
						std = _tmp$49;
						suffix = _tmp$50;
						return [prefix, std, suffix];
					}
				} else if (_1 === (45)) {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
						_tmp$51 = $substring(layout, 0, i);
						_tmp$52 = 28;
						_tmp$53 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp$51;
						std = _tmp$52;
						suffix = _tmp$53;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
						_tmp$54 = $substring(layout, 0, i);
						_tmp$55 = 31;
						_tmp$56 = $substring(layout, (i + 9 >> 0));
						prefix = _tmp$54;
						std = _tmp$55;
						suffix = _tmp$56;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
						_tmp$57 = $substring(layout, 0, i);
						_tmp$58 = 27;
						_tmp$59 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$57;
						std = _tmp$58;
						suffix = _tmp$59;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
						_tmp$60 = $substring(layout, 0, i);
						_tmp$61 = 30;
						_tmp$62 = $substring(layout, (i + 6 >> 0));
						prefix = _tmp$60;
						std = _tmp$61;
						suffix = _tmp$62;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
						_tmp$63 = $substring(layout, 0, i);
						_tmp$64 = 29;
						_tmp$65 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$63;
						std = _tmp$64;
						suffix = _tmp$65;
						return [prefix, std, suffix];
					}
				} else if (_1 === (90)) {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
						_tmp$66 = $substring(layout, 0, i);
						_tmp$67 = 23;
						_tmp$68 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp$66;
						std = _tmp$67;
						suffix = _tmp$68;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
						_tmp$69 = $substring(layout, 0, i);
						_tmp$70 = 26;
						_tmp$71 = $substring(layout, (i + 9 >> 0));
						prefix = _tmp$69;
						std = _tmp$70;
						suffix = _tmp$71;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
						_tmp$72 = $substring(layout, 0, i);
						_tmp$73 = 22;
						_tmp$74 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$72;
						std = _tmp$73;
						suffix = _tmp$74;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
						_tmp$75 = $substring(layout, 0, i);
						_tmp$76 = 25;
						_tmp$77 = $substring(layout, (i + 6 >> 0));
						prefix = _tmp$75;
						std = _tmp$76;
						suffix = _tmp$77;
						return [prefix, std, suffix];
					}
					if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
						_tmp$78 = $substring(layout, 0, i);
						_tmp$79 = 24;
						_tmp$80 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$78;
						std = _tmp$79;
						suffix = _tmp$80;
						return [prefix, std, suffix];
					}
				} else if (_1 === (46)) {
					if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
						ch = layout.charCodeAt((i + 1 >> 0));
						j = i + 1 >> 0;
						while (true) {
							if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
							j = j + (1) >> 0;
						}
						if (!isDigit(layout, j)) {
							std$1 = 32;
							if (layout.charCodeAt((i + 1 >> 0)) === 57) {
								std$1 = 33;
							}
							std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
							_tmp$81 = $substring(layout, 0, i);
							_tmp$82 = std$1;
							_tmp$83 = $substring(layout, j);
							prefix = _tmp$81;
							std = _tmp$82;
							suffix = _tmp$83;
							return [prefix, std, suffix];
						}
					}
				}
				i = i + (1) >> 0;
			}
			_tmp$84 = layout;
			_tmp$85 = 0;
			_tmp$86 = "";
			prefix = _tmp$84;
			std = _tmp$85;
			suffix = _tmp$86;
			return [prefix, std, suffix];
		};
		match = function(s1, s2) {
			var c1, c2, i, s1, s2;
			i = 0;
			while (true) {
				if (!(i < s1.length)) { break; }
				c1 = s1.charCodeAt(i);
				c2 = s2.charCodeAt(i);
				if (!((c1 === c2))) {
					c1 = (c1 | (32)) >>> 0;
					c2 = (c2 | (32)) >>> 0;
					if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
						return false;
					}
				}
				i = i + (1) >> 0;
			}
			return true;
		};
		lookup = function(tab, val) {
			var _i, _ref, i, tab, v, val;
			_ref = tab;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
					return [i, $substring(val, v.length), $ifaceNil];
				}
				_i++;
			}
			return [-1, val, errBad];
		};
		appendInt = function(b, x$1, width) {
			var _q, b, buf, i, q, u, w, width, x$1;
			u = ((x$1 >>> 0));
			if (x$1 < 0) {
				b = $append(b, 45);
				u = ((-x$1 >>> 0));
			}
			buf = arrayType.zero();
			i = 20;
			while (true) {
				if (!(u >= 10)) { break; }
				i = i - (1) >> 0;
				q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
				u = q;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
			w = 20 - i >> 0;
			while (true) {
				if (!(w < width)) { break; }
				b = $append(b, 48);
				w = w + (1) >> 0;
			}
			return $appendSlice(b, $subslice(new sliceType$3(buf), i));
		};
		atoi = function(s) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x$1;
			x$1 = 0;
			err = $ifaceNil;
			neg = false;
			if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
				neg = s.charCodeAt(0) === 45;
				s = $substring(s, 1);
			}
			_tuple = leadingInt(s);
			q = _tuple[0];
			rem = _tuple[1];
			err = _tuple[2];
			x$1 = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
			if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
				_tmp = 0;
				_tmp$1 = atoiError;
				x$1 = _tmp;
				err = _tmp$1;
				return [x$1, err];
			}
			if (neg) {
				x$1 = -x$1;
			}
			_tmp$2 = x$1;
			_tmp$3 = $ifaceNil;
			x$1 = _tmp$2;
			err = _tmp$3;
			return [x$1, err];
		};
		formatNano = function(b, nanosec, n, trim) {
			var _q, _r, b, buf, n, nanosec, start, trim, u, x$1;
			u = nanosec;
			buf = arrayType$1.zero();
			start = 9;
			while (true) {
				if (!(start > 0)) { break; }
				start = start - (1) >> 0;
				((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
				u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			}
			if (n > 9) {
				n = 9;
			}
			if (trim) {
				while (true) {
					if (!(n > 0 && ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$1])) === 48))) { break; }
					n = n - (1) >> 0;
				}
				if (n === 0) {
					return b;
				}
			}
			b = $append(b, 46);
			return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
		};
		Time.ptr.prototype.String = function() {
			var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x$1, x$2, x$3, x$4, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; s = $f.s; sign = $f.sign; t = $f.t; wid = $f.wid; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = _r;
			if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				m2 = ((x$3 = t.ext, new $Uint64(x$3.$high, x$3.$low)));
				sign = 43;
				if ((x$4 = t.ext, (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 0)))) {
					sign = 45;
					m2 = new $Uint64(-m2.$high, -m2.$low);
				}
				_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
				_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
				m1 = _tmp;
				m2 = _tmp$1;
				_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
				_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
				m0 = _tmp$2;
				m1 = _tmp$3;
				buf = sliceType$3.nil;
				buf = $appendSlice(buf, " m=");
				buf = $append(buf, sign);
				wid = 0;
				if (!((m0.$high === 0 && m0.$low === 0))) {
					buf = appendInt(buf, ((m0.$low >> 0)), 0);
					wid = 9;
				}
				buf = appendInt(buf, ((m1.$low >> 0)), wid);
				buf = $append(buf, 46);
				buf = appendInt(buf, ((m2.$low >> 0)), 9);
				s = s + (($bytesToString(buf)));
			}
			$s = -1; return s;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.s = s; $f.sign = sign; $f.t = t; $f.wid = wid; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.String = function() { return this.$val.String(); };
		Time.ptr.prototype.Format = function(layout) {
			var _r, b, buf, layout, max, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			b = sliceType$3.nil;
			max = layout.length + 10 >> 0;
			if (max < 64) {
				buf = arrayType$2.zero();
				b = $subslice(new sliceType$3(buf), 0, 0);
			} else {
				b = $makeSlice(sliceType$3, 0, max);
			}
			_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			b = _r;
			$s = -1; return ($bytesToString(b));
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
		Time.ptr.prototype.AppendFormat = function(b, layout) {
			var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			name = _tuple[0];
			offset = _tuple[1];
			abs = _tuple[2];
			year = -1;
			month = 0;
			day = 0;
			hour = -1;
			min = 0;
			sec = 0;
			while (true) {
				if (!(!(layout === ""))) { break; }
				_tuple$1 = nextStdChunk(layout);
				prefix = _tuple$1[0];
				std = _tuple$1[1];
				suffix = _tuple$1[2];
				if (!(prefix === "")) {
					b = $appendSlice(b, prefix);
				}
				if (std === 0) {
					break;
				}
				layout = suffix;
				if (year < 0 && !(((std & 256) === 0))) {
					_tuple$2 = absDate(abs, true);
					year = _tuple$2[0];
					month = _tuple$2[1];
					day = _tuple$2[2];
				}
				if (hour < 0 && !(((std & 512) === 0))) {
					_tuple$3 = absClock(abs);
					hour = _tuple$3[0];
					min = _tuple$3[1];
					sec = _tuple$3[2];
				}
				switch (0) { default:
					_1 = std & 65535;
					if (_1 === (274)) {
						y = year;
						if (y < 0) {
							y = -y;
						}
						b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
					} else if (_1 === (273)) {
						b = appendInt(b, year, 4);
					} else if (_1 === (258)) {
						b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
					} else if (_1 === (257)) {
						m = new Month(month).String();
						b = $appendSlice(b, m);
					} else if (_1 === (259)) {
						b = appendInt(b, ((month >> 0)), 0);
					} else if (_1 === (260)) {
						b = appendInt(b, ((month >> 0)), 2);
					} else if (_1 === (262)) {
						b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
					} else if (_1 === (261)) {
						s = new Weekday(absWeekday(abs)).String();
						b = $appendSlice(b, s);
					} else if (_1 === (263)) {
						b = appendInt(b, day, 0);
					} else if (_1 === (264)) {
						if (day < 10) {
							b = $append(b, 32);
						}
						b = appendInt(b, day, 0);
					} else if (_1 === (265)) {
						b = appendInt(b, day, 2);
					} else if (_1 === (522)) {
						b = appendInt(b, hour, 2);
					} else if (_1 === (523)) {
						hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
						if (hr === 0) {
							hr = 12;
						}
						b = appendInt(b, hr, 0);
					} else if (_1 === (524)) {
						hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
						if (hr$1 === 0) {
							hr$1 = 12;
						}
						b = appendInt(b, hr$1, 2);
					} else if (_1 === (525)) {
						b = appendInt(b, min, 0);
					} else if (_1 === (526)) {
						b = appendInt(b, min, 2);
					} else if (_1 === (527)) {
						b = appendInt(b, sec, 0);
					} else if (_1 === (528)) {
						b = appendInt(b, sec, 2);
					} else if (_1 === (531)) {
						if (hour >= 12) {
							b = $appendSlice(b, "PM");
						} else {
							b = $appendSlice(b, "AM");
						}
					} else if (_1 === (532)) {
						if (hour >= 12) {
							b = $appendSlice(b, "pm");
						} else {
							b = $appendSlice(b, "am");
						}
					} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
						if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
							b = $append(b, 90);
							break;
						}
						zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
						absoffset = offset;
						if (zone$1 < 0) {
							b = $append(b, 45);
							zone$1 = -zone$1;
							absoffset = -absoffset;
						} else {
							b = $append(b, 43);
						}
						b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
						if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
							b = $append(b, 58);
						}
						if (!((std === 29)) && !((std === 24))) {
							b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
						}
						if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
							if ((std === 31) || (std === 26)) {
								b = $append(b, 58);
							}
							b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
						}
					} else if (_1 === (21)) {
						if (!(name === "")) {
							b = $appendSlice(b, name);
							break;
						}
						zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
						if (zone$2 < 0) {
							b = $append(b, 45);
							zone$2 = -zone$2;
						} else {
							b = $append(b, 43);
						}
						b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
						b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					} else if ((_1 === (32)) || (_1 === (33))) {
						b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 33);
					}
				}
			}
			$s = -1; return b;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
		quote = function(s) {
			var s;
			return "\"" + s + "\"";
		};
		ParseError.ptr.prototype.Error = function() {
			var e;
			e = this;
			if (e.Message === "") {
				return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
			}
			return "parsing time " + quote(e.Value) + e.Message;
		};
		ParseError.prototype.Error = function() { return this.$val.Error(); };
		isDigit = function(s, i) {
			var c, i, s;
			if (s.length <= i) {
				return false;
			}
			c = s.charCodeAt(i);
			return 48 <= c && c <= 57;
		};
		getnum = function(s, fixed) {
			var fixed, s;
			if (!isDigit(s, 0)) {
				return [0, s, errBad];
			}
			if (!isDigit(s, 1)) {
				if (fixed) {
					return [0, s, errBad];
				}
				return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
			}
			return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
		};
		cutspace = function(s) {
			var s;
			while (true) {
				if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
				s = $substring(s, 1);
			}
			return s;
		};
		skip = function(value, prefix) {
			var prefix, value;
			while (true) {
				if (!(prefix.length > 0)) { break; }
				if (prefix.charCodeAt(0) === 32) {
					if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
						return [value, errBad];
					}
					prefix = cutspace(prefix);
					value = cutspace(value);
					continue;
				}
				if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
					return [value, errBad];
				}
				prefix = $substring(prefix, 1);
				value = $substring(value, 1);
			}
			return [value, $ifaceNil];
		};
		Parse = function(layout, value) {
			var _r, layout, value, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Parse = Parse;
		parse = function(layout, value, defaultLocation, local) {
			var _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x$1, x$2, year, z, zoneName, zoneOffset, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x$1 = $f.x$1; x$2 = $f.x$2; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tmp = layout;
			_tmp$1 = value;
			alayout = _tmp;
			avalue = _tmp$1;
			rangeErrString = "";
			amSet = false;
			pmSet = false;
			year = 0;
			month = 1;
			day = 1;
			hour = 0;
			min = 0;
			sec = 0;
			nsec = 0;
			z = ptrType$2.nil;
			zoneOffset = -1;
			zoneName = "";
			while (true) {
				err = $ifaceNil;
				_tuple = nextStdChunk(layout);
				prefix = _tuple[0];
				std = _tuple[1];
				suffix = _tuple[2];
				stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
				_tuple$1 = skip(value, prefix);
				value = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
				}
				if (std === 0) {
					if (!((value.length === 0))) {
						$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
					}
					break;
				}
				layout = suffix;
				p = "";
				switch (0) { default:
					_1 = std & 65535;
					if (_1 === (274)) {
						if (value.length < 2) {
							err = errBad;
							break;
						}
						_tmp$2 = $substring(value, 0, 2);
						_tmp$3 = $substring(value, 2);
						p = _tmp$2;
						value = _tmp$3;
						_tuple$2 = atoi(p);
						year = _tuple$2[0];
						err = _tuple$2[1];
						if (year >= 69) {
							year = year + (1900) >> 0;
						} else {
							year = year + (2000) >> 0;
						}
					} else if (_1 === (273)) {
						if (value.length < 4 || !isDigit(value, 0)) {
							err = errBad;
							break;
						}
						_tmp$4 = $substring(value, 0, 4);
						_tmp$5 = $substring(value, 4);
						p = _tmp$4;
						value = _tmp$5;
						_tuple$3 = atoi(p);
						year = _tuple$3[0];
						err = _tuple$3[1];
					} else if (_1 === (258)) {
						_tuple$4 = lookup(shortMonthNames, value);
						month = _tuple$4[0];
						value = _tuple$4[1];
						err = _tuple$4[2];
						month = month + (1) >> 0;
					} else if (_1 === (257)) {
						_tuple$5 = lookup(longMonthNames, value);
						month = _tuple$5[0];
						value = _tuple$5[1];
						err = _tuple$5[2];
						month = month + (1) >> 0;
					} else if ((_1 === (259)) || (_1 === (260))) {
						_tuple$6 = getnum(value, std === 260);
						month = _tuple$6[0];
						value = _tuple$6[1];
						err = _tuple$6[2];
						if (month <= 0 || 12 < month) {
							rangeErrString = "month";
						}
					} else if (_1 === (262)) {
						_tuple$7 = lookup(shortDayNames, value);
						value = _tuple$7[1];
						err = _tuple$7[2];
					} else if (_1 === (261)) {
						_tuple$8 = lookup(longDayNames, value);
						value = _tuple$8[1];
						err = _tuple$8[2];
					} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
						if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
							value = $substring(value, 1);
						}
						_tuple$9 = getnum(value, std === 265);
						day = _tuple$9[0];
						value = _tuple$9[1];
						err = _tuple$9[2];
						if (day < 0) {
							rangeErrString = "day";
						}
					} else if (_1 === (522)) {
						_tuple$10 = getnum(value, false);
						hour = _tuple$10[0];
						value = _tuple$10[1];
						err = _tuple$10[2];
						if (hour < 0 || 24 <= hour) {
							rangeErrString = "hour";
						}
					} else if ((_1 === (523)) || (_1 === (524))) {
						_tuple$11 = getnum(value, std === 524);
						hour = _tuple$11[0];
						value = _tuple$11[1];
						err = _tuple$11[2];
						if (hour < 0 || 12 < hour) {
							rangeErrString = "hour";
						}
					} else if ((_1 === (525)) || (_1 === (526))) {
						_tuple$12 = getnum(value, std === 526);
						min = _tuple$12[0];
						value = _tuple$12[1];
						err = _tuple$12[2];
						if (min < 0 || 60 <= min) {
							rangeErrString = "minute";
						}
					} else if ((_1 === (527)) || (_1 === (528))) {
						_tuple$13 = getnum(value, std === 528);
						sec = _tuple$13[0];
						value = _tuple$13[1];
						err = _tuple$13[2];
						if (sec < 0 || 60 <= sec) {
							rangeErrString = "second";
							break;
						}
						if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
							_tuple$14 = nextStdChunk(layout);
							std = _tuple$14[1];
							std = std & (65535);
							if ((std === 32) || (std === 33)) {
								break;
							}
							n = 2;
							while (true) {
								if (!(n < value.length && isDigit(value, n))) { break; }
								n = n + (1) >> 0;
							}
							_tuple$15 = parseNanoseconds(value, n);
							nsec = _tuple$15[0];
							rangeErrString = _tuple$15[1];
							err = _tuple$15[2];
							value = $substring(value, n);
						}
					} else if (_1 === (531)) {
						if (value.length < 2) {
							err = errBad;
							break;
						}
						_tmp$6 = $substring(value, 0, 2);
						_tmp$7 = $substring(value, 2);
						p = _tmp$6;
						value = _tmp$7;
						_2 = p;
						if (_2 === ("PM")) {
							pmSet = true;
						} else if (_2 === ("AM")) {
							amSet = true;
						} else {
							err = errBad;
						}
					} else if (_1 === (532)) {
						if (value.length < 2) {
							err = errBad;
							break;
						}
						_tmp$8 = $substring(value, 0, 2);
						_tmp$9 = $substring(value, 2);
						p = _tmp$8;
						value = _tmp$9;
						_3 = p;
						if (_3 === ("pm")) {
							pmSet = true;
						} else if (_3 === ("am")) {
							amSet = true;
						} else {
							err = errBad;
						}
					} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
						if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
							value = $substring(value, 1);
							z = $pkg.UTC;
							break;
						}
						_tmp$10 = "";
						_tmp$11 = "";
						_tmp$12 = "";
						_tmp$13 = "";
						sign = _tmp$10;
						hour$1 = _tmp$11;
						min$1 = _tmp$12;
						seconds = _tmp$13;
						if ((std === 25) || (std === 30)) {
							if (value.length < 6) {
								err = errBad;
								break;
							}
							if (!((value.charCodeAt(3) === 58))) {
								err = errBad;
								break;
							}
							_tmp$14 = $substring(value, 0, 1);
							_tmp$15 = $substring(value, 1, 3);
							_tmp$16 = $substring(value, 4, 6);
							_tmp$17 = "00";
							_tmp$18 = $substring(value, 6);
							sign = _tmp$14;
							hour$1 = _tmp$15;
							min$1 = _tmp$16;
							seconds = _tmp$17;
							value = _tmp$18;
						} else if ((std === 29) || (std === 24)) {
							if (value.length < 3) {
								err = errBad;
								break;
							}
							_tmp$19 = $substring(value, 0, 1);
							_tmp$20 = $substring(value, 1, 3);
							_tmp$21 = "00";
							_tmp$22 = "00";
							_tmp$23 = $substring(value, 3);
							sign = _tmp$19;
							hour$1 = _tmp$20;
							min$1 = _tmp$21;
							seconds = _tmp$22;
							value = _tmp$23;
						} else if ((std === 26) || (std === 31)) {
							if (value.length < 9) {
								err = errBad;
								break;
							}
							if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
								err = errBad;
								break;
							}
							_tmp$24 = $substring(value, 0, 1);
							_tmp$25 = $substring(value, 1, 3);
							_tmp$26 = $substring(value, 4, 6);
							_tmp$27 = $substring(value, 7, 9);
							_tmp$28 = $substring(value, 9);
							sign = _tmp$24;
							hour$1 = _tmp$25;
							min$1 = _tmp$26;
							seconds = _tmp$27;
							value = _tmp$28;
						} else if ((std === 23) || (std === 28)) {
							if (value.length < 7) {
								err = errBad;
								break;
							}
							_tmp$29 = $substring(value, 0, 1);
							_tmp$30 = $substring(value, 1, 3);
							_tmp$31 = $substring(value, 3, 5);
							_tmp$32 = $substring(value, 5, 7);
							_tmp$33 = $substring(value, 7);
							sign = _tmp$29;
							hour$1 = _tmp$30;
							min$1 = _tmp$31;
							seconds = _tmp$32;
							value = _tmp$33;
						} else {
							if (value.length < 5) {
								err = errBad;
								break;
							}
							_tmp$34 = $substring(value, 0, 1);
							_tmp$35 = $substring(value, 1, 3);
							_tmp$36 = $substring(value, 3, 5);
							_tmp$37 = "00";
							_tmp$38 = $substring(value, 5);
							sign = _tmp$34;
							hour$1 = _tmp$35;
							min$1 = _tmp$36;
							seconds = _tmp$37;
							value = _tmp$38;
						}
						_tmp$39 = 0;
						_tmp$40 = 0;
						_tmp$41 = 0;
						hr = _tmp$39;
						mm = _tmp$40;
						ss = _tmp$41;
						_tuple$16 = atoi(hour$1);
						hr = _tuple$16[0];
						err = _tuple$16[1];
						if ($interfaceIsEqual(err, $ifaceNil)) {
							_tuple$17 = atoi(min$1);
							mm = _tuple$17[0];
							err = _tuple$17[1];
						}
						if ($interfaceIsEqual(err, $ifaceNil)) {
							_tuple$18 = atoi(seconds);
							ss = _tuple$18[0];
							err = _tuple$18[1];
						}
						zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
						_4 = sign.charCodeAt(0);
						if (_4 === (43)) ; else if (_4 === (45)) {
							zoneOffset = -zoneOffset;
						} else {
							err = errBad;
						}
					} else if (_1 === (21)) {
						if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
							z = $pkg.UTC;
							value = $substring(value, 3);
							break;
						}
						_tuple$19 = parseTimeZone(value);
						n$1 = _tuple$19[0];
						ok = _tuple$19[1];
						if (!ok) {
							err = errBad;
							break;
						}
						_tmp$42 = $substring(value, 0, n$1);
						_tmp$43 = $substring(value, n$1);
						zoneName = _tmp$42;
						value = _tmp$43;
					} else if (_1 === (32)) {
						ndigit = 1 + ((std >> 16 >> 0)) >> 0;
						if (value.length < ndigit) {
							err = errBad;
							break;
						}
						_tuple$20 = parseNanoseconds(value, ndigit);
						nsec = _tuple$20[0];
						rangeErrString = _tuple$20[1];
						err = _tuple$20[2];
						value = $substring(value, ndigit);
					} else if (_1 === (33)) {
						if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
							break;
						}
						i = 0;
						while (true) {
							if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
							i = i + (1) >> 0;
						}
						_tuple$21 = parseNanoseconds(value, 1 + i >> 0);
						nsec = _tuple$21[0];
						rangeErrString = _tuple$21[1];
						err = _tuple$21[2];
						value = $substring(value, (1 + i >> 0));
					}
				}
				if (!(rangeErrString === "")) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
				}
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
				}
			}
			if (pmSet && hour < 12) {
				hour = hour + (12) >> 0;
			} else if (amSet && (hour === 12)) {
				hour = 0;
			}
			if (day < 1 || day > daysIn(((month >> 0)), year)) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
			}
			/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!(z === ptrType$2.nil)) { */ case 1:
				_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return [_r, $ifaceNil];
			/* } */ case 2:
			/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!((zoneOffset === -1))) { */ case 4:
				_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t = $clone(_r$1, Time);
				t.addSec((x$1 = (new $Int64(0, zoneOffset)), new $Int64(-x$1.$high, -x$1.$low)));
				_r$2 = local.lookup(t.unixSec()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$22 = _r$2;
				name = _tuple$22[0];
				offset = _tuple$22[1];
				if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
					t.setLoc(local);
					$s = -1; return [t, $ifaceNil];
				}
				t.setLoc(FixedZone(zoneName, zoneOffset));
				$s = -1; return [t, $ifaceNil];
			/* } */ case 5:
			/* */ if (!(zoneName === "")) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!(zoneName === "")) { */ case 8:
				_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				t$1 = $clone(_r$3, Time);
				_r$4 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$23 = _r$4;
				offset$1 = _tuple$23[0];
				ok$1 = _tuple$23[1];
				if (ok$1) {
					t$1.addSec((x$2 = (new $Int64(0, offset$1)), new $Int64(-x$2.$high, -x$2.$low)));
					t$1.setLoc(local);
					$s = -1; return [t$1, $ifaceNil];
				}
				if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
					_tuple$24 = atoi($substring(zoneName, 3));
					offset$1 = _tuple$24[0];
					offset$1 = $imul(offset$1, (3600));
				}
				t$1.setLoc(FixedZone(zoneName, offset$1));
				$s = -1; return [t$1, $ifaceNil];
			/* } */ case 9:
			_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [_r$5, $ifaceNil];
			/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x$1 = x$1; $f.x$2 = x$2; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
		};
		parseTimeZone = function(value) {
			var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, ok$1, value;
			length = 0;
			ok = false;
			if (value.length < 3) {
				_tmp = 0;
				_tmp$1 = false;
				length = _tmp;
				ok = _tmp$1;
				return [length, ok];
			}
			if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
				_tmp$2 = 4;
				_tmp$3 = true;
				length = _tmp$2;
				ok = _tmp$3;
				return [length, ok];
			}
			if ($substring(value, 0, 3) === "GMT") {
				length = parseGMT(value);
				_tmp$4 = length;
				_tmp$5 = true;
				length = _tmp$4;
				ok = _tmp$5;
				return [length, ok];
			}
			if ((value.charCodeAt(0) === 43) || (value.charCodeAt(0) === 45)) {
				length = parseSignedOffset(value);
				ok$1 = length > 0;
				_tmp$6 = length;
				_tmp$7 = ok$1;
				length = _tmp$6;
				ok = _tmp$7;
				return [length, ok];
			}
			nUpper = 0;
			nUpper = 0;
			while (true) {
				if (!(nUpper < 6)) { break; }
				if (nUpper >= value.length) {
					break;
				}
				c = value.charCodeAt(nUpper);
				if (c < 65 || 90 < c) {
					break;
				}
				nUpper = nUpper + (1) >> 0;
			}
			_1 = nUpper;
			if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
				_tmp$8 = 0;
				_tmp$9 = false;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			} else if (_1 === (5)) {
				if (value.charCodeAt(4) === 84) {
					_tmp$10 = 5;
					_tmp$11 = true;
					length = _tmp$10;
					ok = _tmp$11;
					return [length, ok];
				}
			} else if (_1 === (4)) {
				if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
					_tmp$12 = 4;
					_tmp$13 = true;
					length = _tmp$12;
					ok = _tmp$13;
					return [length, ok];
				}
			} else if (_1 === (3)) {
				_tmp$14 = 3;
				_tmp$15 = true;
				length = _tmp$14;
				ok = _tmp$15;
				return [length, ok];
			}
			_tmp$16 = 0;
			_tmp$17 = false;
			length = _tmp$16;
			ok = _tmp$17;
			return [length, ok];
		};
		parseGMT = function(value) {
			var value;
			value = $substring(value, 3);
			if (value.length === 0) {
				return 3;
			}
			return 3 + parseSignedOffset(value) >> 0;
		};
		parseSignedOffset = function(value) {
			var _tuple, err, rem, sign, value, x$1;
			sign = value.charCodeAt(0);
			if (!((sign === 45)) && !((sign === 43))) {
				return 0;
			}
			_tuple = leadingInt($substring(value, 1));
			x$1 = _tuple[0];
			rem = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil)) || $substring(value, 1) === rem) {
				return 0;
			}
			if (sign === 45) {
				x$1 = new $Int64(-x$1.$high, -x$1.$low);
			}
			if ((x$1.$high < -1 || (x$1.$high === -1 && x$1.$low < 4294967273)) || (0 < x$1.$high || (0 === x$1.$high && 23 < x$1.$low))) {
				return 0;
			}
			return value.length - rem.length >> 0;
		};
		parseNanoseconds = function(value, nbytes) {
			var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
			ns = 0;
			rangeErrString = "";
			err = $ifaceNil;
			if (!((value.charCodeAt(0) === 46))) {
				err = errBad;
				return [ns, rangeErrString, err];
			}
			_tuple = atoi($substring(value, 1, nbytes));
			ns = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ns, rangeErrString, err];
			}
			if (ns < 0 || 1000000000 <= ns) {
				rangeErrString = "fractional second";
				return [ns, rangeErrString, err];
			}
			scaleDigits = 10 - nbytes >> 0;
			i = 0;
			while (true) {
				if (!(i < scaleDigits)) { break; }
				ns = $imul(ns, (10));
				i = i + (1) >> 0;
			}
			return [ns, rangeErrString, err];
		};
		leadingInt = function(s) {
			var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x$1, x$2, x$3, x$4;
			x$1 = new $Int64(0, 0);
			rem = "";
			err = $ifaceNil;
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c = s.charCodeAt(i);
				if (c < 48 || c > 57) {
					break;
				}
				if ((x$1.$high > 214748364 || (x$1.$high === 214748364 && x$1.$low > 3435973836))) {
					_tmp = new $Int64(0, 0);
					_tmp$1 = "";
					_tmp$2 = errLeadingInt;
					x$1 = _tmp;
					rem = _tmp$1;
					err = _tmp$2;
					return [x$1, rem, err];
				}
				x$1 = (x$2 = (x$3 = $mul64(x$1, new $Int64(0, 10)), x$4 = (new $Int64(0, c)), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), new $Int64(x$2.$high - 0, x$2.$low - 48));
				if ((x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 0))) {
					_tmp$3 = new $Int64(0, 0);
					_tmp$4 = "";
					_tmp$5 = errLeadingInt;
					x$1 = _tmp$3;
					rem = _tmp$4;
					err = _tmp$5;
					return [x$1, rem, err];
				}
				i = i + (1) >> 0;
			}
			_tmp$6 = x$1;
			_tmp$7 = $substring(s, i);
			_tmp$8 = $ifaceNil;
			x$1 = _tmp$6;
			rem = _tmp$7;
			err = _tmp$8;
			return [x$1, rem, err];
		};
		Time.ptr.prototype.nsec = function() {
			var t, x$1;
			t = this;
			return (((x$1 = t.wall, new $Uint64(x$1.$high & 0, (x$1.$low & 1073741823) >>> 0)).$low >> 0));
		};
		Time.prototype.nsec = function() { return this.$val.nsec(); };
		Time.ptr.prototype.sec = function() {
			var t, x$1, x$2, x$3, x$4;
			t = this;
			if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				return (x$3 = ((x$4 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$4.$high, x$4.$low))), new $Int64(13 + x$3.$high, 3618733952 + x$3.$low));
			}
			return t.ext;
		};
		Time.prototype.sec = function() { return this.$val.sec(); };
		Time.ptr.prototype.unixSec = function() {
			var t, x$1;
			t = this;
			return (x$1 = t.sec(), new $Int64(x$1.$high + -15, x$1.$low + 2288912640));
		};
		Time.prototype.unixSec = function() { return this.$val.unixSec(); };
		Time.ptr.prototype.addSec = function(d) {
			var d, dsec, sec, t, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			t = this;
			if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				sec = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low)));
				dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
				if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
					t.wall = (x$4 = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & 0, (x$6.$low & 1073741823) >>> 0)), x$7 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0)), new $Uint64(x$4.$high | 2147483648, (x$4.$low | 0) >>> 0));
					return;
				}
				t.stripMono();
			}
			t.ext = (x$8 = t.ext, x$9 = d, new $Int64(x$8.$high + x$9.$high, x$8.$low + x$9.$low));
		};
		Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
		Time.ptr.prototype.setLoc = function(loc) {
			var loc, t;
			t = this;
			if (loc === utcLoc) {
				loc = ptrType$2.nil;
			}
			t.stripMono();
			t.loc = loc;
		};
		Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
		Time.ptr.prototype.stripMono = function() {
			var t, x$1, x$2, x$3, x$4;
			t = this;
			if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				t.ext = t.sec();
				t.wall = (x$3 = t.wall, x$4 = new $Uint64(0, 1073741823), new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0));
			}
		};
		Time.prototype.stripMono = function() { return this.$val.stripMono(); };
		Time.ptr.prototype.After = function(u) {
			var t, ts, u, us, x$1, x$2, x$3, x$4, x$5, x$6;
			t = this;
			if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				return (x$5 = t.ext, x$6 = u.ext, (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)));
			}
			ts = t.sec();
			us = u.sec();
			return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
		};
		Time.prototype.After = function(u) { return this.$val.After(u); };
		Time.ptr.prototype.Before = function(u) {
			var t, u, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			t = this;
			if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				return (x$5 = t.ext, x$6 = u.ext, (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low < x$6.$low)));
			}
			return (x$7 = t.sec(), x$8 = u.sec(), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low < x$8.$low))) || (x$9 = t.sec(), x$10 = u.sec(), (x$9.$high === x$10.$high && x$9.$low === x$10.$low)) && t.nsec() < u.nsec();
		};
		Time.prototype.Before = function(u) { return this.$val.Before(u); };
		Time.ptr.prototype.Equal = function(u) {
			var t, u, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
			t = this;
			if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				return (x$5 = t.ext, x$6 = u.ext, (x$5.$high === x$6.$high && x$5.$low === x$6.$low));
			}
			return (x$7 = t.sec(), x$8 = u.sec(), (x$7.$high === x$8.$high && x$7.$low === x$8.$low)) && (t.nsec() === u.nsec());
		};
		Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
		Month.prototype.String = function() {
			var buf, m, n, x$1;
			m = this.$val;
			if (1 <= m && m <= 12) {
				return (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x$1]));
			}
			buf = $makeSlice(sliceType$3, 20);
			n = fmtInt(buf, (new $Uint64(0, m)));
			return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
		};
		$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
		Weekday.prototype.String = function() {
			var buf, d, n;
			d = this.$val;
			if (0 <= d && d <= 6) {
				return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
			}
			buf = $makeSlice(sliceType$3, 20);
			n = fmtInt(buf, (new $Uint64(0, d)));
			return "%!Weekday(" + ($bytesToString($subslice(buf, n))) + ")";
		};
		$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
		Time.ptr.prototype.IsZero = function() {
			var t, x$1;
			t = this;
			return (x$1 = t.sec(), (x$1.$high === 0 && x$1.$low === 0)) && (t.nsec() === 0);
		};
		Time.prototype.IsZero = function() { return this.$val.IsZero(); };
		Time.ptr.prototype.abs = function() {
			var _r, _r$1, _tuple, l, offset, sec, t, x$1, x$2, x$3, x$4, x$5, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			l = t.loc;
			/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
				_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				l = _r;
			/* } */ case 2:
			sec = t.unixSec();
			/* */ if (!(l === utcLoc)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(l === utcLoc)) { */ case 4:
				/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
					sec = (x$3 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
					$s = 8; continue;
				/* } else { */ case 7:
					_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple = _r$1;
					offset = _tuple[1];
					sec = (x$4 = (new $Int64(0, offset)), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
				/* } */ case 8:
			/* } */ case 5:
			$s = -1; return ((x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low)));
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.abs = function() { return this.$val.abs(); };
		Time.ptr.prototype.locabs = function() {
			var _r, _r$1, _tuple, abs, l, name, offset, sec, t, x$1, x$2, x$3, x$4, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			name = "";
			offset = 0;
			abs = new $Uint64(0, 0);
			t = this;
			l = t.loc;
			/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
				_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				l = _r;
			/* } */ case 2:
			sec = t.unixSec();
			/* */ if (!(l === utcLoc)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(l === utcLoc)) { */ case 4:
				/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
					name = l.cacheZone.name;
					offset = l.cacheZone.offset;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple = _r$1;
					name = _tuple[0];
					offset = _tuple[1];
				/* } */ case 9:
				sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 6; continue;
			/* } else { */ case 5:
				name = "UTC";
			/* } */ case 6:
			abs = ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
			$s = -1; return [name, offset, abs];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.locabs = function() { return this.$val.locabs(); };
		Time.ptr.prototype.Date = function() {
			var _r, _tuple, day, month, t, year, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			year = 0;
			month = 0;
			day = 0;
			t = this;
			_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			year = _tuple[0];
			month = _tuple[1];
			day = _tuple[2];
			$s = -1; return [year, month, day];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Date = function() { return this.$val.Date(); };
		Time.ptr.prototype.Year = function() {
			var _r, _tuple, t, year, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			year = _tuple[0];
			$s = -1; return year;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Year = function() { return this.$val.Year(); };
		Time.ptr.prototype.Month = function() {
			var _r, _tuple, month, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			month = _tuple[1];
			$s = -1; return month;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f._r = _r; $f._tuple = _tuple; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Month = function() { return this.$val.Month(); };
		Time.ptr.prototype.Day = function() {
			var _r, _tuple, day, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			day = _tuple[2];
			$s = -1; return day;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Day = function() { return this.$val.Day(); };
		Time.ptr.prototype.Weekday = function() {
			var _r, _r$1, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Weekday = function() { return this.$val.Weekday(); };
		absWeekday = function(abs) {
			var _q, abs, sec;
			sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
			return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		};
		Time.ptr.prototype.ISOWeek = function() {
			var _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			year = 0;
			week = 0;
			t = this;
			_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			year = _tuple[0];
			month = _tuple[1];
			day = _tuple[2];
			yday = _tuple[3];
			_r$2 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			wday = (_r$1 = (((_r$2 + 6 >> 0) >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
			if (1 <= jan1wday && jan1wday <= 3) {
				week = week + (1) >> 0;
			}
			if (week === 0) {
				year = year - (1) >> 0;
				week = 52;
				if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
					week = week + (1) >> 0;
				}
			}
			if ((month === 12) && day >= 29 && wday < 3) {
				dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
				if (0 <= dec31wday && dec31wday <= 2) {
					year = year + (1) >> 0;
					week = 1;
				}
			}
			$s = -1; return [year, week];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
		Time.ptr.prototype.Clock = function() {
			var _r, _r$1, _tuple, hour, min, sec, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			hour = 0;
			min = 0;
			sec = 0;
			t = this;
			_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			hour = _tuple[0];
			min = _tuple[1];
			sec = _tuple[2];
			$s = -1; return [hour, min, sec];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Clock = function() { return this.$val.Clock(); };
		absClock = function(abs) {
			var _q, _q$1, abs, hour, min, sec;
			hour = 0;
			min = 0;
			sec = 0;
			sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
			hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			sec = sec - (($imul(hour, 3600))) >> 0;
			min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			sec = sec - (($imul(min, 60))) >> 0;
			return [hour, min, sec];
		};
		Time.ptr.prototype.Hour = function() {
			var _q, _r, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Hour = function() { return this.$val.Hour(); };
		Time.ptr.prototype.Minute = function() {
			var _q, _r, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Minute = function() { return this.$val.Minute(); };
		Time.ptr.prototype.Second = function() {
			var _r, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Second = function() { return this.$val.Second(); };
		Time.ptr.prototype.Nanosecond = function() {
			var t;
			t = this;
			return ((t.nsec() >> 0));
		};
		Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
		Time.ptr.prototype.YearDay = function() {
			var _r, _tuple, t, yday, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			yday = _tuple[3];
			$s = -1; return yday + 1 >> 0;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.YearDay = function() { return this.$val.YearDay(); };
		Duration.prototype.String = function() {
			var _tuple, _tuple$1, buf, d, neg, prec, u, w;
			d = this;
			buf = arrayType$3.zero();
			w = 32;
			u = (new $Uint64(d.$high, d.$low));
			neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
			if (neg) {
				u = new $Uint64(-u.$high, -u.$low);
			}
			if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
				prec = 0;
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
				w = w - (1) >> 0;
				if ((u.$high === 0 && u.$low === 0)) {
					return "0s";
				} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
					prec = 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
				} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
					prec = 3;
					w = w - (1) >> 0;
					$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
				} else {
					prec = 6;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				}
				_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
				w = _tuple[0];
				u = _tuple[1];
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
			} else {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
				_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
				w = _tuple$1[0];
				u = _tuple$1[1];
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
					u = $div64(u, (new $Uint64(0, 60)), false);
					if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
						w = w - (1) >> 0;
						((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
						w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
					}
				}
			}
			if (neg) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			return ($bytesToString($subslice(new sliceType$3(buf), w)));
		};
		$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
		fmtFrac = function(buf, v, prec) {
			var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
			nw = 0;
			nv = new $Uint64(0, 0);
			w = buf.$length;
			print = false;
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				digit = $div64(v, new $Uint64(0, 10), true);
				print = print || !((digit.$high === 0 && digit.$low === 0));
				if (print) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
				}
				v = $div64(v, (new $Uint64(0, 10)), false);
				i = i + (1) >> 0;
			}
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			}
			_tmp = w;
			_tmp$1 = v;
			nw = _tmp;
			nv = _tmp$1;
			return [nw, nv];
		};
		fmtInt = function(buf, v) {
			var buf, v, w;
			w = buf.$length;
			if ((v.$high === 0 && v.$low === 0)) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			} else {
				while (true) {
					if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
					w = w - (1) >> 0;
					((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
					v = $div64(v, (new $Uint64(0, 10)), false);
				}
			}
			return w;
		};
		Duration.prototype.Nanoseconds = function() {
			var d;
			d = this;
			return (new $Int64(d.$high, d.$low));
		};
		$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
		Duration.prototype.Seconds = function() {
			var d, nsec, sec;
			d = this;
			sec = $div64(d, new Duration(0, 1000000000), false);
			nsec = $div64(d, new Duration(0, 1000000000), true);
			return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
		};
		$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
		Duration.prototype.Minutes = function() {
			var d, min, nsec;
			d = this;
			min = $div64(d, new Duration(13, 4165425152), false);
			nsec = $div64(d, new Duration(13, 4165425152), true);
			return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
		};
		$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
		Duration.prototype.Hours = function() {
			var d, hour, nsec;
			d = this;
			hour = $div64(d, new Duration(838, 817405952), false);
			nsec = $div64(d, new Duration(838, 817405952), true);
			return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
		};
		$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
		Duration.prototype.Truncate = function(m) {
			var d, m, x$1;
			d = this;
			if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
				return d;
			}
			return (x$1 = $div64(d, m, true), new Duration(d.$high - x$1.$high, d.$low - x$1.$low));
		};
		$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
		lessThanHalf = function(x$1, y) {
			var x$1, x$2, x$3, x$4, x$5, y;
			return (x$2 = (x$3 = (new $Uint64(x$1.$high, x$1.$low)), x$4 = (new $Uint64(x$1.$high, x$1.$low)), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), x$5 = (new $Uint64(y.$high, y.$low)), (x$2.$high < x$5.$high || (x$2.$high === x$5.$high && x$2.$low < x$5.$low)));
		};
		Duration.prototype.Round = function(m) {
			var d, d1, d1$1, m, r, x$1, x$2;
			d = this;
			if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
				return d;
			}
			r = $div64(d, m, true);
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
				r = new Duration(-r.$high, -r.$low);
				if (lessThanHalf(r, m)) {
					return new Duration(d.$high + r.$high, d.$low + r.$low);
				}
				d1 = (x$1 = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x$1.$high + r.$high, x$1.$low + r.$low));
				if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
					return d1;
				}
				return new Duration(-2147483648, 0);
			}
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high - r.$high, d.$low - r.$low);
			}
			d1$1 = (x$2 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$2.$high - r.$high, x$2.$low - r.$low));
			if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
				return d1$1;
			}
			return new Duration(2147483647, 4294967295);
		};
		$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
		Time.ptr.prototype.Add = function(d) {
			var d, dsec, nsec, t, te, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			t = this;
			dsec = ((x$1 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$1.$high, x$1.$low)));
			nsec = t.nsec() + (((x$2 = $div64(d, new Duration(0, 1000000000), true), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)) >> 0;
			if (nsec >= 1000000000) {
				dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high + x$3.$high, dsec.$low + x$3.$low));
				nsec = nsec - (1000000000) >> 0;
			} else if (nsec < 0) {
				dsec = (x$4 = new $Int64(0, 1), new $Int64(dsec.$high - x$4.$high, dsec.$low - x$4.$low));
				nsec = nsec + (1000000000) >> 0;
			}
			t.wall = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & ~0, (x$6.$low & ~1073741823) >>> 0)), x$7 = (new $Uint64(0, nsec)), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0));
			t.addSec(dsec);
			if (!((x$8 = (x$9 = t.wall, new $Uint64(x$9.$high & 2147483648, (x$9.$low & 0) >>> 0)), (x$8.$high === 0 && x$8.$low === 0)))) {
				te = (x$10 = t.ext, x$11 = (new $Int64(d.$high, d.$low)), new $Int64(x$10.$high + x$11.$high, x$10.$low + x$11.$low));
				if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$12 = t.ext, (te.$high > x$12.$high || (te.$high === x$12.$high && te.$low > x$12.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$13 = t.ext, (te.$high < x$13.$high || (te.$high === x$13.$high && te.$low < x$13.$low)))) {
					t.stripMono();
				} else {
					t.ext = te;
				}
			}
			return t;
		};
		Time.prototype.Add = function(d) { return this.$val.Add(d); };
		Time.ptr.prototype.Sub = function(u) {
			var d, d$1, t, te, u, ue, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			t = this;
			if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
				te = t.ext;
				ue = u.ext;
				d = ((x$5 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$5.$high, x$5.$low)));
				if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
					return new Duration(2147483647, 4294967295);
				}
				if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
					return new Duration(-2147483648, 0);
				}
				return d;
			}
			d$1 = (x$6 = $mul64(((x$7 = (x$8 = t.sec(), x$9 = u.sec(), new $Int64(x$8.$high - x$9.$high, x$8.$low - x$9.$low)), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$10 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$6.$high + x$10.$high, x$6.$low + x$10.$low));
			if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
				return d$1;
			} else if ($clone(t, Time).Before($clone(u, Time))) {
				return new Duration(-2147483648, 0);
			} else {
				return new Duration(2147483647, 4294967295);
			}
		};
		Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
		Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
			var _r, _r$1, _r$2, _tuple, _tuple$1, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			year = _tuple[0];
			month = _tuple[1];
			day = _tuple[2];
			_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			hour = _tuple$1[0];
			min = _tuple$1[1];
			sec = _tuple$1[2];
			_r$2 = Date(year + years >> 0, month + ((months$1 >> 0)) >> 0, day + days$1 >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
		Time.ptr.prototype.date = function(full) {
			var _r, _r$1, _tuple, day, full, month, t, yday, year, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			year = 0;
			month = 0;
			day = 0;
			yday = 0;
			t = this;
			_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			year = _tuple[0];
			month = _tuple[1];
			day = _tuple[2];
			yday = _tuple[3];
			$s = -1; return [year, month, day, yday];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.date = function(full) { return this.$val.date(full); };
		absDate = function(abs, full) {
			var _q, abs, begin, d, day, end, full, month, n, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
			year = 0;
			month = 0;
			day = 0;
			yday = 0;
			d = $div64(abs, new $Uint64(0, 86400), false);
			n = $div64(d, new $Uint64(0, 146097), false);
			y = $mul64(new $Uint64(0, 400), n);
			d = (x$1 = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x$1.$high, d.$low - x$1.$low));
			n = $div64(d, new $Uint64(0, 36524), false);
			n = (x$2 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$2.$high, n.$low - x$2.$low));
			y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$3.$high, y.$low + x$3.$low));
			d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$4.$high, d.$low - x$4.$low));
			n = $div64(d, new $Uint64(0, 1461), false);
			y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$5.$high, y.$low + x$5.$low));
			d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$6.$high, d.$low - x$6.$low));
			n = $div64(d, new $Uint64(0, 365), false);
			n = (x$7 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$7.$high, n.$low - x$7.$low));
			y = (x$8 = n, new $Uint64(y.$high + x$8.$high, y.$low + x$8.$low));
			d = (x$9 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$9.$high, d.$low - x$9.$low));
			year = (((x$10 = (x$11 = (new $Int64(y.$high, y.$low)), new $Int64(x$11.$high + -69, x$11.$low + 4075721025)), x$10.$low + ((x$10.$high >> 31) * 4294967296)) >> 0));
			yday = ((d.$low >> 0));
			if (!full) {
				return [year, month, day, yday];
			}
			day = yday;
			if (isLeap(year)) {
				if (day > 59) {
					day = day - (1) >> 0;
				} else if ((day === 59)) {
					month = 2;
					day = 29;
					return [year, month, day, yday];
				}
			}
			month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
			end = (((x$12 = month + 1 >> 0, ((x$12 < 0 || x$12 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$12])) >> 0));
			begin = 0;
			if (day >= end) {
				month = month + (1) >> 0;
				begin = end;
			} else {
				begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
			}
			month = month + (1) >> 0;
			day = (day - begin >> 0) + 1 >> 0;
			return [year, month, day, yday];
		};
		daysIn = function(m, year) {
			var m, x$1, year;
			if ((m === 2) && isLeap(year)) {
				return 29;
			}
			return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0) >> 0));
		};
		unixTime = function(sec, nsec) {
			var nsec, sec;
			return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
		};
		Time.ptr.prototype.UTC = function() {
			var t;
			t = this;
			t.setLoc(utcLoc);
			return t;
		};
		Time.prototype.UTC = function() { return this.$val.UTC(); };
		Time.ptr.prototype.Local = function() {
			var t;
			t = this;
			t.setLoc($pkg.Local);
			return t;
		};
		Time.prototype.Local = function() { return this.$val.Local(); };
		Time.ptr.prototype.In = function(loc) {
			var loc, t;
			t = this;
			if (loc === ptrType$2.nil) {
				$panic(new $String("time: missing Location in call to Time.In"));
			}
			t.setLoc(loc);
			return t;
		};
		Time.prototype.In = function(loc) { return this.$val.In(loc); };
		Time.ptr.prototype.Location = function() {
			var l, t;
			t = this;
			l = t.loc;
			if (l === ptrType$2.nil) {
				l = $pkg.UTC;
			}
			return l;
		};
		Time.prototype.Location = function() { return this.$val.Location(); };
		Time.ptr.prototype.Zone = function() {
			var _r, _tuple, name, offset, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; name = $f.name; offset = $f.offset; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			name = "";
			offset = 0;
			t = this;
			_r = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			name = _tuple[0];
			offset = _tuple[1];
			$s = -1; return [name, offset];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f._r = _r; $f._tuple = _tuple; $f.name = name; $f.offset = offset; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.Zone = function() { return this.$val.Zone(); };
		Time.ptr.prototype.Unix = function() {
			var t;
			t = this;
			return t.unixSec();
		};
		Time.prototype.Unix = function() { return this.$val.Unix(); };
		Time.ptr.prototype.UnixNano = function() {
			var t, x$1, x$2;
			t = this;
			return (x$1 = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$2 = (new $Int64(0, t.nsec())), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		};
		Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
		Time.ptr.prototype.MarshalBinary = function() {
			var _q, _r, _r$1, _tuple, enc, nsec, offset, offsetMin, sec, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; enc = $f.enc; nsec = $f.nsec; offset = $f.offset; offsetMin = $f.offsetMin; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			offsetMin = 0;
			/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
				offsetMin = -1;
				$s = 3; continue;
			/* } else { */ case 2:
				_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				offset = _tuple[1];
				if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
					$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
				}
				offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				if (offset < -32768 || (offset === -1) || offset > 32767) {
					$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
				}
				offsetMin = ((offset << 16 >> 16));
			/* } */ case 3:
			sec = t.sec();
			nsec = t.nsec();
			enc = new sliceType$3([1, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
			$s = -1; return [enc, $ifaceNil];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.enc = enc; $f.nsec = nsec; $f.offset = offset; $f.offsetMin = offsetMin; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
		Time.ptr.prototype.UnmarshalBinary = function(data) {
			var _r, _tuple, buf, data, localoff, nsec, offset, sec, t, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data = $f.data; localoff = $f.localoff; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; t = $f.t; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			buf = data;
			if (buf.$length === 0) {
				$s = -1; return errors.New("Time.UnmarshalBinary: no data");
			}
			if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
				$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
			}
			if (!((buf.$length === 15))) {
				$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
			}
			buf = $subslice(buf, 1);
			sec = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (x$7 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$8 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$7.$high | x$8.$high, (x$7.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$6.$high | x$9.$high, (x$6.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$5.$high | x$10.$high, (x$5.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$3.$high | x$12.$high, (x$3.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$2.$high | x$13.$high, (x$2.$low | x$13.$low) >>> 0)), x$14 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x$1.$high | x$14.$high, (x$1.$low | x$14.$low) >>> 0));
			buf = $subslice(buf, 8);
			nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
			buf = $subslice(buf, 4);
			offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
			Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
			t.wall = (new $Uint64(0, nsec));
			t.ext = sec;
			/* */ if (offset === -60) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (offset === -60) { */ case 1:
				t.setLoc(utcLoc);
				$s = 3; continue;
			/* } else { */ case 2:
				_r = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				localoff = _tuple[1];
				if (offset === localoff) {
					t.setLoc($pkg.Local);
				} else {
					t.setLoc(FixedZone("", offset));
				}
			/* } */ case 3:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data = data; $f.localoff = localoff; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.UnmarshalBinary = function(data) { return this.$val.UnmarshalBinary(data); };
		Time.ptr.prototype.GobEncode = function() {
			var _r, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
		Time.ptr.prototype.GobDecode = function(data) {
			var _r, data, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = t.UnmarshalBinary(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f._r = _r; $f.data = data; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.GobDecode = function(data) { return this.$val.GobDecode(data); };
		Time.ptr.prototype.MarshalJSON = function() {
			var _r, _r$1, b, t, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			y = _r;
			if (y < 0 || y >= 10000) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
			}
			b = $makeSlice(sliceType$3, 0, 37);
			b = $append(b, 34);
			_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			b = _r$1;
			b = $append(b, 34);
			$s = -1; return [b, $ifaceNil];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
		Time.ptr.prototype.UnmarshalJSON = function(data) {
			var _r, _tuple, data, err, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			if (($bytesToString(data)) === "null") {
				$s = -1; return $ifaceNil;
			}
			err = $ifaceNil;
			_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			Time.copy(t, _tuple[0]);
			err = _tuple[1];
			$s = -1; return err;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.UnmarshalJSON = function(data) { return this.$val.UnmarshalJSON(data); };
		Time.ptr.prototype.MarshalText = function() {
			var _r, _r$1, b, t, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			y = _r;
			if (y < 0 || y >= 10000) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
			}
			b = $makeSlice(sliceType$3, 0, 35);
			_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [_r$1, $ifaceNil];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
		Time.ptr.prototype.UnmarshalText = function(data) {
			var _r, _tuple, data, err, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			t = this;
			err = $ifaceNil;
			_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			Time.copy(t, _tuple[0]);
			err = _tuple[1];
			$s = -1; return err;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		};
		Time.prototype.UnmarshalText = function(data) { return this.$val.UnmarshalText(data); };
		Unix = function(sec, nsec) {
			var n, nsec, sec, x$1, x$2, x$3, x$4;
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
				n = $div64(nsec, new $Int64(0, 1000000000), false);
				sec = (x$1 = n, new $Int64(sec.$high + x$1.$high, sec.$low + x$1.$low));
				nsec = (x$2 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$2.$high, nsec.$low - x$2.$low));
				if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
					nsec = (x$3 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$3.$high, nsec.$low + x$3.$low));
					sec = (x$4 = new $Int64(0, 1), new $Int64(sec.$high - x$4.$high, sec.$low - x$4.$low));
				}
			}
			return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
		};
		$pkg.Unix = Unix;
		isLeap = function(year) {
			var _r, _r$1, _r$2, year;
			return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
		};
		norm = function(hi, lo, base) {
			var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
			nhi = 0;
			nlo = 0;
			if (lo < 0) {
				n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
				hi = hi - (n) >> 0;
				lo = lo + (($imul(n, base))) >> 0;
			}
			if (lo >= base) {
				n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				hi = hi + (n$1) >> 0;
				lo = lo - (($imul(n$1, base))) >> 0;
			}
			_tmp = hi;
			_tmp$1 = lo;
			nhi = _tmp;
			nlo = _tmp$1;
			return [nhi, nlo];
		};
		Date = function(year, month, day, hour, min, sec, nsec, loc) {
			var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (loc === ptrType$2.nil) {
				$panic(new $String("time: missing Location in call to Date"));
			}
			m = ((month >> 0)) - 1 >> 0;
			_tuple = norm(year, m, 12);
			year = _tuple[0];
			m = _tuple[1];
			month = ((m >> 0)) + 1 >> 0;
			_tuple$1 = norm(sec, nsec, 1000000000);
			sec = _tuple$1[0];
			nsec = _tuple$1[1];
			_tuple$2 = norm(min, sec, 60);
			min = _tuple$2[0];
			sec = _tuple$2[1];
			_tuple$3 = norm(hour, min, 60);
			hour = _tuple$3[0];
			min = _tuple$3[1];
			_tuple$4 = norm(day, hour, 24);
			day = _tuple$4[0];
			hour = _tuple$4[1];
			y = ((x$1 = (x$2 = (new $Int64(0, year)), new $Int64(x$2.$high - -69, x$2.$low - 4075721025)), new $Uint64(x$1.$high, x$1.$low)));
			n = $div64(y, new $Uint64(0, 400), false);
			y = (x$3 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
			d = $mul64(new $Uint64(0, 146097), n);
			n = $div64(y, new $Uint64(0, 100), false);
			y = (x$4 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$4.$high, y.$low - x$4.$low));
			d = (x$5 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$5.$high, d.$low + x$5.$low));
			n = $div64(y, new $Uint64(0, 4), false);
			y = (x$6 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$6.$high, y.$low - x$6.$low));
			d = (x$7 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
			n = y;
			d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
			d = (x$9 = (new $Uint64(0, (x$10 = month - 1 >> 0, ((x$10 < 0 || x$10 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$10])))), new $Uint64(d.$high + x$9.$high, d.$low + x$9.$low));
			if (isLeap(year) && month >= 3) {
				d = (x$11 = new $Uint64(0, 1), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
			}
			d = (x$12 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$12.$high, d.$low + x$12.$low));
			abs = $mul64(d, new $Uint64(0, 86400));
			abs = (x$13 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$13.$high, abs.$low + x$13.$low));
			unix = (x$14 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$14.$high + -2147483647, x$14.$low + 3844486912));
			_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$5 = _r;
			offset = _tuple$5[1];
			start = _tuple$5[2];
			end = _tuple$5[3];
			/* */ if (!((offset === 0))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!((offset === 0))) { */ case 2:
					utc = (x$15 = (new $Int64(0, offset)), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
					/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
					/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
					/* */ $s = 7; continue;
					/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
						_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_tuple$6 = _r$1;
						offset = _tuple$6[1];
						$s = 7; continue;
					/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
						_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_tuple$7 = _r$2;
						offset = _tuple$7[1];
					/* } */ case 7:
				case 4:
				unix = (x$16 = (new $Int64(0, offset)), new $Int64(unix.$high - x$16.$high, unix.$low - x$16.$low));
			/* } */ case 3:
			t = $clone(unixTime(unix, ((nsec >> 0))), Time);
			t.setLoc(loc);
			$s = -1; return t;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Date = Date;
		Time.ptr.prototype.Truncate = function(d) {
			var _tuple, d, r, t;
			t = this;
			t.stripMono();
			if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
				return t;
			}
			_tuple = div($clone(t, Time), d);
			r = _tuple[1];
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		};
		Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
		Time.ptr.prototype.Round = function(d) {
			var _tuple, d, r, t;
			t = this;
			t.stripMono();
			if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
				return t;
			}
			_tuple = div($clone(t, Time), d);
			r = _tuple[1];
			if (lessThanHalf(r, d)) {
				return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
			}
			return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
		};
		Time.prototype.Round = function(d) { return this.$val.Round(d); };
		div = function(t, d) {
			var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
			qmod2 = 0;
			r = new Duration(0, 0);
			neg = false;
			nsec = t.nsec();
			sec = t.sec();
			if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
				neg = true;
				sec = new $Int64(-sec.$high, -sec.$low);
				nsec = -nsec;
				if (nsec < 0) {
					nsec = nsec + (1000000000) >> 0;
					sec = (x$1 = new $Int64(0, 1), new $Int64(sec.$high - x$1.$high, sec.$low - x$1.$low));
				}
			}
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$2 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$2.$high === 0 && x$2.$low === 0))) {
				qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
				r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
			} else if ((x$3 = $div64(d, new Duration(0, 1000000000), true), (x$3.$high === 0 && x$3.$low === 0))) {
				d1 = ((x$4 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$4.$high, x$4.$low)));
				qmod2 = (((x$5 = $div64(sec, d1, false), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)) & 1;
				r = (x$6 = $mul64(((x$7 = $div64(sec, d1, true), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$8 = (new Duration(0, nsec)), new Duration(x$6.$high + x$8.$high, x$6.$low + x$8.$low));
			} else {
				sec$1 = (new $Uint64(sec.$high, sec.$low));
				tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
				u1 = $shiftRightUint64(tmp, 32);
				u0 = $shiftLeft64(tmp, 32);
				tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
				_tmp = u0;
				_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
				u0x = _tmp;
				u0 = _tmp$1;
				if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
					u1 = (x$9 = new $Uint64(0, 1), new $Uint64(u1.$high + x$9.$high, u1.$low + x$9.$low));
				}
				_tmp$2 = u0;
				_tmp$3 = (x$10 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$10.$high, u0.$low + x$10.$low));
				u0x = _tmp$2;
				u0 = _tmp$3;
				if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
					u1 = (x$11 = new $Uint64(0, 1), new $Uint64(u1.$high + x$11.$high, u1.$low + x$11.$low));
				}
				d1$1 = (new $Uint64(d.$high, d.$low));
				while (true) {
					if (!(!((x$12 = $shiftRightUint64(d1$1, 63), (x$12.$high === 0 && x$12.$low === 1))))) { break; }
					d1$1 = $shiftLeft64(d1$1, (1));
				}
				d0 = new $Uint64(0, 0);
				while (true) {
					qmod2 = 0;
					if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
						qmod2 = 1;
						_tmp$4 = u0;
						_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
						u0x = _tmp$4;
						u0 = _tmp$5;
						if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
							u1 = (x$13 = new $Uint64(0, 1), new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
						}
						u1 = (x$14 = d1$1, new $Uint64(u1.$high - x$14.$high, u1.$low - x$14.$low));
					}
					if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$15 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$15.$high && d0.$low === x$15.$low))) {
						break;
					}
					d0 = $shiftRightUint64(d0, (1));
					d0 = (x$16 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$16.$high, (d0.$low | x$16.$low) >>> 0));
					d1$1 = $shiftRightUint64(d1$1, (1));
				}
				r = (new Duration(u0.$high, u0.$low));
			}
			if (neg && !((r.$high === 0 && r.$low === 0))) {
				qmod2 = (qmod2 ^ (1)) >> 0;
				r = new Duration(d.$high - r.$high, d.$low - r.$low);
			}
			return [qmod2, r];
		};
		Location.ptr.prototype.get = function() {
			var l, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			l = this;
			if (l === ptrType$2.nil) {
				$s = -1; return utcLoc;
			}
			/* */ if (l === localLoc) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (l === localLoc) { */ case 1:
				$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			$s = -1; return l;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
		};
		Location.prototype.get = function() { return this.$val.get(); };
		Location.ptr.prototype.String = function() {
			var _r, l, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			l = this;
			_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r.name;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
		};
		Location.prototype.String = function() { return this.$val.String(); };
		FixedZone = function(name, offset) {
			var l, name, offset, x$1;
			l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
			l.cacheZone = (x$1 = l.zone, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
			return l;
		};
		$pkg.FixedZone = FixedZone;
		Location.ptr.prototype.lookup = function(sec) {
			var _q, _r, end, hi, l, lim, lo, m, name, offset, sec, start, tx, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, zone$1, zone$2, zone$3, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			name = "";
			offset = 0;
			start = new $Int64(0, 0);
			end = new $Int64(0, 0);
			l = this;
			_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
			if (l.zone.$length === 0) {
				name = "UTC";
				offset = 0;
				start = new $Int64(-2147483648, 0);
				end = new $Int64(2147483647, 4294967295);
				$s = -1; return [name, offset, start, end];
			}
			zone$1 = l.cacheZone;
			if (!(zone$1 === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
				name = zone$1.name;
				offset = zone$1.offset;
				start = l.cacheStart;
				end = l.cacheEnd;
				$s = -1; return [name, offset, start, end];
			}
			if ((l.tx.$length === 0) || (x$3 = (x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).when, (sec.$high < x$3.$high || (sec.$high === x$3.$high && sec.$low < x$3.$low)))) {
				zone$2 = (x$5 = l.zone, x$6 = l.lookupFirstZone(), ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
				name = zone$2.name;
				offset = zone$2.offset;
				start = new $Int64(-2147483648, 0);
				if (l.tx.$length > 0) {
					end = (x$7 = l.tx, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])).when;
				} else {
					end = new $Int64(2147483647, 4294967295);
				}
				$s = -1; return [name, offset, start, end];
			}
			tx = l.tx;
			end = new $Int64(2147483647, 4294967295);
			lo = 0;
			hi = tx.$length;
			while (true) {
				if (!((hi - lo >> 0) > 1)) { break; }
				m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
				if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
					end = lim;
					hi = m;
				} else {
					lo = m;
				}
			}
			zone$3 = (x$8 = l.zone, x$9 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]));
			name = zone$3.name;
			offset = zone$3.offset;
			start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
			$s = -1; return [name, offset, start, end];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
		};
		Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
		Location.ptr.prototype.lookupFirstZone = function() {
			var _i, _ref, l, x$1, x$2, x$3, x$4, x$5, x$6, zi, zi$1;
			l = this;
			if (!l.firstZoneUsed()) {
				return 0;
			}
			if (l.tx.$length > 0 && (x$1 = l.zone, x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).isDST) {
				zi = (((x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).index >> 0)) - 1 >> 0;
				while (true) {
					if (!(zi >= 0)) { break; }
					if (!(x$5 = l.zone, ((zi < 0 || zi >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi])).isDST) {
						return zi;
					}
					zi = zi - (1) >> 0;
				}
			}
			_ref = l.zone;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				zi$1 = _i;
				if (!(x$6 = l.zone, ((zi$1 < 0 || zi$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + zi$1])).isDST) {
					return zi$1;
				}
				_i++;
			}
			return 0;
		};
		Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
		Location.ptr.prototype.firstZoneUsed = function() {
			var _i, _ref, l, tx;
			l = this;
			_ref = l.tx;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
				if (tx.index === 0) {
					return true;
				}
				_i++;
			}
			return false;
		};
		Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
		Location.ptr.prototype.lookupName = function(name, unix) {
			var _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x$1, x$2, x$3, zone$1, zone$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i$1 = $f.i$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			offset = 0;
			ok = false;
			l = this;
			_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
			_ref = l.zone;
			_i = 0;
			/* while (true) { */ case 2:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
				i = _i;
				zone$1 = (x$1 = l.zone, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
				/* */ if (zone$1.name === name) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (zone$1.name === name) { */ case 4:
					_r$1 = l.lookup((x$2 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$2.$high, unix.$low - x$2.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple = _r$1;
					nam = _tuple[0];
					offset$1 = _tuple[1];
					if (nam === zone$1.name) {
						_tmp = offset$1;
						_tmp$1 = true;
						offset = _tmp;
						ok = _tmp$1;
						$s = -1; return [offset, ok];
					}
				/* } */ case 5:
				_i++;
			/* } */ $s = 2; continue; case 3:
			_ref$1 = l.zone;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				zone$2 = (x$3 = l.zone, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1]));
				if (zone$2.name === name) {
					_tmp$2 = zone$2.offset;
					_tmp$3 = true;
					offset = _tmp$2;
					ok = _tmp$3;
					$s = -1; return [offset, ok];
				}
				_i$1++;
			}
			$s = -1; return [offset, ok];
			/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
		};
		Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
		ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
		Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
		ptrType$7.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
		Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
		Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
		Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}];
		ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool], false)}];
		ParseError.init("", [{prop: "Layout", name: "Layout", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", embedded: false, exported: true, typ: $String, tag: ""}]);
		Time.init("time", [{prop: "wall", name: "wall", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
		Location.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", embedded: false, exported: false, typ: ptrType, tag: ""}]);
		zone.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", embedded: false, exported: false, typ: $Bool, tag: ""}]);
		zoneTrans.init("time", [{prop: "when", name: "when", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
			localOnce = new nosync.Once.ptr(false, false);
			zoneSources = new sliceType$2([runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
			std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
			longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
			shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
			shortMonthNames = new sliceType$2(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
			longMonthNames = new sliceType$2(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
			atoiError = errors.New("time: invalid number");
			errBad = errors.New("bad value for field");
			errLeadingInt = errors.New("time: bad [0-9]*");
			months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
			days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
			daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
			startNano = (x = runtimeNano(), new $Int64(x.$high - 0, x.$low - 1));
			utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
			$pkg.UTC = utcLoc;
			$pkg.Local = localLoc;
			errLocation = errors.New("time: invalid location name");
			badData = errors.New("malformed time zone information");
			$unused(new sliceType$2(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]));
			init();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["github.com/rocketlaunchr/react/forks/mapstructure"] = (function() {
		var $pkg = {}, $init, errors, fmt, reflect, sort, strconv, strings, time, Error, jsonNumber, DecodeHookFunc, DecodeHookFuncType, DecodeHookFuncKind, DecoderConfig, Decoder, Metadata, field, sliceType, sliceType$1, sliceType$2, ptrType$1, sliceType$3, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$5, mapType, ptrType$6, structType, sliceType$6, sliceType$7, typedDecodeHook, DecodeHookExec, sprintf, errorf, appendErrors, NewDecoder, getKind;
		errors = $packages["errors"];
		fmt = $packages["github.com/rocketlaunchr/react/forks/fmtless"];
		reflect = $packages["reflect"];
		sort = $packages["sort"];
		strconv = $packages["strconv"];
		strings = $packages["strings"];
		time = $packages["time"];
		Error = $pkg.Error = $newType(0, $kindStruct, "mapstructure.Error", true, "github.com/rocketlaunchr/react/forks/mapstructure", true, function(Errors_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Errors = sliceType$1.nil;
				return;
			}
			this.Errors = Errors_;
		});
		jsonNumber = $pkg.jsonNumber = $newType(8, $kindInterface, "mapstructure.jsonNumber", true, "github.com/rocketlaunchr/react/forks/mapstructure", false, null);
		DecodeHookFunc = $pkg.DecodeHookFunc = $newType(8, $kindInterface, "mapstructure.DecodeHookFunc", true, "github.com/rocketlaunchr/react/forks/mapstructure", true, null);
		DecodeHookFuncType = $pkg.DecodeHookFuncType = $newType(4, $kindFunc, "mapstructure.DecodeHookFuncType", true, "github.com/rocketlaunchr/react/forks/mapstructure", true, null);
		DecodeHookFuncKind = $pkg.DecodeHookFuncKind = $newType(4, $kindFunc, "mapstructure.DecodeHookFuncKind", true, "github.com/rocketlaunchr/react/forks/mapstructure", true, null);
		DecoderConfig = $pkg.DecoderConfig = $newType(0, $kindStruct, "mapstructure.DecoderConfig", true, "github.com/rocketlaunchr/react/forks/mapstructure", true, function(DecodeHook_, ErrorUnused_, ZeroFields_, WeaklyTypedInput_, Metadata_, Result_, TagName_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.DecodeHook = $ifaceNil;
				this.ErrorUnused = false;
				this.ZeroFields = false;
				this.WeaklyTypedInput = false;
				this.Metadata = ptrType$2.nil;
				this.Result = $ifaceNil;
				this.TagName = "";
				return;
			}
			this.DecodeHook = DecodeHook_;
			this.ErrorUnused = ErrorUnused_;
			this.ZeroFields = ZeroFields_;
			this.WeaklyTypedInput = WeaklyTypedInput_;
			this.Metadata = Metadata_;
			this.Result = Result_;
			this.TagName = TagName_;
		});
		Decoder = $pkg.Decoder = $newType(0, $kindStruct, "mapstructure.Decoder", true, "github.com/rocketlaunchr/react/forks/mapstructure", true, function(config_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.config = ptrType$4.nil;
				return;
			}
			this.config = config_;
		});
		Metadata = $pkg.Metadata = $newType(0, $kindStruct, "mapstructure.Metadata", true, "github.com/rocketlaunchr/react/forks/mapstructure", true, function(Keys_, Unused_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Keys = sliceType$1.nil;
				this.Unused = sliceType$1.nil;
				return;
			}
			this.Keys = Keys_;
			this.Unused = Unused_;
		});
		field = $newType(0, $kindStruct, "mapstructure.field", true, "github.com/rocketlaunchr/react/forks/mapstructure", false, function(field_, val_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.field = new reflect.StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
				this.val = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
				return;
			}
			this.field = field_;
			this.val = val_;
		});
		sliceType = $sliceType($emptyInterface);
		sliceType$1 = $sliceType($String);
		sliceType$2 = $sliceType($Uint8);
		ptrType$1 = $ptrType(Error);
		sliceType$3 = $sliceType($error);
		ptrType$2 = $ptrType(Metadata);
		ptrType$3 = $ptrType(Decoder);
		ptrType$4 = $ptrType(DecoderConfig);
		ptrType$5 = $ptrType(reflect.rtype);
		sliceType$5 = $sliceType(reflect.Value);
		mapType = $mapType($String, $emptyInterface);
		ptrType$6 = $ptrType(mapType);
		structType = $structType("", []);
		sliceType$6 = $sliceType(field);
		sliceType$7 = $sliceType($Int);
		typedDecodeHook = function(h) {
			var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, f1, f2, h, potential, pt, raw, v, vt, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; f1 = $f.f1; f2 = $f.f2; h = $f.h; potential = $f.potential; pt = $f.pt; raw = $f.raw; v = $f.v; vt = $f.vt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			f1 = $throwNilPointerError;
			f2 = $throwNilPointerError;
			potential = new sliceType([new DecodeHookFuncType(f1), new DecodeHookFuncKind(f2)]);
			_r = reflect.ValueOf(h); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			vt = $clone(v, reflect.Value).Type();
			_ref = potential;
			_i = 0;
			/* while (true) { */ case 2:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
				raw = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$1 = reflect.ValueOf(raw); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = $clone(_r$1, reflect.Value).Type(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				pt = _r$2;
				_r$3 = vt.ConvertibleTo(pt); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r$3) { */ case 6:
					_r$4 = $clone(v, reflect.Value).Convert(pt); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = $clone(_r$4, reflect.Value).Interface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$s = -1; return _r$5;
				/* } */ case 7:
				_i++;
			/* } */ $s = 2; continue; case 3:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: typedDecodeHook }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.f1 = f1; $f.f2 = f2; $f.h = h; $f.potential = potential; $f.pt = pt; $f.raw = raw; $f.v = v; $f.vt = vt; $f.$s = $s; $f.$r = $r; return $f;
		};
		DecodeHookExec = function(raw, from, to, data) {
			var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _ref, data, f, f$1, f$2, from, raw, to, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; data = $f.data; f = $f.f; f$1 = $f.f$1; f$2 = $f.f$2; from = $f.from; raw = $f.raw; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = typedDecodeHook(raw); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_ref = _r;
			/* */ if ($assertType(_ref, DecodeHookFuncType, true)[1]) { $s = 2; continue; }
			/* */ if ($assertType(_ref, DecodeHookFuncKind, true)[1]) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($assertType(_ref, DecodeHookFuncType, true)[1]) { */ case 2:
				f = _ref.$val;
				_r$1 = f(from, to, data); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if ($assertType(_ref, DecodeHookFuncKind, true)[1]) { */ case 3:
				f$1 = _ref.$val;
				_r$2 = from.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg = _r$2;
				_r$3 = to.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$1 = _r$3;
				_arg$2 = data;
				_r$4 = f$1(_arg, _arg$1, _arg$2); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else { */ case 4:
				f$2 = _ref;
				$s = -1; return [$ifaceNil, errors.New("invalid decode hook signature")];
			/* } */ case 5:
			$s = -1; return [$ifaceNil, $ifaceNil];
			/* */ } return; } if ($f === undefined) { $f = { $blk: DecodeHookExec }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.data = data; $f.f = f; $f.f$1 = f$1; $f.f$2 = f$2; $f.from = from; $f.raw = raw; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.DecodeHookExec = DecodeHookExec;
		sprintf = function(fmts, args) {
			var _r, args, fmts, rStr, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; args = $f.args; fmts = $f.fmts; rStr = $f.rStr; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			rStr = "";
			$deferred.push([(function() {
				var r;
				r = $recover();
				if (!($interfaceIsEqual(r, $ifaceNil))) {
					console.log("fmtless error: " + $assertType(r, $String));
				}
			}), []]);
			_r = fmt.Sprintf(fmts, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			rStr = _r;
			$s = -1; return rStr;
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  rStr; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: sprintf }; } $f._r = _r; $f.args = args; $f.fmts = fmts; $f.rStr = rStr; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		};
		errorf = function(format, a) {
			var _r, a, format, rErr, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; format = $f.format; rErr = $f.rErr; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			rErr = [rErr];
			rErr[0] = $ifaceNil;
			$deferred.push([(function(rErr) { return function() {
				var r;
				r = $recover();
				if (!($interfaceIsEqual(r, $ifaceNil))) {
					console.log("fmtless error: " + $assertType(r, $String));
					rErr[0] = errors.New($assertType(r, $String));
				}
			}; })(rErr), []]);
			_r = fmt.Errorf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			rErr[0] = _r;
			$s = -1; return rErr[0];
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  rErr[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: errorf }; } $f._r = _r; $f.a = a; $f.format = format; $f.rErr = rErr; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		};
		Error.ptr.prototype.Error = function() {
			var _i, _r, _r$1, _ref, e, err, i, points, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; e = $f.e; err = $f.err; i = $f.i; points = $f.points; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			e = this;
			points = $makeSlice(sliceType$1, e.Errors.$length);
			_ref = e.Errors;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				i = _i;
				err = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r = sprintf("* %s", new sliceType([new $String(err)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				((i < 0 || i >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i] = _r);
				_i++;
			/* } */ $s = 1; continue; case 2:
			$r = sort.Strings(points); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = sprintf("%d error(s) decoding:\n\n%s", new sliceType([new $Int(e.Errors.$length), new $String(strings.Join(points, "\n"))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.e = e; $f.err = err; $f.i = i; $f.points = points; $f.$s = $s; $f.$r = $r; return $f;
		};
		Error.prototype.Error = function() { return this.$val.Error(); };
		Error.ptr.prototype.WrappedErrors = function() {
			var _i, _ref, e, e$1, i, result;
			e = this;
			if (e === ptrType$1.nil) {
				return sliceType$3.nil;
			}
			result = $makeSlice(sliceType$3, e.Errors.$length);
			_ref = e.Errors;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				e$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= result.$length) ? ($throwRuntimeError("index out of range"), undefined) : result.$array[result.$offset + i] = errors.New(e$1));
				_i++;
			}
			return result;
		};
		Error.prototype.WrappedErrors = function() { return this.$val.WrappedErrors(); };
		appendErrors = function(errors$1, err) {
			var _r, _ref, e, e$1, err, errors$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _ref = $f._ref; e = $f.e; e$1 = $f.e$1; err = $f.err; errors$1 = $f.errors$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_ref = err;
			/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if ($assertType(_ref, ptrType$1, true)[1]) { */ case 1:
				e = _ref.$val;
				$s = -1; return $appendSlice(errors$1, e.Errors);
			/* } else { */ case 2:
				e$1 = _ref;
				_r = e$1.Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return $append(errors$1, _r);
			/* } */ case 3:
			$s = -1; return sliceType$1.nil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: appendErrors }; } $f._r = _r; $f._ref = _ref; $f.e = e; $f.e$1 = e$1; $f.err = err; $f.errors$1 = errors$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		NewDecoder = function(config) {
			var _r, _r$1, config, result, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; config = $f.config; result = $f.result; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = reflect.ValueOf(config.Result); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			val = _r;
			if (!(($clone(val, reflect.Value).Kind() === 22))) {
				$s = -1; return [ptrType$3.nil, errors.New("result must be a pointer")];
			}
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
			if (!$clone(val, reflect.Value).CanAddr()) {
				$s = -1; return [ptrType$3.nil, errors.New("result must be addressable (a pointer)")];
			}
			if (!(config.Metadata === ptrType$2.nil)) {
				if (config.Metadata.Keys === sliceType$1.nil) {
					config.Metadata.Keys = $makeSlice(sliceType$1, 0);
				}
				if (config.Metadata.Unused === sliceType$1.nil) {
					config.Metadata.Unused = $makeSlice(sliceType$1, 0);
				}
			}
			if (config.TagName === "") {
				config.TagName = "mapstructure";
			}
			result = new Decoder.ptr(config);
			$s = -1; return [result, $ifaceNil];
			/* */ } return; } if ($f === undefined) { $f = { $blk: NewDecoder }; } $f._r = _r; $f._r$1 = _r$1; $f.config = config; $f.result = result; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.NewDecoder = NewDecoder;
		Decoder.ptr.prototype.Decode = function(input) {
			var _arg, _arg$1, _r, _r$1, _r$2, d, input, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; input = $f.input; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_arg = input;
			_r = reflect.ValueOf(d.config.Result); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = $clone(_r, reflect.Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = $clone(_r$1, reflect.Value);
			_r$2 = d.decode("", _arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Decode }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.input = input; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.Decode = function(input) { return this.$val.Decode(input); };
		Decoder.ptr.prototype.decode = function(name, input, outVal) {
			var _1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, d, err, err$1, input, inputVal, name, outVal, outputKind, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; d = $f.d; err = $f.err; err$1 = $f.err$1; input = $f.input; inputVal = $f.inputVal; name = $f.name; outVal = $f.outVal; outputKind = $f.outputKind; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			inputVal = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
			/* */ if (!($interfaceIsEqual(input, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(input, $ifaceNil))) { */ case 1:
				_r = reflect.ValueOf(input); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				inputVal = _r;
				if (($clone(inputVal, reflect.Value).Kind() === 22) && $clone(inputVal, reflect.Value).IsNil()) {
					input = $ifaceNil;
				}
			/* } */ case 2:
			/* */ if ($interfaceIsEqual(input, $ifaceNil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($interfaceIsEqual(input, $ifaceNil)) { */ case 4:
				/* */ if (d.config.ZeroFields) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (d.config.ZeroFields) { */ case 6:
					_r$1 = reflect.Zero($clone(outVal, reflect.Value).Type()); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = $clone(outVal, reflect.Value).Set($clone(_r$1, reflect.Value)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (!(d.config.Metadata === ptrType$2.nil) && !(name === "")) {
						d.config.Metadata.Keys = $append(d.config.Metadata.Keys, name);
					}
				/* } */ case 7:
				$s = -1; return $ifaceNil;
			/* } */ case 5:
			/* */ if (!$clone(inputVal, reflect.Value).IsValid()) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!$clone(inputVal, reflect.Value).IsValid()) { */ case 10:
				_r$2 = reflect.Zero($clone(outVal, reflect.Value).Type()); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = $clone(outVal, reflect.Value).Set($clone(_r$2, reflect.Value)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!(d.config.Metadata === ptrType$2.nil) && !(name === "")) {
					d.config.Metadata.Keys = $append(d.config.Metadata.Keys, name);
				}
				$s = -1; return $ifaceNil;
			/* } */ case 11:
			/* */ if (!($interfaceIsEqual(d.config.DecodeHook, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(d.config.DecodeHook, $ifaceNil))) { */ case 14:
				err = $ifaceNil;
				_r$3 = DecodeHookExec(d.config.DecodeHook, $clone(inputVal, reflect.Value).Type(), $clone(outVal, reflect.Value).Type(), input); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				input = _tuple[0];
				err = _tuple[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 17:
					_r$4 = errorf("error decoding '%s': %s", new sliceType([new $String(name), err])); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return _r$4;
				/* } */ case 18:
			/* } */ case 15:
			err$1 = $ifaceNil;
			outputKind = getKind($clone(outVal, reflect.Value));
				_1 = outputKind;
				/* */ if (_1 === (1)) { $s = 21; continue; }
				/* */ if (_1 === (20)) { $s = 22; continue; }
				/* */ if (_1 === (24)) { $s = 23; continue; }
				/* */ if (_1 === (2)) { $s = 24; continue; }
				/* */ if (_1 === (7)) { $s = 25; continue; }
				/* */ if (_1 === (13)) { $s = 26; continue; }
				/* */ if (_1 === (25)) { $s = 27; continue; }
				/* */ if (_1 === (21)) { $s = 28; continue; }
				/* */ if (_1 === (22)) { $s = 29; continue; }
				/* */ if (_1 === (23)) { $s = 30; continue; }
				/* */ if (_1 === (17)) { $s = 31; continue; }
				/* */ if (_1 === (19)) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (_1 === (1)) { */ case 21:
					_r$5 = d.decodeBool(name, input, $clone(outVal, reflect.Value)); /* */ $s = 35; case 35: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					err$1 = _r$5;
					$s = 34; continue;
				/* } else if (_1 === (20)) { */ case 22:
					_r$6 = d.decodeBasic(name, input, $clone(outVal, reflect.Value)); /* */ $s = 36; case 36: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					err$1 = _r$6;
					$s = 34; continue;
				/* } else if (_1 === (24)) { */ case 23:
					_r$7 = d.decodeString(name, input, $clone(outVal, reflect.Value)); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					err$1 = _r$7;
					$s = 34; continue;
				/* } else if (_1 === (2)) { */ case 24:
					_r$8 = d.decodeInt(name, input, $clone(outVal, reflect.Value)); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					err$1 = _r$8;
					$s = 34; continue;
				/* } else if (_1 === (7)) { */ case 25:
					_r$9 = d.decodeUint(name, input, $clone(outVal, reflect.Value)); /* */ $s = 39; case 39: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					err$1 = _r$9;
					$s = 34; continue;
				/* } else if (_1 === (13)) { */ case 26:
					_r$10 = d.decodeFloat(name, input, $clone(outVal, reflect.Value)); /* */ $s = 40; case 40: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err$1 = _r$10;
					$s = 34; continue;
				/* } else if (_1 === (25)) { */ case 27:
					_r$11 = d.decodeStruct(name, input, $clone(outVal, reflect.Value)); /* */ $s = 41; case 41: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					err$1 = _r$11;
					$s = 34; continue;
				/* } else if (_1 === (21)) { */ case 28:
					_r$12 = d.decodeMap(name, input, $clone(outVal, reflect.Value)); /* */ $s = 42; case 42: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					err$1 = _r$12;
					$s = 34; continue;
				/* } else if (_1 === (22)) { */ case 29:
					_r$13 = d.decodePtr(name, input, $clone(outVal, reflect.Value)); /* */ $s = 43; case 43: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					err$1 = _r$13;
					$s = 34; continue;
				/* } else if (_1 === (23)) { */ case 30:
					_r$14 = d.decodeSlice(name, input, $clone(outVal, reflect.Value)); /* */ $s = 44; case 44: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					err$1 = _r$14;
					$s = 34; continue;
				/* } else if (_1 === (17)) { */ case 31:
					_r$15 = d.decodeArray(name, input, $clone(outVal, reflect.Value)); /* */ $s = 45; case 45: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					err$1 = _r$15;
					$s = 34; continue;
				/* } else if (_1 === (19)) { */ case 32:
					_r$16 = d.decodeFunc(name, input, $clone(outVal, reflect.Value)); /* */ $s = 46; case 46: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					err$1 = _r$16;
					$s = 34; continue;
				/* } else { */ case 33:
					_r$17 = errorf("%s: unsupported type: %s", new sliceType([new $String(name), new reflect.Kind(outputKind)])); /* */ $s = 47; case 47: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$s = -1; return _r$17;
				/* } */ case 34:
			case 20:
			if (!(d.config.Metadata === ptrType$2.nil) && !(name === "")) {
				d.config.Metadata.Keys = $append(d.config.Metadata.Keys, name);
			}
			$s = -1; return err$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decode }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.input = input; $f.inputVal = inputVal; $f.name = name; $f.outVal = outVal; $f.outputKind = outputKind; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decode = function(name, input, outVal) { return this.$val.decode(name, input, outVal); };
		Decoder.ptr.prototype.decodeBasic = function(name, data, val) {
			var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, d, data, dataVal, dataValType, name, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; d = $f.d; data = $f.data; dataVal = $f.dataVal; dataValType = $f.dataValType; name = $f.name; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			if (!($clone(val, reflect.Value).IsValid())) { _v = false; $s = 3; continue s; }
			_r = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = $clone(_r, reflect.Value).IsValid(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 3:
			/* */ if (_v) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_v) { */ case 1:
				_arg = name;
				_arg$1 = data;
				_r$2 = $clone(val, reflect.Value).Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$2 = $clone(_r$2, reflect.Value);
				_r$3 = d.decode(_arg, _arg$1, _arg$2); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } */ case 2:
			_r$4 = reflect.ValueOf(data); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			dataVal = _r$4;
			if (!($clone(dataVal, reflect.Value).Kind() === 22)) { _v$1 = false; $s = 11; continue s; }
			_r$5 = $clone(dataVal, reflect.Value).Type().Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_v$1 = $interfaceIsEqual(_r$5, $clone(val, reflect.Value).Type()); case 11:
			/* */ if (_v$1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v$1) { */ case 9:
				_r$6 = reflect.Indirect($clone(dataVal, reflect.Value)); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				dataVal = _r$6;
			/* } */ case 10:
			/* */ if (!$clone(dataVal, reflect.Value).IsValid()) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!$clone(dataVal, reflect.Value).IsValid()) { */ case 14:
				_r$7 = reflect.Zero($clone(val, reflect.Value).Type()); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				dataVal = _r$7;
			/* } */ case 15:
			dataValType = $clone(dataVal, reflect.Value).Type();
			_r$8 = dataValType.AssignableTo($clone(val, reflect.Value).Type()); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (!_r$8) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!_r$8) { */ case 17:
				_r$9 = errorf("'%s' expected type '%s', got '%s'", new sliceType([new $String(name), $clone(val, reflect.Value).Type(), dataValType])); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$s = -1; return _r$9;
			/* } */ case 18:
			$r = $clone(val, reflect.Value).Set($clone(dataVal, reflect.Value)); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeBasic }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f.d = d; $f.data = data; $f.dataVal = dataVal; $f.dataValType = dataValType; $f.name = name; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeBasic = function(name, data, val) { return this.$val.decodeBasic(name, data, val); };
		Decoder.ptr.prototype.decodeString = function(name, data, val) {
			var _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, converted, d, data, dataKind, dataType, dataVal, elemKind, i, name, uints, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; converted = $f.converted; d = $f.d; data = $f.data; dataKind = $f.dataKind; dataType = $f.dataType; dataVal = $f.dataVal; elemKind = $f.elemKind; i = $f.i; name = $f.name; uints = $f.uints; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			dataKind = getKind($clone(dataVal, reflect.Value));
			converted = true;
				/* */ if ((dataKind === 24)) { $s = 4; continue; }
				/* */ if ((dataKind === 1) && d.config.WeaklyTypedInput) { $s = 5; continue; }
				/* */ if ((dataKind === 2) && d.config.WeaklyTypedInput) { $s = 6; continue; }
				/* */ if ((dataKind === 7) && d.config.WeaklyTypedInput) { $s = 7; continue; }
				/* */ if ((dataKind === 13) && d.config.WeaklyTypedInput) { $s = 8; continue; }
				/* */ if (((dataKind === 23) && d.config.WeaklyTypedInput) || ((dataKind === 17) && d.config.WeaklyTypedInput)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((dataKind === 24)) { */ case 4:
					_r$2 = $clone(dataVal, reflect.Value).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = $clone(val, reflect.Value).SetString(_r$2); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 11; continue;
				/* } else if ((dataKind === 1) && d.config.WeaklyTypedInput) { */ case 5:
					if ($clone(dataVal, reflect.Value).Bool()) {
						$clone(val, reflect.Value).SetString("1");
					} else {
						$clone(val, reflect.Value).SetString("0");
					}
					$s = 11; continue;
				/* } else if ((dataKind === 2) && d.config.WeaklyTypedInput) { */ case 6:
					$clone(val, reflect.Value).SetString(strconv.FormatInt($clone(dataVal, reflect.Value).Int(), 10));
					$s = 11; continue;
				/* } else if ((dataKind === 7) && d.config.WeaklyTypedInput) { */ case 7:
					$clone(val, reflect.Value).SetString(strconv.FormatUint($clone(dataVal, reflect.Value).Uint(), 10));
					$s = 11; continue;
				/* } else if ((dataKind === 13) && d.config.WeaklyTypedInput) { */ case 8:
					$clone(val, reflect.Value).SetString(strconv.FormatFloat($clone(dataVal, reflect.Value).Float(), 102, -1, 64));
					$s = 11; continue;
				/* } else if (((dataKind === 23) && d.config.WeaklyTypedInput) || ((dataKind === 17) && d.config.WeaklyTypedInput)) { */ case 9:
					dataType = $clone(dataVal, reflect.Value).Type();
					_r$3 = dataType.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = _r$3.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					elemKind = _r$4;
						_1 = elemKind;
						/* */ if (_1 === (8)) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (_1 === (8)) { */ case 17:
							uints = sliceType$2.nil;
							/* */ if (dataKind === 17) { $s = 20; continue; }
							/* */ $s = 21; continue;
							/* if (dataKind === 17) { */ case 20:
								uints = $makeSlice(sliceType$2, $clone(dataVal, reflect.Value).Len(), $clone(dataVal, reflect.Value).Len());
								_ref = uints;
								_i = 0;
								/* while (true) { */ case 23:
									/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 24; continue; }
									i = _i;
									_r$5 = $clone(dataVal, reflect.Value).Index(i); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
									_r$6 = $clone(_r$5, reflect.Value).Interface(); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
									((i < 0 || i >= uints.$length) ? ($throwRuntimeError("index out of range"), undefined) : uints.$array[uints.$offset + i] = $assertType(_r$6, $Uint8));
									_i++;
								/* } */ $s = 23; continue; case 24:
								$s = 22; continue;
							/* } else { */ case 21:
								_r$7 = $clone(dataVal, reflect.Value).Interface(); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
								uints = $assertType(_r$7, sliceType$2);
							/* } */ case 22:
							$clone(val, reflect.Value).SetString(($bytesToString(uints)));
							$s = 19; continue;
						/* } else { */ case 18:
							converted = false;
						/* } */ case 19:
					case 16:
					$s = 11; continue;
				/* } else { */ case 10:
					converted = false;
				/* } */ case 11:
			case 3:
			/* */ if (!converted) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!converted) { */ case 28:
				_r$8 = errorf("'%s' expected type '%s', got unconvertible type '%s'", new sliceType([new $String(name), $clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()])); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$s = -1; return _r$8;
			/* } */ case 29:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeString }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f.converted = converted; $f.d = d; $f.data = data; $f.dataKind = dataKind; $f.dataType = dataType; $f.dataVal = dataVal; $f.elemKind = elemKind; $f.i = i; $f.name = name; $f.uints = uints; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeString = function(name, data, val) { return this.$val.decodeString(name, data, val); };
		Decoder.ptr.prototype.decodeInt = function(name, data, val) {
			var _arg, _arg$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, d, data, dataKind, dataType, dataVal, err, err$1, i, i$1, jn, name, val, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; d = $f.d; data = $f.data; dataKind = $f.dataKind; dataType = $f.dataType; dataVal = $f.dataVal; err = $f.err; err$1 = $f.err$1; i = $f.i; i$1 = $f.i$1; jn = $f.jn; name = $f.name; val = $f.val; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			dataKind = getKind($clone(dataVal, reflect.Value));
			dataType = $clone(dataVal, reflect.Value).Type();
				/* */ if ((dataKind === 2)) { $s = 4; continue; }
				/* */ if ((dataKind === 7)) { $s = 5; continue; }
				/* */ if ((dataKind === 13)) { $s = 6; continue; }
				/* */ if ((dataKind === 1) && d.config.WeaklyTypedInput) { $s = 7; continue; }
				/* */ if ((dataKind === 24) && d.config.WeaklyTypedInput) { $s = 8; continue; }
				_r$2 = dataType.PkgPath(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = strings.HasSuffix(_r$2, "encoding/json"); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				if (!(_r$3)) { _v = false; $s = 12; continue s; }
				_r$4 = dataType.Name(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v = _r$4 === "Number"; case 12:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((dataKind === 2)) { */ case 4:
					$clone(val, reflect.Value).SetInt($clone(dataVal, reflect.Value).Int());
					$s = 11; continue;
				/* } else if ((dataKind === 7)) { */ case 5:
					$clone(val, reflect.Value).SetInt(((x = $clone(dataVal, reflect.Value).Uint(), new $Int64(x.$high, x.$low))));
					$s = 11; continue;
				/* } else if ((dataKind === 13)) { */ case 6:
					$clone(val, reflect.Value).SetInt((new $Int64(0, $clone(dataVal, reflect.Value).Float())));
					$s = 11; continue;
				/* } else if ((dataKind === 1) && d.config.WeaklyTypedInput) { */ case 7:
					if ($clone(dataVal, reflect.Value).Bool()) {
						$clone(val, reflect.Value).SetInt(new $Int64(0, 1));
					} else {
						$clone(val, reflect.Value).SetInt(new $Int64(0, 0));
					}
					$s = 11; continue;
				/* } else if ((dataKind === 24) && d.config.WeaklyTypedInput) { */ case 8:
					_r$5 = $clone(dataVal, reflect.Value).String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg = _r$5;
					_r$6 = $clone(val, reflect.Value).Type().Bits(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$1 = _r$6;
					_r$7 = strconv.ParseInt(_arg, 0, _arg$1); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple = _r$7;
					i = _tuple[0];
					err = _tuple[1];
					/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 19:
						$clone(val, reflect.Value).SetInt(i);
						$s = 21; continue;
					/* } else { */ case 20:
						_r$8 = errorf("cannot parse '%s' as int: %s", new sliceType([new $String(name), err])); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$s = -1; return _r$8;
					/* } */ case 21:
					$s = 11; continue;
				/* } else if (_v) { */ case 9:
					jn = $assertType(data, jsonNumber);
					_r$9 = jn.Int64(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$1 = _r$9;
					i$1 = _tuple$1[0];
					err$1 = _tuple$1[1];
					/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 24:
						_r$10 = errorf("error decoding json.Number into %s: %s", new sliceType([new $String(name), err$1])); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$s = -1; return _r$10;
					/* } */ case 25:
					$clone(val, reflect.Value).SetInt(i$1);
					$s = 11; continue;
				/* } else { */ case 10:
					_r$11 = errorf("'%s' expected type '%s', got unconvertible type '%s'", new sliceType([new $String(name), $clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()])); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$s = -1; return _r$11;
				/* } */ case 11:
			case 3:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeInt }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.d = d; $f.data = data; $f.dataKind = dataKind; $f.dataType = dataType; $f.dataVal = dataVal; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.i$1 = i$1; $f.jn = jn; $f.name = name; $f.val = val; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeInt = function(name, data, val) { return this.$val.decodeInt(name, data, val); };
		Decoder.ptr.prototype.decodeUint = function(name, data, val) {
			var _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, d, data, dataKind, dataVal, err, f, i, i$1, name, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; d = $f.d; data = $f.data; dataKind = $f.dataKind; dataVal = $f.dataVal; err = $f.err; f = $f.f; i = $f.i; i$1 = $f.i$1; name = $f.name; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			dataKind = getKind($clone(dataVal, reflect.Value));
				/* */ if ((dataKind === 2)) { $s = 4; continue; }
				/* */ if ((dataKind === 7)) { $s = 5; continue; }
				/* */ if ((dataKind === 13)) { $s = 6; continue; }
				/* */ if ((dataKind === 1) && d.config.WeaklyTypedInput) { $s = 7; continue; }
				/* */ if ((dataKind === 24) && d.config.WeaklyTypedInput) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ((dataKind === 2)) { */ case 4:
					i = $clone(dataVal, reflect.Value).Int();
					/* */ if ((i.$high < 0 || (i.$high === 0 && i.$low < 0)) && !d.config.WeaklyTypedInput) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if ((i.$high < 0 || (i.$high === 0 && i.$low < 0)) && !d.config.WeaklyTypedInput) { */ case 11:
						_r$2 = errorf("cannot parse '%s', %d overflows uint", new sliceType([new $String(name), i])); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$s = -1; return _r$2;
					/* } */ case 12:
					$clone(val, reflect.Value).SetUint((new $Uint64(i.$high, i.$low)));
					$s = 10; continue;
				/* } else if ((dataKind === 7)) { */ case 5:
					$clone(val, reflect.Value).SetUint($clone(dataVal, reflect.Value).Uint());
					$s = 10; continue;
				/* } else if ((dataKind === 13)) { */ case 6:
					f = $clone(dataVal, reflect.Value).Float();
					/* */ if (f < 0 && !d.config.WeaklyTypedInput) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (f < 0 && !d.config.WeaklyTypedInput) { */ case 14:
						_r$3 = errorf("cannot parse '%s', %f overflows uint", new sliceType([new $String(name), new $Float64(f)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$s = -1; return _r$3;
					/* } */ case 15:
					$clone(val, reflect.Value).SetUint((new $Uint64(0, f)));
					$s = 10; continue;
				/* } else if ((dataKind === 1) && d.config.WeaklyTypedInput) { */ case 7:
					if ($clone(dataVal, reflect.Value).Bool()) {
						$clone(val, reflect.Value).SetUint(new $Uint64(0, 1));
					} else {
						$clone(val, reflect.Value).SetUint(new $Uint64(0, 0));
					}
					$s = 10; continue;
				/* } else if ((dataKind === 24) && d.config.WeaklyTypedInput) { */ case 8:
					_r$4 = $clone(dataVal, reflect.Value).String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_arg = _r$4;
					_r$5 = $clone(val, reflect.Value).Type().Bits(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$1 = _r$5;
					_r$6 = strconv.ParseUint(_arg, 0, _arg$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple = _r$6;
					i$1 = _tuple[0];
					err = _tuple[1];
					/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 20:
						$clone(val, reflect.Value).SetUint(i$1);
						$s = 22; continue;
					/* } else { */ case 21:
						_r$7 = errorf("cannot parse '%s' as uint: %s", new sliceType([new $String(name), err])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$s = -1; return _r$7;
					/* } */ case 22:
					$s = 10; continue;
				/* } else { */ case 9:
					_r$8 = errorf("'%s' expected type '%s', got unconvertible type '%s'", new sliceType([new $String(name), $clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()])); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$s = -1; return _r$8;
				/* } */ case 10:
			case 3:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeUint }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.d = d; $f.data = data; $f.dataKind = dataKind; $f.dataVal = dataVal; $f.err = err; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.name = name; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeUint = function(name, data, val) { return this.$val.decodeUint(name, data, val); };
		Decoder.ptr.prototype.decodeBool = function(name, data, val) {
			var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, b, d, data, dataKind, dataVal, err, name, val, x, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; b = $f.b; d = $f.d; data = $f.data; dataKind = $f.dataKind; dataVal = $f.dataVal; err = $f.err; name = $f.name; val = $f.val; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			dataKind = getKind($clone(dataVal, reflect.Value));
				/* */ if ((dataKind === 1)) { $s = 4; continue; }
				/* */ if ((dataKind === 2) && d.config.WeaklyTypedInput) { $s = 5; continue; }
				/* */ if ((dataKind === 7) && d.config.WeaklyTypedInput) { $s = 6; continue; }
				/* */ if ((dataKind === 13) && d.config.WeaklyTypedInput) { $s = 7; continue; }
				/* */ if ((dataKind === 24) && d.config.WeaklyTypedInput) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ((dataKind === 1)) { */ case 4:
					$clone(val, reflect.Value).SetBool($clone(dataVal, reflect.Value).Bool());
					$s = 10; continue;
				/* } else if ((dataKind === 2) && d.config.WeaklyTypedInput) { */ case 5:
					$clone(val, reflect.Value).SetBool(!((x = $clone(dataVal, reflect.Value).Int(), (x.$high === 0 && x.$low === 0))));
					$s = 10; continue;
				/* } else if ((dataKind === 7) && d.config.WeaklyTypedInput) { */ case 6:
					$clone(val, reflect.Value).SetBool(!((x$1 = $clone(dataVal, reflect.Value).Uint(), (x$1.$high === 0 && x$1.$low === 0))));
					$s = 10; continue;
				/* } else if ((dataKind === 13) && d.config.WeaklyTypedInput) { */ case 7:
					$clone(val, reflect.Value).SetBool(!(($clone(dataVal, reflect.Value).Float() === 0)));
					$s = 10; continue;
				/* } else if ((dataKind === 24) && d.config.WeaklyTypedInput) { */ case 8:
					_r$2 = $clone(dataVal, reflect.Value).String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = strconv.ParseBool(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple = _r$3;
					b = _tuple[0];
					err = _tuple[1];
					/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 13; continue; }
					_r$4 = $clone(dataVal, reflect.Value).String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (_r$4 === "") { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 13:
						$clone(val, reflect.Value).SetBool(b);
						$s = 16; continue;
					/* } else if (_r$4 === "") { */ case 14:
						$clone(val, reflect.Value).SetBool(false);
						$s = 16; continue;
					/* } else { */ case 15:
						_r$5 = errorf("cannot parse '%s' as bool: %s", new sliceType([new $String(name), err])); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						$s = -1; return _r$5;
					/* } */ case 16:
					$s = 10; continue;
				/* } else { */ case 9:
					_r$6 = errorf("'%s' expected type '%s', got unconvertible type '%s'", new sliceType([new $String(name), $clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()])); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$s = -1; return _r$6;
				/* } */ case 10:
			case 3:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeBool }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.b = b; $f.d = d; $f.data = data; $f.dataKind = dataKind; $f.dataVal = dataVal; $f.err = err; $f.name = name; $f.val = val; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeBool = function(name, data, val) { return this.$val.decodeBool(name, data, val); };
		Decoder.ptr.prototype.decodeFloat = function(name, data, val) {
			var _arg, _arg$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, d, data, dataKind, dataType, dataVal, err, err$1, f, i, jn, name, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; d = $f.d; data = $f.data; dataKind = $f.dataKind; dataType = $f.dataType; dataVal = $f.dataVal; err = $f.err; err$1 = $f.err$1; f = $f.f; i = $f.i; jn = $f.jn; name = $f.name; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			dataKind = getKind($clone(dataVal, reflect.Value));
			dataType = $clone(dataVal, reflect.Value).Type();
				/* */ if ((dataKind === 2)) { $s = 4; continue; }
				/* */ if ((dataKind === 7)) { $s = 5; continue; }
				/* */ if ((dataKind === 13)) { $s = 6; continue; }
				/* */ if ((dataKind === 1) && d.config.WeaklyTypedInput) { $s = 7; continue; }
				/* */ if ((dataKind === 24) && d.config.WeaklyTypedInput) { $s = 8; continue; }
				_r$2 = dataType.PkgPath(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = strings.HasSuffix(_r$2, "encoding/json"); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				if (!(_r$3)) { _v = false; $s = 12; continue s; }
				_r$4 = dataType.Name(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v = _r$4 === "Number"; case 12:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((dataKind === 2)) { */ case 4:
					$clone(val, reflect.Value).SetFloat(($flatten64($clone(dataVal, reflect.Value).Int())));
					$s = 11; continue;
				/* } else if ((dataKind === 7)) { */ case 5:
					$clone(val, reflect.Value).SetFloat(($flatten64($clone(dataVal, reflect.Value).Uint())));
					$s = 11; continue;
				/* } else if ((dataKind === 13)) { */ case 6:
					$clone(val, reflect.Value).SetFloat($clone(dataVal, reflect.Value).Float());
					$s = 11; continue;
				/* } else if ((dataKind === 1) && d.config.WeaklyTypedInput) { */ case 7:
					if ($clone(dataVal, reflect.Value).Bool()) {
						$clone(val, reflect.Value).SetFloat(1);
					} else {
						$clone(val, reflect.Value).SetFloat(0);
					}
					$s = 11; continue;
				/* } else if ((dataKind === 24) && d.config.WeaklyTypedInput) { */ case 8:
					_r$5 = $clone(dataVal, reflect.Value).String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg = _r$5;
					_r$6 = $clone(val, reflect.Value).Type().Bits(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$1 = _r$6;
					_r$7 = strconv.ParseFloat(_arg, _arg$1); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple = _r$7;
					f = _tuple[0];
					err = _tuple[1];
					/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 19:
						$clone(val, reflect.Value).SetFloat(f);
						$s = 21; continue;
					/* } else { */ case 20:
						_r$8 = errorf("cannot parse '%s' as float: %s", new sliceType([new $String(name), err])); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$s = -1; return _r$8;
					/* } */ case 21:
					$s = 11; continue;
				/* } else if (_v) { */ case 9:
					jn = $assertType(data, jsonNumber);
					_r$9 = jn.Float64(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$1 = _r$9;
					i = _tuple$1[0];
					err$1 = _tuple$1[1];
					/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 24:
						_r$10 = errorf("error decoding json.Number into %s: %s", new sliceType([new $String(name), err$1])); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$s = -1; return _r$10;
					/* } */ case 25:
					$clone(val, reflect.Value).SetFloat(i);
					$s = 11; continue;
				/* } else { */ case 10:
					_r$11 = errorf("'%s' expected type '%s', got unconvertible type '%s'", new sliceType([new $String(name), $clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()])); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$s = -1; return _r$11;
				/* } */ case 11:
			case 3:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeFloat }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.d = d; $f.data = data; $f.dataKind = dataKind; $f.dataType = dataType; $f.dataVal = dataVal; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.i = i; $f.jn = jn; $f.name = name; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeFloat = function(name, data, val) { return this.$val.decodeFloat(name, data, val); };
		Decoder.ptr.prototype.decodeMap = function(name, data, val) {
			var _1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, d, data, dataVal, mapType, name, val, valElemType, valKeyType, valMap, valType, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; d = $f.d; data = $f.data; dataVal = $f.dataVal; mapType = $f.mapType; name = $f.name; val = $f.val; valElemType = $f.valElemType; valKeyType = $f.valKeyType; valMap = $f.valMap; valType = $f.valType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			valType = $clone(val, reflect.Value).Type();
			_r = valType.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			valKeyType = _r;
			_r$1 = valType.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			valElemType = _r$1;
			valMap = val;
			/* */ if ($clone(valMap, reflect.Value).IsNil() || d.config.ZeroFields) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(valMap, reflect.Value).IsNil() || d.config.ZeroFields) { */ case 3:
				_r$2 = reflect.MapOf(valKeyType, valElemType); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				mapType = _r$2;
				_r$3 = reflect.MakeMap(mapType); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				valMap = _r$3;
			/* } */ case 4:
			_r$4 = reflect.ValueOf(data); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = reflect.Indirect($clone(_r$4, reflect.Value)); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			dataVal = _r$5;
				_1 = $clone(dataVal, reflect.Value).Kind();
				/* */ if (_1 === (21)) { $s = 10; continue; }
				/* */ if (_1 === (25)) { $s = 11; continue; }
				/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_1 === (21)) { */ case 10:
					_r$6 = d.decodeMapFromMap(name, $clone(dataVal, reflect.Value), $clone(val, reflect.Value), $clone(valMap, reflect.Value)); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$s = -1; return _r$6;
				/* } else if (_1 === (25)) { */ case 11:
					_r$7 = d.decodeMapFromStruct(name, $clone(dataVal, reflect.Value), $clone(val, reflect.Value), $clone(valMap, reflect.Value)); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$s = -1; return _r$7;
				/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 12:
					/* */ if (d.config.WeaklyTypedInput) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (d.config.WeaklyTypedInput) { */ case 17:
						_r$8 = d.decodeMapFromSlice(name, $clone(dataVal, reflect.Value), $clone(val, reflect.Value), $clone(valMap, reflect.Value)); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$s = -1; return _r$8;
					/* } */ case 18:
					_r$9 = errorf("'%s' expected a map, got '%s'", new sliceType([new $String(name), new reflect.Kind($clone(dataVal, reflect.Value).Kind())])); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$s = -1; return _r$9;
				/* } else { */ case 13:
					_r$10 = errorf("'%s' expected a map, got '%s'", new sliceType([new $String(name), new reflect.Kind($clone(dataVal, reflect.Value).Kind())])); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$s = -1; return _r$10;
				/* } */ case 14:
			case 9:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeMap }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.d = d; $f.data = data; $f.dataVal = dataVal; $f.mapType = mapType; $f.name = name; $f.val = val; $f.valElemType = valElemType; $f.valKeyType = valKeyType; $f.valMap = valMap; $f.valType = valType; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeMap = function(name, data, val) { return this.$val.decodeMap(name, data, val); };
		Decoder.ptr.prototype.decodeMapFromSlice = function(name, dataVal, val, valMap) {
			var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, d, dataVal, err, i, name, val, valMap, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; d = $f.d; dataVal = $f.dataVal; err = $f.err; i = $f.i; name = $f.name; val = $f.val; valMap = $f.valMap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			/* */ if ($clone(dataVal, reflect.Value).Len() === 0) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if ($clone(dataVal, reflect.Value).Len() === 0) { */ case 1:
				$r = $clone(val, reflect.Value).Set($clone(valMap, reflect.Value)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
			/* } */ case 2:
			i = 0;
			/* while (true) { */ case 4:
				/* if (!(i < $clone(dataVal, reflect.Value).Len())) { break; } */ if(!(i < $clone(dataVal, reflect.Value).Len())) { $s = 5; continue; }
				_r = sprintf("%s[%d]", new sliceType([new $String(name), new $Int(i)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg = _r;
				_r$1 = $clone(dataVal, reflect.Value).Index(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = $clone(_r$1, reflect.Value).Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$1 = _r$2;
				_arg$2 = $clone(val, reflect.Value);
				_r$3 = d.decode(_arg, _arg$1, _arg$2); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				i = i + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeMapFromSlice }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.d = d; $f.dataVal = dataVal; $f.err = err; $f.i = i; $f.name = name; $f.val = val; $f.valMap = valMap; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeMapFromSlice = function(name, dataVal, val, valMap) { return this.$val.decodeMapFromSlice(name, dataVal, val, valMap); };
		Decoder.ptr.prototype.decodeMapFromMap = function(name, dataVal, val, valMap) {
			var _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, currentKey, currentVal, d, dataVal, err, err$1, errors$1, fieldName, k, name, v, val, valElemType, valKeyType, valMap, valType, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; currentKey = $f.currentKey; currentVal = $f.currentVal; d = $f.d; dataVal = $f.dataVal; err = $f.err; err$1 = $f.err$1; errors$1 = $f.errors$1; fieldName = $f.fieldName; k = $f.k; name = $f.name; v = $f.v; val = $f.val; valElemType = $f.valElemType; valKeyType = $f.valKeyType; valMap = $f.valMap; valType = $f.valType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			valType = $clone(val, reflect.Value).Type();
			_r = valType.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			valKeyType = _r;
			_r$1 = valType.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			valElemType = _r$1;
			errors$1 = $makeSlice(sliceType$1, 0);
			/* */ if ($clone(dataVal, reflect.Value).Len() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(dataVal, reflect.Value).Len() === 0) { */ case 3:
				/* */ if ($clone(dataVal, reflect.Value).IsNil()) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ($clone(dataVal, reflect.Value).IsNil()) { */ case 5:
					/* */ if (!$clone(val, reflect.Value).IsNil()) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (!$clone(val, reflect.Value).IsNil()) { */ case 8:
						$r = $clone(val, reflect.Value).Set($clone(dataVal, reflect.Value)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 9:
					$s = 7; continue;
				/* } else { */ case 6:
					$r = $clone(val, reflect.Value).Set($clone(valMap, reflect.Value)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
				$s = -1; return $ifaceNil;
			/* } */ case 4:
			_r$2 = $clone(dataVal, reflect.Value).MapKeys(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_ref = _r$2;
			_i = 0;
			/* while (true) { */ case 13:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 14; continue; }
				k = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$3 = sprintf("%s[%s]", new sliceType([new $String(name), new k.constructor.elem(k)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				fieldName = _r$3;
				_r$4 = reflect.Indirect($clone(reflect.New(valKeyType), reflect.Value)); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				currentKey = _r$4;
				_arg = fieldName;
				_r$5 = $clone(k, reflect.Value).Interface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$1 = _r$5;
				_arg$2 = $clone(currentKey, reflect.Value);
				_r$6 = d.decode(_arg, _arg$1, _arg$2); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				err = _r$6;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 19:
					_r$7 = appendErrors(errors$1, err); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					errors$1 = _r$7;
					_i++;
					/* continue; */ $s = 13; continue;
				/* } */ case 20:
				_r$8 = $clone(dataVal, reflect.Value).MapIndex($clone(k, reflect.Value)); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = $clone(_r$8, reflect.Value).Interface(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				v = _r$9;
				_r$10 = reflect.Indirect($clone(reflect.New(valElemType), reflect.Value)); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				currentVal = _r$10;
				_r$11 = d.decode(fieldName, v, $clone(currentVal, reflect.Value)); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				err$1 = _r$11;
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 26:
					_r$12 = appendErrors(errors$1, err$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					errors$1 = _r$12;
					_i++;
					/* continue; */ $s = 13; continue;
				/* } */ case 27:
				$r = $clone(valMap, reflect.Value).SetMapIndex($clone(currentKey, reflect.Value), $clone(currentVal, reflect.Value)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 13; continue; case 14:
			$r = $clone(val, reflect.Value).Set($clone(valMap, reflect.Value)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (errors$1.$length > 0) {
				$s = -1; return new Error.ptr(errors$1);
			}
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeMapFromMap }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.currentKey = currentKey; $f.currentVal = currentVal; $f.d = d; $f.dataVal = dataVal; $f.err = err; $f.err$1 = err$1; $f.errors$1 = errors$1; $f.fieldName = fieldName; $f.k = k; $f.name = name; $f.v = v; $f.val = val; $f.valElemType = valElemType; $f.valKeyType = valKeyType; $f.valMap = valMap; $f.valType = valType; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeMapFromMap = function(name, dataVal, val, valMap) { return this.$val.decodeMapFromMap(name, dataVal, val, valMap); };
		Decoder.ptr.prototype.decodeMapFromStruct = function(name, dataVal, val, valMap) {
			var _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, d, dataVal, err, f, i, k, keyName, mType, name, squash, tag, tagParts, tagValue, typ, v, vElemType, vKeyType, vMap, vType, val, valMap, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; d = $f.d; dataVal = $f.dataVal; err = $f.err; f = $f.f; i = $f.i; k = $f.k; keyName = $f.keyName; mType = $f.mType; name = $f.name; squash = $f.squash; tag = $f.tag; tagParts = $f.tagParts; tagValue = $f.tagValue; typ = $f.typ; v = $f.v; vElemType = $f.vElemType; vKeyType = $f.vKeyType; vMap = $f.vMap; vType = $f.vType; val = $f.val; valMap = $f.valMap; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			typ = $clone(dataVal, reflect.Value).Type();
			i = 0;
			/* while (true) { */ case 1:
				_r = typ.NumField(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* if (!(i < _r)) { break; } */ if(!(i < _r)) { $s = 2; continue; }
				_r$1 = typ.Field(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				f = $clone(_r$1, reflect.StructField);
				/* */ if (!(f.PkgPath === "")) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!(f.PkgPath === "")) { */ case 5:
					i = i + (1) >> 0;
					/* continue; */ $s = 1; continue;
				/* } */ case 6:
				_r$2 = $clone(dataVal, reflect.Value).Field(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				v = _r$2;
				_r$3 = $clone(valMap, reflect.Value).Type().Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = $clone(v, reflect.Value).Type().AssignableTo(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (!_r$4) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!_r$4) { */ case 8:
					_arg = $clone(v, reflect.Value).Type();
					_r$5 = $clone(valMap, reflect.Value).Type().Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$1 = _r$5;
					_r$6 = errorf("cannot assign type '%s' to map value field of type '%s'", new sliceType([_arg, _arg$1])); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$s = -1; return _r$6;
				/* } */ case 9:
				tagValue = new reflect.StructTag(f.Tag).Get(d.config.TagName);
				tagParts = strings.Split(tagValue, ",");
				keyName = f.Name;
				/* */ if (!((0 >= tagParts.$length ? ($throwRuntimeError("index out of range"), undefined) : tagParts.$array[tagParts.$offset + 0]) === "")) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!((0 >= tagParts.$length ? ($throwRuntimeError("index out of range"), undefined) : tagParts.$array[tagParts.$offset + 0]) === "")) { */ case 14:
					if ((0 >= tagParts.$length ? ($throwRuntimeError("index out of range"), undefined) : tagParts.$array[tagParts.$offset + 0]) === "-") {
						i = i + (1) >> 0;
						/* continue; */ $s = 1; continue;
					}
					keyName = (0 >= tagParts.$length ? ($throwRuntimeError("index out of range"), undefined) : tagParts.$array[tagParts.$offset + 0]);
				/* } */ case 15:
				squash = false;
				_ref = $subslice(tagParts, 1);
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					tag = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (tag === "squash") {
						squash = true;
						break;
					}
					_i++;
				}
				/* */ if (squash && !(($clone(v, reflect.Value).Kind() === 25))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (squash && !(($clone(v, reflect.Value).Kind() === 25))) { */ case 16:
					_r$7 = errorf("cannot squash non-struct type '%s'", new sliceType([$clone(v, reflect.Value).Type()])); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$s = -1; return _r$7;
				/* } */ case 17:
					_1 = $clone(v, reflect.Value).Kind();
					/* */ if (_1 === (25)) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (_1 === (25)) { */ case 20:
						x = reflect.New($clone(v, reflect.Value).Type());
						_r$8 = $clone(x, reflect.Value).Elem(); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$r = $clone(_r$8, reflect.Value).Set($clone(v, reflect.Value)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						vType = $clone(valMap, reflect.Value).Type();
						_r$9 = vType.Key(); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						vKeyType = _r$9;
						_r$10 = vType.Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						vElemType = _r$10;
						_r$11 = reflect.MapOf(vKeyType, vElemType); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						mType = _r$11;
						_r$12 = reflect.MakeMap(mType); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						vMap = _r$12;
						_arg$2 = keyName;
						_r$13 = $clone(x, reflect.Value).Interface(); /* */ $s = 29; case 29: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_arg$3 = _r$13;
						_arg$4 = $clone(vMap, reflect.Value);
						_r$14 = d.decode(_arg$2, _arg$3, _arg$4); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						err = _r$14;
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return err;
						}
						/* */ if (squash) { $s = 31; continue; }
						/* */ $s = 32; continue;
						/* if (squash) { */ case 31:
							_r$15 = $clone(vMap, reflect.Value).MapKeys(); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							_ref$1 = _r$15;
							_i$1 = 0;
							/* while (true) { */ case 35:
								/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 36; continue; }
								k = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
								_arg$5 = $clone(k, reflect.Value);
								_r$16 = $clone(vMap, reflect.Value).MapIndex($clone(k, reflect.Value)); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
								_arg$6 = $clone(_r$16, reflect.Value);
								$r = $clone(valMap, reflect.Value).SetMapIndex(_arg$5, _arg$6); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								_i$1++;
							/* } */ $s = 35; continue; case 36:
							$s = 33; continue;
						/* } else { */ case 32:
							_r$17 = reflect.ValueOf(new $String(keyName)); /* */ $s = 39; case 39: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							$r = $clone(valMap, reflect.Value).SetMapIndex($clone(_r$17, reflect.Value), $clone(vMap, reflect.Value)); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 33:
						$s = 22; continue;
					/* } else { */ case 21:
						_r$18 = reflect.ValueOf(new $String(keyName)); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						$r = $clone(valMap, reflect.Value).SetMapIndex($clone(_r$18, reflect.Value), $clone(v, reflect.Value)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 22:
				case 19:
				i = i + (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			/* */ if ($clone(val, reflect.Value).CanAddr()) { $s = 43; continue; }
			/* */ $s = 44; continue;
			/* if ($clone(val, reflect.Value).CanAddr()) { */ case 43:
				$r = $clone(val, reflect.Value).Set($clone(valMap, reflect.Value)); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 44:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeMapFromStruct }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.d = d; $f.dataVal = dataVal; $f.err = err; $f.f = f; $f.i = i; $f.k = k; $f.keyName = keyName; $f.mType = mType; $f.name = name; $f.squash = squash; $f.tag = tag; $f.tagParts = tagParts; $f.tagValue = tagValue; $f.typ = typ; $f.v = v; $f.vElemType = vElemType; $f.vKeyType = vKeyType; $f.vMap = vMap; $f.vType = vType; $f.val = val; $f.valMap = valMap; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeMapFromStruct = function(name, dataVal, val, valMap) { return this.$val.decodeMapFromStruct(name, dataVal, val, valMap); };
		Decoder.ptr.prototype.decodePtr = function(name, data, val) {
			var _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, d, data, err, err$1, isNil, name, nilValue, realVal, v, val, valElemType, valType, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; d = $f.d; data = $f.data; err = $f.err; err$1 = $f.err$1; isNil = $f.isNil; name = $f.name; nilValue = $f.nilValue; realVal = $f.realVal; v = $f.v; val = $f.val; valElemType = $f.valElemType; valType = $f.valType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			isNil = $interfaceIsEqual(data, $ifaceNil);
			/* */ if (!isNil) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!isNil) { */ case 1:
					_r = reflect.ValueOf(data); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v = _r$1;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23))) {
						isNil = $clone(v, reflect.Value).IsNil();
					}
				case 3:
			/* } */ case 2:
			/* */ if (isNil) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (isNil) { */ case 6:
				/* */ if (!$clone(val, reflect.Value).IsNil() && $clone(val, reflect.Value).CanSet()) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!$clone(val, reflect.Value).IsNil() && $clone(val, reflect.Value).CanSet()) { */ case 8:
					_r$2 = $clone(reflect.New($clone(val, reflect.Value).Type()), reflect.Value).Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					nilValue = _r$2;
					$r = $clone(val, reflect.Value).Set($clone(nilValue, reflect.Value)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
				$s = -1; return $ifaceNil;
			/* } */ case 7:
			valType = $clone(val, reflect.Value).Type();
			_r$3 = valType.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			valElemType = _r$3;
			/* */ if ($clone(val, reflect.Value).CanSet()) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ($clone(val, reflect.Value).CanSet()) { */ case 13:
				realVal = val;
				if ($clone(realVal, reflect.Value).IsNil() || d.config.ZeroFields) {
					realVal = reflect.New(valElemType);
				}
				_arg = name;
				_arg$1 = data;
				_r$4 = reflect.Indirect($clone(realVal, reflect.Value)); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$2 = $clone(_r$4, reflect.Value);
				_r$5 = d.decode(_arg, _arg$1, _arg$2); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				err = _r$5;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				$r = $clone(val, reflect.Value).Set($clone(realVal, reflect.Value)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 15; continue;
			/* } else { */ case 14:
				_arg$3 = name;
				_arg$4 = data;
				_r$6 = reflect.Indirect($clone(val, reflect.Value)); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$5 = $clone(_r$6, reflect.Value);
				_r$7 = d.decode(_arg$3, _arg$4, _arg$5); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err$1 = _r$7;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
			/* } */ case 15:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodePtr }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.d = d; $f.data = data; $f.err = err; $f.err$1 = err$1; $f.isNil = isNil; $f.name = name; $f.nilValue = nilValue; $f.realVal = realVal; $f.v = v; $f.val = val; $f.valElemType = valElemType; $f.valType = valType; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodePtr = function(name, data, val) { return this.$val.decodePtr(name, data, val); };
		Decoder.ptr.prototype.decodeFunc = function(name, data, val) {
			var _r, _r$1, _r$2, d, data, dataVal, name, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; data = $f.data; dataVal = $f.dataVal; name = $f.name; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			/* */ if (!($interfaceIsEqual($clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual($clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()))) { */ case 3:
				_r$2 = errorf("'%s' expected type '%s', got unconvertible type '%s'", new sliceType([new $String(name), $clone(val, reflect.Value).Type(), $clone(dataVal, reflect.Value).Type()])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } */ case 4:
			$r = $clone(val, reflect.Value).Set($clone(dataVal, reflect.Value)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeFunc }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.data = data; $f.dataVal = dataVal; $f.name = name; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeFunc = function(name, data, val) { return this.$val.decodeFunc(name, data, val); };
		Decoder.ptr.prototype.decodeSlice = function(name, data, val) {
			var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, currentData, currentField, d, data, dataVal, dataValKind, err, errors$1, fieldName, i, name, sliceType$4, val, valElemType, valSlice, valType, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; currentData = $f.currentData; currentField = $f.currentField; d = $f.d; data = $f.data; dataVal = $f.dataVal; dataValKind = $f.dataValKind; err = $f.err; errors$1 = $f.errors$1; fieldName = $f.fieldName; i = $f.i; name = $f.name; sliceType$4 = $f.sliceType$4; val = $f.val; valElemType = $f.valElemType; valSlice = $f.valSlice; valType = $f.valType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			dataValKind = $clone(dataVal, reflect.Value).Kind();
			valType = $clone(val, reflect.Value).Type();
			_r$2 = valType.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			valElemType = _r$2;
			sliceType$4 = reflect.SliceOf(valElemType);
			valSlice = val;
			/* */ if ($clone(valSlice, reflect.Value).IsNil() || d.config.ZeroFields) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($clone(valSlice, reflect.Value).IsNil() || d.config.ZeroFields) { */ case 4:
				/* */ if (d.config.WeaklyTypedInput) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (d.config.WeaklyTypedInput) { */ case 6:
						/* */ if (((dataValKind === 23)) || ((dataValKind === 17))) { $s = 9; continue; }
						/* */ if ((dataValKind === 21)) { $s = 10; continue; }
						if (!(dataValKind === 24)) { _v = false; $s = 14; continue s; }
						_r$3 = valElemType.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_v = _r$3 === 8; case 14:
						/* */ if (_v) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (((dataValKind === 23)) || ((dataValKind === 17))) { */ case 9:
							/* break; */ $s = 8; continue;
							$s = 13; continue;
						/* } else if ((dataValKind === 21)) { */ case 10:
							/* */ if ($clone(dataVal, reflect.Value).Len() === 0) { $s = 16; continue; }
							/* */ $s = 17; continue;
							/* if ($clone(dataVal, reflect.Value).Len() === 0) { */ case 16:
								_r$4 = reflect.MakeSlice(sliceType$4, 0, 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
								$r = $clone(val, reflect.Value).Set($clone(_r$4, reflect.Value)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = -1; return $ifaceNil;
							/* } */ case 17:
							_r$5 = d.decodeSlice(name, new sliceType([data]), $clone(val, reflect.Value)); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							$s = -1; return _r$5;
						/* } else if (_v) { */ case 11:
							_arg = name;
							_r$6 = $clone(dataVal, reflect.Value).String(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							_arg$1 = (new sliceType$2($stringToBytes(_r$6)));
							_arg$2 = $clone(val, reflect.Value);
							_r$7 = d.decodeSlice(_arg, _arg$1, _arg$2); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							$s = -1; return _r$7;
						/* } else { */ case 12:
							_r$8 = d.decodeSlice(name, new sliceType([data]), $clone(val, reflect.Value)); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							$s = -1; return _r$8;
						/* } */ case 13:
					case 8:
				/* } */ case 7:
				/* */ if (!((dataValKind === 17)) && !((dataValKind === 23))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!((dataValKind === 17)) && !((dataValKind === 23))) { */ case 24:
					_r$9 = errorf("'%s': source data must be an array or slice, got %s", new sliceType([new $String(name), new reflect.Kind(dataValKind)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$s = -1; return _r$9;
				/* } */ case 25:
				if ($clone(dataVal, reflect.Value).Len() === 0) {
					$s = -1; return $ifaceNil;
				}
				_r$10 = reflect.MakeSlice(sliceType$4, $clone(dataVal, reflect.Value).Len(), $clone(dataVal, reflect.Value).Len()); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				valSlice = _r$10;
			/* } */ case 5:
			errors$1 = $makeSlice(sliceType$1, 0);
			i = 0;
			/* while (true) { */ case 28:
				/* if (!(i < $clone(dataVal, reflect.Value).Len())) { break; } */ if(!(i < $clone(dataVal, reflect.Value).Len())) { $s = 29; continue; }
				_r$11 = $clone(dataVal, reflect.Value).Index(i); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = $clone(_r$11, reflect.Value).Interface(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				currentData = _r$12;
				/* while (true) { */ case 32:
					/* if (!($clone(valSlice, reflect.Value).Len() <= i)) { break; } */ if(!($clone(valSlice, reflect.Value).Len() <= i)) { $s = 33; continue; }
					_arg$3 = $clone(valSlice, reflect.Value);
					_r$13 = reflect.Zero(valElemType); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_arg$4 = $clone(_r$13, reflect.Value);
					_r$14 = reflect.Append(_arg$3, new sliceType$5([_arg$4])); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					valSlice = _r$14;
				/* } */ $s = 32; continue; case 33:
				_r$15 = $clone(valSlice, reflect.Value).Index(i); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				currentField = _r$15;
				_r$16 = sprintf("%s[%d]", new sliceType([new $String(name), new $Int(i)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				fieldName = _r$16;
				_r$17 = d.decode(fieldName, currentData, $clone(currentField, reflect.Value)); /* */ $s = 38; case 38: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				err = _r$17;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 39:
					_r$18 = appendErrors(errors$1, err); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					errors$1 = _r$18;
				/* } */ case 40:
				i = i + (1) >> 0;
			/* } */ $s = 28; continue; case 29:
			$r = $clone(val, reflect.Value).Set($clone(valSlice, reflect.Value)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (errors$1.$length > 0) {
				$s = -1; return new Error.ptr(errors$1);
			}
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeSlice }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f.currentData = currentData; $f.currentField = currentField; $f.d = d; $f.data = data; $f.dataVal = dataVal; $f.dataValKind = dataValKind; $f.err = err; $f.errors$1 = errors$1; $f.fieldName = fieldName; $f.i = i; $f.name = name; $f.sliceType$4 = sliceType$4; $f.val = val; $f.valElemType = valElemType; $f.valSlice = valSlice; $f.valType = valType; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeSlice = function(name, data, val) { return this.$val.decodeSlice(name, data, val); };
		Decoder.ptr.prototype.decodeArray = function(name, data, val) {
			var _arg, _arg$1, _arg$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, arrayType, currentData, currentField, d, data, dataVal, dataValKind, err, errors$1, fieldName, i, name, val, valArray, valElemType, valType, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; arrayType = $f.arrayType; currentData = $f.currentData; currentField = $f.currentField; d = $f.d; data = $f.data; dataVal = $f.dataVal; dataValKind = $f.dataValKind; err = $f.err; errors$1 = $f.errors$1; fieldName = $f.fieldName; i = $f.i; name = $f.name; val = $f.val; valArray = $f.valArray; valElemType = $f.valElemType; valType = $f.valType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			dataValKind = $clone(dataVal, reflect.Value).Kind();
			valType = $clone(val, reflect.Value).Type();
			_r$2 = valType.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			valElemType = _r$2;
			_r$3 = valType.Len(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = reflect.ArrayOf(_r$3, valElemType); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			arrayType = _r$4;
			valArray = val;
			_r$5 = $clone(valArray, reflect.Value).Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = reflect.Zero($clone(valArray, reflect.Value).Type()); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = $clone(_r$6, reflect.Value).Interface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if ($interfaceIsEqual(_r$5, _r$7) || d.config.ZeroFields) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($interfaceIsEqual(_r$5, _r$7) || d.config.ZeroFields) { */ case 6:
				/* */ if (!((dataValKind === 17)) && !((dataValKind === 23))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((dataValKind === 17)) && !((dataValKind === 23))) { */ case 11:
					/* */ if (d.config.WeaklyTypedInput) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (d.config.WeaklyTypedInput) { */ case 13:
							/* */ if ((dataValKind === 21)) { $s = 16; continue; }
							/* */ $s = 17; continue;
							/* if ((dataValKind === 21)) { */ case 16:
								/* */ if ($clone(dataVal, reflect.Value).Len() === 0) { $s = 19; continue; }
								/* */ $s = 20; continue;
								/* if ($clone(dataVal, reflect.Value).Len() === 0) { */ case 19:
									_r$8 = reflect.Zero(arrayType); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
									$r = $clone(val, reflect.Value).Set($clone(_r$8, reflect.Value)); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = -1; return $ifaceNil;
								/* } */ case 20:
								$s = 18; continue;
							/* } else { */ case 17:
								_r$9 = d.decodeArray(name, new sliceType([data]), $clone(val, reflect.Value)); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
								$s = -1; return _r$9;
							/* } */ case 18:
						case 15:
					/* } */ case 14:
					_r$10 = errorf("'%s': source data must be an array or slice, got %s", new sliceType([new $String(name), new reflect.Kind(dataValKind)])); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$s = -1; return _r$10;
				/* } */ case 12:
				_r$11 = arrayType.Len(); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* */ if ($clone(dataVal, reflect.Value).Len() > _r$11) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if ($clone(dataVal, reflect.Value).Len() > _r$11) { */ case 25:
					_arg = new $String(name);
					_r$12 = arrayType.Len(); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_arg$1 = new $Int(_r$12);
					_arg$2 = new $Int($clone(dataVal, reflect.Value).Len());
					_r$13 = errorf("'%s': expected source data to have length less or equal to %d, got %d", new sliceType([_arg, _arg$1, _arg$2])); /* */ $s = 29; case 29: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					$s = -1; return _r$13;
				/* } */ case 26:
				_r$14 = $clone(reflect.New(arrayType), reflect.Value).Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				valArray = _r$14;
			/* } */ case 7:
			errors$1 = $makeSlice(sliceType$1, 0);
			i = 0;
			/* while (true) { */ case 31:
				/* if (!(i < $clone(dataVal, reflect.Value).Len())) { break; } */ if(!(i < $clone(dataVal, reflect.Value).Len())) { $s = 32; continue; }
				_r$15 = $clone(dataVal, reflect.Value).Index(i); /* */ $s = 33; case 33: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = $clone(_r$15, reflect.Value).Interface(); /* */ $s = 34; case 34: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				currentData = _r$16;
				_r$17 = $clone(valArray, reflect.Value).Index(i); /* */ $s = 35; case 35: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				currentField = _r$17;
				_r$18 = sprintf("%s[%d]", new sliceType([new $String(name), new $Int(i)])); /* */ $s = 36; case 36: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				fieldName = _r$18;
				_r$19 = d.decode(fieldName, currentData, $clone(currentField, reflect.Value)); /* */ $s = 37; case 37: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				err = _r$19;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 38:
					_r$20 = appendErrors(errors$1, err); /* */ $s = 40; case 40: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					errors$1 = _r$20;
				/* } */ case 39:
				i = i + (1) >> 0;
			/* } */ $s = 31; continue; case 32:
			$r = $clone(val, reflect.Value).Set($clone(valArray, reflect.Value)); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (errors$1.$length > 0) {
				$s = -1; return new Error.ptr(errors$1);
			}
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.arrayType = arrayType; $f.currentData = currentData; $f.currentField = currentField; $f.d = d; $f.data = data; $f.dataVal = dataVal; $f.dataValKind = dataValKind; $f.err = err; $f.errors$1 = errors$1; $f.fieldName = fieldName; $f.i = i; $f.name = name; $f.val = val; $f.valArray = valArray; $f.valElemType = valElemType; $f.valType = valType; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeArray = function(name, data, val) { return this.$val.decodeArray(name, data, val); };
		Decoder.ptr.prototype.decodeStruct = function(name, data, val) {
			var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, d, data, dataVal, dataValKind, err, m, mval, name, result, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; d = $f.d; data = $f.data; dataVal = $f.dataVal; dataValKind = $f.dataValKind; err = $f.err; m = $f.m; mval = $f.mval; name = $f.name; result = $f.result; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			m = [m];
			d = this;
			_r = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = reflect.Indirect($clone(_r, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			dataVal = _r$1;
			/* */ if ($interfaceIsEqual($clone(dataVal, reflect.Value).Type(), $clone(val, reflect.Value).Type())) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($interfaceIsEqual($clone(dataVal, reflect.Value).Type(), $clone(val, reflect.Value).Type())) { */ case 3:
				$r = $clone(val, reflect.Value).Set($clone(dataVal, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
			/* } */ case 4:
			dataValKind = $clone(dataVal, reflect.Value).Kind();
				_1 = dataValKind;
				/* */ if (_1 === (21)) { $s = 7; continue; }
				/* */ if (_1 === (25)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_1 === (21)) { */ case 7:
					_r$2 = d.decodeStructFromMap(name, $clone(dataVal, reflect.Value), $clone(val, reflect.Value)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$s = -1; return _r$2;
				/* } else if (_1 === (25)) { */ case 8:
					m[0] = {};
					_r$3 = reflect.ValueOf((m.$ptr || (m.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, m)))); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = reflect.Indirect($clone(_r$3, reflect.Value)); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					mval = _r$4;
					_r$5 = d.decodeMapFromStruct(name, $clone(dataVal, reflect.Value), $clone(mval, reflect.Value), $clone(mval, reflect.Value)); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					err = _r$5;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return err;
					}
					_r$6 = d.decodeStructFromMap(name, $clone(mval, reflect.Value), $clone(val, reflect.Value)); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					result = _r$6;
					$s = -1; return result;
				/* } else { */ case 9:
					_r$7 = errorf("'%s' expected a map, got '%s'", new sliceType([new $String(name), new reflect.Kind($clone(dataVal, reflect.Value).Kind())])); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$s = -1; return _r$7;
				/* } */ case 10:
			case 6:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeStruct }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.d = d; $f.data = data; $f.dataVal = dataVal; $f.dataValKind = dataValKind; $f.err = err; $f.m = m; $f.mval = mval; $f.name = name; $f.result = result; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeStruct = function(name, data, val) { return this.$val.decodeStruct(name, data, val); };
		Decoder.ptr.prototype.decodeStructFromMap = function(name, dataVal, val) {
			var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _key, _key$1, _keys, _keys$1, _keys$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tmp, _tmp$1, _tuple, d, dataVal, dataValKey, dataValKey$1, dataValKeys, dataValKeysUnused, dataValType, err, err$1, errors$1, f, field$1, fieldKind, fieldName, fieldType, fieldValue, fields, i, key, keys, kind, mK, name, ok, rawKey, rawKey$1, rawMapKey, rawMapVal, squash, structType$1, structVal, structs, tag, tagParts, tagValue, val, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; dataVal = $f.dataVal; dataValKey = $f.dataValKey; dataValKey$1 = $f.dataValKey$1; dataValKeys = $f.dataValKeys; dataValKeysUnused = $f.dataValKeysUnused; dataValType = $f.dataValType; err = $f.err; err$1 = $f.err$1; errors$1 = $f.errors$1; f = $f.f; field$1 = $f.field$1; fieldKind = $f.fieldKind; fieldName = $f.fieldName; fieldType = $f.fieldType; fieldValue = $f.fieldValue; fields = $f.fields; i = $f.i; key = $f.key; keys = $f.keys; kind = $f.kind; mK = $f.mK; name = $f.name; ok = $f.ok; rawKey = $f.rawKey; rawKey$1 = $f.rawKey$1; rawMapKey = $f.rawMapKey; rawMapVal = $f.rawMapVal; squash = $f.squash; structType$1 = $f.structType$1; structVal = $f.structVal; structs = $f.structs; tag = $f.tag; tagParts = $f.tagParts; tagValue = $f.tagValue; val = $f.val; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			d = this;
			dataValType = $clone(dataVal, reflect.Value).Type();
			_r = dataValType.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = _r.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			kind = _r$1;
			/* */ if (!((kind === 24)) && !((kind === 20))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((kind === 24)) && !((kind === 20))) { */ case 3:
				_arg = new $String(name);
				_r$2 = dataValType.Key(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$1 = new reflect.Kind(_r$3);
				_r$4 = errorf("'%s' needs a map with string keys, has '%s' keys", new sliceType([_arg, _arg$1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } */ case 4:
			dataValKeys = {};
			dataValKeysUnused = {};
			_r$5 = $clone(dataVal, reflect.Value).MapKeys(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_ref = _r$5;
			_i = 0;
			/* while (true) { */ case 9:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
				dataValKey = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_key = $clone(dataValKey, reflect.Value); (dataValKeys || $throwRuntimeError("assignment to entry in nil map"))[reflect.Value.keyFor(_key)] = { k: _key, v: new structType.ptr() };
				_r$6 = $clone(dataValKey, reflect.Value).Interface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_key$1 = _r$6; (dataValKeysUnused || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: new structType.ptr() };
				_i++;
			/* } */ $s = 9; continue; case 10:
			errors$1 = $makeSlice(sliceType$1, 0);
			structs = $makeSlice(sliceType$5, 1, 5);
			(0 >= structs.$length ? ($throwRuntimeError("index out of range"), undefined) : structs.$array[structs.$offset + 0] = val);
			fields = new sliceType$6([]);
			/* while (true) { */ case 12:
				/* if (!(structs.$length > 0)) { break; } */ if(!(structs.$length > 0)) { $s = 13; continue; }
				structVal = (0 >= structs.$length ? ($throwRuntimeError("index out of range"), undefined) : structs.$array[structs.$offset + 0]);
				structs = $subslice(structs, 1);
				structType$1 = $clone(structVal, reflect.Value).Type();
				i = 0;
				/* while (true) { */ case 14:
					_r$7 = structType$1.NumField(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					/* if (!(i < _r$7)) { break; } */ if(!(i < _r$7)) { $s = 15; continue; }
					_r$8 = structType$1.Field(i); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					fieldType = $clone(_r$8, reflect.StructField);
					_r$9 = fieldType.Type.Kind(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					fieldKind = _r$9;
					squash = false;
					tagParts = strings.Split(new reflect.StructTag(fieldType.Tag).Get(d.config.TagName), ",");
					_ref$1 = $subslice(tagParts, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						tag = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (tag === "squash") {
							squash = true;
							break;
						}
						_i$1++;
					}
					/* */ if (squash) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (squash) { */ case 19:
						/* */ if (!((fieldKind === 25))) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if (!((fieldKind === 25))) { */ case 21:
							_arg$2 = errors$1;
							_r$10 = errorf("%s: unsupported type for squash: %s", new sliceType([new $String(fieldType.Name), new reflect.Kind(fieldKind)])); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							_arg$3 = _r$10;
							_r$11 = appendErrors(_arg$2, _arg$3); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							errors$1 = _r$11;
							$s = 23; continue;
						/* } else { */ case 22:
							_r$12 = $clone(structVal, reflect.Value).FieldByName(fieldType.Name); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
							structs = $append(structs, _r$12);
						/* } */ case 23:
						i = i + (1) >> 0;
						/* continue; */ $s = 14; continue;
					/* } */ case 20:
					_r$13 = $clone(structVal, reflect.Value).Field(i); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					fields = $append(fields, new field.ptr($clone(fieldType, reflect.StructField), $clone(_r$13, reflect.Value)));
					i = i + (1) >> 0;
				/* } */ $s = 14; continue; case 15:
			/* } */ $s = 12; continue; case 13:
			_ref$2 = fields;
			_i$2 = 0;
			/* while (true) { */ case 28:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 29; continue; }
				f = $clone(((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]), field);
				_tmp = $clone(f.field, reflect.StructField);
				_tmp$1 = f.val;
				field$1 = $clone(_tmp, reflect.StructField);
				fieldValue = _tmp$1;
				fieldName = field$1.Name;
				tagValue = new reflect.StructTag(field$1.Tag).Get(d.config.TagName);
				tagValue = (x = strings.SplitN(tagValue, ",", 2), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
				if (!(tagValue === "")) {
					fieldName = tagValue;
				}
				_r$14 = reflect.ValueOf(new $String(fieldName)); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				rawMapKey = _r$14;
				_r$15 = $clone(dataVal, reflect.Value).MapIndex($clone(rawMapKey, reflect.Value)); /* */ $s = 31; case 31: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				rawMapVal = _r$15;
				/* */ if (!$clone(rawMapVal, reflect.Value).IsValid()) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (!$clone(rawMapVal, reflect.Value).IsValid()) { */ case 32:
					_ref$3 = dataValKeys;
					_i$3 = 0;
					_keys = $keys(_ref$3);
					/* while (true) { */ case 34:
						/* if (!(_i$3 < _keys.length)) { break; } */ if(!(_i$3 < _keys.length)) { $s = 35; continue; }
						_entry = _ref$3[_keys[_i$3]];
						if (_entry === undefined) {
							_i$3++;
							/* continue; */ $s = 34; continue;
						}
						dataValKey$1 = _entry.k;
						_r$16 = $clone(dataValKey$1, reflect.Value).Interface(); /* */ $s = 36; case 36: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_tuple = $assertType(_r$16, $String, true);
						mK = _tuple[0];
						ok = _tuple[1];
						/* */ if (!ok) { $s = 37; continue; }
						/* */ $s = 38; continue;
						/* if (!ok) { */ case 37:
							_i$3++;
							/* continue; */ $s = 34; continue;
						/* } */ case 38:
						/* */ if (strings.EqualFold(mK, fieldName)) { $s = 39; continue; }
						/* */ $s = 40; continue;
						/* if (strings.EqualFold(mK, fieldName)) { */ case 39:
							rawMapKey = dataValKey$1;
							_r$17 = $clone(dataVal, reflect.Value).MapIndex($clone(dataValKey$1, reflect.Value)); /* */ $s = 41; case 41: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							rawMapVal = _r$17;
							/* break; */ $s = 35; continue;
						/* } */ case 40:
						_i$3++;
					/* } */ $s = 34; continue; case 35:
					if (!$clone(rawMapVal, reflect.Value).IsValid()) {
						_i$2++;
						/* continue; */ $s = 28; continue;
					}
				/* } */ case 33:
				_r$18 = $clone(rawMapKey, reflect.Value).Interface(); /* */ $s = 42; case 42: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				delete dataValKeysUnused[$emptyInterface.keyFor(_r$18)];
				if (!$clone(fieldValue, reflect.Value).IsValid()) {
					$panic(new $String("field is not valid"));
				}
				/* */ if (!$clone(fieldValue, reflect.Value).CanSet()) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (!$clone(fieldValue, reflect.Value).CanSet()) { */ case 43:
					_i$2++;
					/* continue; */ $s = 28; continue;
				/* } */ case 44:
				/* */ if (!(name === "")) { $s = 45; continue; }
				/* */ $s = 46; continue;
				/* if (!(name === "")) { */ case 45:
					_r$19 = sprintf("%s.%s", new sliceType([new $String(name), new $String(fieldName)])); /* */ $s = 47; case 47: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					fieldName = _r$19;
				/* } */ case 46:
				_arg$4 = fieldName;
				_r$20 = $clone(rawMapVal, reflect.Value).Interface(); /* */ $s = 48; case 48: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_arg$5 = _r$20;
				_arg$6 = $clone(fieldValue, reflect.Value);
				_r$21 = d.decode(_arg$4, _arg$5, _arg$6); /* */ $s = 49; case 49: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				err = _r$21;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 50; continue; }
				/* */ $s = 51; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 50:
					_r$22 = appendErrors(errors$1, err); /* */ $s = 52; case 52: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					errors$1 = _r$22;
				/* } */ case 51:
				_i$2++;
			/* } */ $s = 28; continue; case 29:
			/* */ if (d.config.ErrorUnused && $keys(dataValKeysUnused).length > 0) { $s = 53; continue; }
			/* */ $s = 54; continue;
			/* if (d.config.ErrorUnused && $keys(dataValKeysUnused).length > 0) { */ case 53:
				keys = $makeSlice(sliceType$1, 0, $keys(dataValKeysUnused).length);
				_ref$4 = dataValKeysUnused;
				_i$4 = 0;
				_keys$1 = $keys(_ref$4);
				while (true) {
					if (!(_i$4 < _keys$1.length)) { break; }
					_entry$1 = _ref$4[_keys$1[_i$4]];
					if (_entry$1 === undefined) {
						_i$4++;
						continue;
					}
					rawKey = _entry$1.k;
					keys = $append(keys, $assertType(rawKey, $String));
					_i$4++;
				}
				$r = sort.Strings(keys); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$23 = errorf("'%s' has invalid keys: %s", new sliceType([new $String(name), new $String(strings.Join(keys, ", "))])); /* */ $s = 56; case 56: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				err$1 = _r$23;
				_r$24 = appendErrors(errors$1, err$1); /* */ $s = 57; case 57: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				errors$1 = _r$24;
			/* } */ case 54:
			if (errors$1.$length > 0) {
				$s = -1; return new Error.ptr(errors$1);
			}
			/* */ if (!(d.config.Metadata === ptrType$2.nil)) { $s = 58; continue; }
			/* */ $s = 59; continue;
			/* if (!(d.config.Metadata === ptrType$2.nil)) { */ case 58:
				_ref$5 = dataValKeysUnused;
				_i$5 = 0;
				_keys$2 = $keys(_ref$5);
				/* while (true) { */ case 60:
					/* if (!(_i$5 < _keys$2.length)) { break; } */ if(!(_i$5 < _keys$2.length)) { $s = 61; continue; }
					_entry$2 = _ref$5[_keys$2[_i$5]];
					if (_entry$2 === undefined) {
						_i$5++;
						/* continue; */ $s = 60; continue;
					}
					rawKey$1 = _entry$2.k;
					key = $assertType(rawKey$1, $String);
					/* */ if (!(name === "")) { $s = 62; continue; }
					/* */ $s = 63; continue;
					/* if (!(name === "")) { */ case 62:
						_r$25 = sprintf("%s.%s", new sliceType([new $String(name), new $String(key)])); /* */ $s = 64; case 64: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
						key = _r$25;
					/* } */ case 63:
					d.config.Metadata.Unused = $append(d.config.Metadata.Unused, key);
					_i$5++;
				/* } */ $s = 60; continue; case 61:
			/* } */ case 59:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeStructFromMap }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.dataVal = dataVal; $f.dataValKey = dataValKey; $f.dataValKey$1 = dataValKey$1; $f.dataValKeys = dataValKeys; $f.dataValKeysUnused = dataValKeysUnused; $f.dataValType = dataValType; $f.err = err; $f.err$1 = err$1; $f.errors$1 = errors$1; $f.f = f; $f.field$1 = field$1; $f.fieldKind = fieldKind; $f.fieldName = fieldName; $f.fieldType = fieldType; $f.fieldValue = fieldValue; $f.fields = fields; $f.i = i; $f.key = key; $f.keys = keys; $f.kind = kind; $f.mK = mK; $f.name = name; $f.ok = ok; $f.rawKey = rawKey; $f.rawKey$1 = rawKey$1; $f.rawMapKey = rawMapKey; $f.rawMapVal = rawMapVal; $f.squash = squash; $f.structType$1 = structType$1; $f.structVal = structVal; $f.structs = structs; $f.tag = tag; $f.tagParts = tagParts; $f.tagValue = tagValue; $f.val = val; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		};
		Decoder.prototype.decodeStructFromMap = function(name, dataVal, val) { return this.$val.decodeStructFromMap(name, dataVal, val); };
		getKind = function(val) {
			var kind, val;
			kind = $clone(val, reflect.Value).Kind();
			if (kind >= 2 && kind <= 6) {
				return 2;
			} else if (kind >= 7 && kind <= 11) {
				return 7;
			} else if (kind >= 13 && kind <= 14) {
				return 13;
			} else {
				return kind;
			}
		};
		ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "WrappedErrors", name: "WrappedErrors", pkg: "", typ: $funcType([], [sliceType$3], false)}];
		ptrType$3.methods = [{prop: "Decode", name: "Decode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "decode", name: "decode", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeBasic", name: "decodeBasic", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeString", name: "decodeString", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeInt", name: "decodeInt", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeUint", name: "decodeUint", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeBool", name: "decodeBool", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeFloat", name: "decodeFloat", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeMap", name: "decodeMap", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeMapFromSlice", name: "decodeMapFromSlice", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, reflect.Value, reflect.Value, reflect.Value], [$error], false)}, {prop: "decodeMapFromMap", name: "decodeMapFromMap", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, reflect.Value, reflect.Value, reflect.Value], [$error], false)}, {prop: "decodeMapFromStruct", name: "decodeMapFromStruct", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, reflect.Value, reflect.Value, reflect.Value], [$error], false)}, {prop: "decodePtr", name: "decodePtr", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeFunc", name: "decodeFunc", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeSlice", name: "decodeSlice", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeArray", name: "decodeArray", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeStruct", name: "decodeStruct", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, $emptyInterface, reflect.Value], [$error], false)}, {prop: "decodeStructFromMap", name: "decodeStructFromMap", pkg: "github.com/rocketlaunchr/react/forks/mapstructure", typ: $funcType([$String, reflect.Value, reflect.Value], [$error], false)}];
		Error.init("", [{prop: "Errors", name: "Errors", embedded: false, exported: true, typ: sliceType$1, tag: ""}]);
		jsonNumber.init([{prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, $error], false)}]);
		DecodeHookFunc.init([]);
		DecodeHookFuncType.init([reflect.Type, reflect.Type, $emptyInterface], [$emptyInterface, $error], false);
		DecodeHookFuncKind.init([reflect.Kind, reflect.Kind, $emptyInterface], [$emptyInterface, $error], false);
		DecoderConfig.init("", [{prop: "DecodeHook", name: "DecodeHook", embedded: false, exported: true, typ: DecodeHookFunc, tag: ""}, {prop: "ErrorUnused", name: "ErrorUnused", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroFields", name: "ZeroFields", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "WeaklyTypedInput", name: "WeaklyTypedInput", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "Metadata", name: "Metadata", embedded: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Result", name: "Result", embedded: false, exported: true, typ: $emptyInterface, tag: ""}, {prop: "TagName", name: "TagName", embedded: false, exported: true, typ: $String, tag: ""}]);
		Decoder.init("github.com/rocketlaunchr/react/forks/mapstructure", [{prop: "config", name: "config", embedded: false, exported: false, typ: ptrType$4, tag: ""}]);
		Metadata.init("", [{prop: "Keys", name: "Keys", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Unused", name: "Unused", embedded: false, exported: true, typ: sliceType$1, tag: ""}]);
		field.init("github.com/rocketlaunchr/react/forks/mapstructure", [{prop: "field", name: "field", embedded: false, exported: false, typ: reflect.StructField, tag: ""}, {prop: "val", name: "val", embedded: false, exported: false, typ: reflect.Value, tag: ""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = reflect.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = time.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["github.com/rocketlaunchr/react"] = (function() {
		var $pkg = {}, $init, errors, js, mapstructure, reflect, strings, Map, UpdaterFunc, SetState, ClassDef, SyntheticEvent, Set, mapType, sliceType, ptrType$2, funcType$1, funcType$2, funcType$3, funcType$4, funcType$5, ptrType$3, sliceType$2, sliceType$3, funcType$6, ptrType$4, funcType$7, funcType$8, funcType$9, funcType$10, funcType$11, funcType$12, funcType$13, funcType$14, funcType$15, funcType$16, funcType$17, mapType$1, JSX, GetElementByID, Render, NewClassDef, CreateClass, SToMap, jsObjectIsNotNil, jsObjectIsNil, convertStruct, isStruct, UnmarshalStruct, UnmarshalProps, UnmarshalState, DangerouslySetInnerHTMLFunc, DangerouslySetInnerHTML;
		errors = $packages["errors"];
		js = $packages["github.com/gopherjs/gopherjs/js"];
		mapstructure = $packages["github.com/rocketlaunchr/react/forks/mapstructure"];
		reflect = $packages["reflect"];
		strings = $packages["strings"];
		Map = $pkg.Map = $newType(4, $kindFunc, "react.Map", true, "github.com/rocketlaunchr/react", true, null);
		UpdaterFunc = $pkg.UpdaterFunc = $newType(4, $kindFunc, "react.UpdaterFunc", true, "github.com/rocketlaunchr/react", true, null);
		SetState = $pkg.SetState = $newType(4, $kindFunc, "react.SetState", true, "github.com/rocketlaunchr/react", true, null);
		ClassDef = $pkg.ClassDef = $newType(4, $kindMap, "react.ClassDef", true, "github.com/rocketlaunchr/react", true, null);
		SyntheticEvent = $pkg.SyntheticEvent = $newType(0, $kindStruct, "react.SyntheticEvent", true, "github.com/rocketlaunchr/react", true, function(O_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.O = null;
				return;
			}
			this.O = O_;
		});
		Set = $pkg.Set = $newType(4, $kindMap, "react.Set", true, "github.com/rocketlaunchr/react", true, null);
		mapType = $mapType($String, $emptyInterface);
		sliceType = $sliceType($emptyInterface);
		ptrType$2 = $ptrType(js.Object);
		funcType$1 = $funcType([], [], false);
		funcType$2 = $funcType([Map, Map], [$emptyInterface], false);
		funcType$3 = $funcType([ptrType$2, ptrType$2], [$emptyInterface], false);
		funcType$4 = $funcType([ptrType$2], [], false);
		funcType$5 = $funcType([], [$emptyInterface], false);
		ptrType$3 = $ptrType(mapstructure.Metadata);
		sliceType$2 = $sliceType(funcType$1);
		sliceType$3 = $sliceType(ptrType$2);
		funcType$6 = $funcType([ptrType$2, Map, Map, SetState, sliceType$3], [$emptyInterface], false);
		ptrType$4 = $ptrType(SyntheticEvent);
		funcType$7 = $funcType([ptrType$2, ptrType$4, Map, Map, SetState], [], false);
		funcType$8 = $funcType([ptrType$2, sliceType$3], [funcType$7], false);
		funcType$9 = $funcType([ptrType$2], [$emptyInterface], false);
		funcType$10 = $funcType([ptrType$2, Map], [$emptyInterface], false);
		funcType$11 = $funcType([ptrType$2, Map, Map, SetState], [], false);
		funcType$12 = $funcType([ptrType$2, Map, Map], [], false);
		funcType$13 = $funcType([ptrType$2, Map, Map, Map, Map], [$Bool], false);
		funcType$14 = $funcType([ptrType$2, Map, Map, Map, Map], [$emptyInterface], false);
		funcType$15 = $funcType([ptrType$2, Map, Map, Map, Map, SetState, ptrType$2], [], false);
		funcType$16 = $funcType([ptrType$2, Map, Map], [$emptyInterface], false);
		funcType$17 = $funcType([ptrType$2, ptrType$2, ptrType$2, Map, Map, SetState], [], false);
		mapType$1 = $mapType($String, $String);
		JSX = function(component, props, children) {
			var _r, args, children, component, obj, props, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; args = $f.args; children = $f.children; component = $f.component; obj = $f.obj; props = $f.props; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = SToMap(props); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			args = new sliceType([component, new mapType(_r)]);
			if (children.$length > 0) {
				args = $appendSlice(args, children);
			}
			$s = -1; return (obj = $pkg.React, obj.createElement.apply(obj, $externalize(args, sliceType)));
			/* */ } return; } if ($f === undefined) { $f = { $blk: JSX }; } $f._r = _r; $f.args = args; $f.children = children; $f.component = component; $f.obj = obj; $f.props = props; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.JSX = JSX;
		GetElementByID = function(id, dom) {
			var dom, id;
			if (dom.$length > 0) {
				return (0 >= dom.$length ? ($throwRuntimeError("index out of range"), undefined) : dom.$array[dom.$offset + 0]).getElementById($externalize(id, $String));
			}
			return $global.document.getElementById($externalize(id, $String));
		};
		$pkg.GetElementByID = GetElementByID;
		Render = function(element, domTarget, callback) {
			var callback, domTarget, element;
			if (callback.$length > 0 && !((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]) === $throwNilPointerError)) {
				return $pkg.ReactDOM.render(element, domTarget, $externalize((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]), funcType$1));
			}
			return $pkg.ReactDOM.render(element, domTarget);
		};
		$pkg.Render = Render;
		NewClassDef = function(displayName) {
			var _key, def, displayName;
			def = $makeMap($String.keyFor, [{ k: "render", v: new $jsObjectPtr(js.MakeFunc((function(this$1, arguments$1) {
				return $ifaceNil;
			}))) }]);
			_key = "displayName"; (def || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new $String(displayName) };
			return def;
		};
		$pkg.NewClassDef = NewClassDef;
		ClassDef.prototype.setMethod = function(static$1, name, f) {
			var _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _key$2, _ref, _tuple, _tuple$1, def, exists, exists$1, f, name, s, static$1, x;
			def = this.$val;
			if (f === $throwNilPointerError) {
				if (static$1) {
					_tuple = (_entry = def[$String.keyFor("statics")], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
					exists = _tuple[1];
					if (exists) {
						_ref = (_entry$1 = def[$String.keyFor("statics")], _entry$1 !== undefined ? _entry$1.v : $ifaceNil);
						if ($assertType(_ref, mapType, true)[1]) {
							s = _ref.$val;
							delete s[$String.keyFor(name)];
						}
					}
				} else {
					delete def[$String.keyFor(name)];
				}
				return;
			}
			if (!static$1 && name === "statics") {
				$panic(new $String("can't have function name called 'statics'"));
			}
			x = (function $b(this$1, arguments$1) {
				var _r, arguments$1, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				this$1 = [this$1];
				props = (function(this$1) { return function(key) {
					var key;
					return this$1[0].props[$externalize(key, $String)];
				}; })(this$1);
				state = (function(this$1) { return function(key) {
					var key;
					return this$1[0].state[$externalize(key, $String)];
				}; })(this$1);
				setState = (function(this$1) { return function $b(updater, callback) {
					var _r, _r$1, _ref$1, _ref$2, callback, updater, updater$1, updater$2, updater$3, updater$4, updater$5, updater$6, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; callback = $f.callback; updater = $f.updater; updater$1 = $f.updater$1; updater$2 = $f.updater$2; updater$3 = $f.updater$3; updater$4 = $f.updater$4; updater$5 = $f.updater$5; updater$6 = $f.updater$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					updater$1 = [updater$1];
					updater$2 = [updater$2];
					updater$3 = [updater$3];
					updater$4 = [updater$4];
					if ($interfaceIsEqual(updater, $ifaceNil)) {
						$s = -1; return;
					}
					/* */ if (callback.$length > 0 && !((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]) === $throwNilPointerError)) { $s = 1; continue; }
					/* */ $s = 2; continue;
					/* if (callback.$length > 0 && !((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]) === $throwNilPointerError)) { */ case 1:
						_ref$1 = updater;
						/* */ if ($assertType(_ref$1, funcType$2, true)[1]) { $s = 4; continue; }
						/* */ if ($assertType(_ref$1, UpdaterFunc, true)[1]) { $s = 5; continue; }
						/* */ $s = 6; continue;
						/* if ($assertType(_ref$1, funcType$2, true)[1]) { */ case 4:
							updater$1[0] = _ref$1.$val;
							this$1[0].setState($externalize((function(this$1, updater$1, updater$2, updater$3, updater$4) { return function $b(state$1, props$1) {
								var _r, _r$1, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r = updater$1[0]((function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props$1), (function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props$1, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
								_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$1);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(this$1, updater$1), funcType$3), $externalize((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]), funcType$1));
							$s = 7; continue;
						/* } else if ($assertType(_ref$1, UpdaterFunc, true)[1]) { */ case 5:
							updater$2[0] = _ref$1.$val;
							this$1[0].setState($externalize((function(this$1, updater$1, updater$2, updater$3, updater$4) { return function $b(state$1, props$1) {
								var _r, _r$1, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r = updater$2[0]((function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props$1), (function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props$1, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
								_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$1);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(this$1, updater$1, updater$2), funcType$3), $externalize((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]), funcType$1));
							$s = 7; continue;
						/* } else { */ case 6:
							updater$5 = _ref$1;
							_r = SToMap(updater$5); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							this$1[0].setState($externalize(_r, mapType), $externalize((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]), funcType$1));
						/* } */ case 7:
						$s = 3; continue;
					/* } else { */ case 2:
						_ref$2 = updater;
						/* */ if ($assertType(_ref$2, funcType$2, true)[1]) { $s = 9; continue; }
						/* */ if ($assertType(_ref$2, UpdaterFunc, true)[1]) { $s = 10; continue; }
						/* */ $s = 11; continue;
						/* if ($assertType(_ref$2, funcType$2, true)[1]) { */ case 9:
							updater$3[0] = _ref$2.$val;
							this$1[0].setState($externalize((function(this$1, updater$1, updater$2, updater$3, updater$4) { return function $b(state$1, props$1) {
								var _r$1, _r$2, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r$1 = updater$3[0]((function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props$1), (function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props$1, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								_r$2 = SToMap(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$2);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(this$1, updater$1, updater$2, updater$3), funcType$3));
							$s = 12; continue;
						/* } else if ($assertType(_ref$2, UpdaterFunc, true)[1]) { */ case 10:
							updater$4[0] = _ref$2.$val;
							this$1[0].setState($externalize((function(this$1, updater$1, updater$2, updater$3, updater$4) { return function $b(state$1, props$1) {
								var _r$1, _r$2, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r$1 = updater$4[0]((function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props$1), (function(props$1, state$1, this$1, updater$1, updater$2, updater$3, updater$4) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props$1, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								_r$2 = SToMap(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$2);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(this$1, updater$1, updater$2, updater$3, updater$4), funcType$3));
							$s = 12; continue;
						/* } else { */ case 11:
							updater$6 = _ref$2;
							_r$1 = SToMap(updater$6); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							this$1[0].setState($externalize(_r$1, mapType));
						/* } */ case 12:
					/* } */ case 3:
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.callback = callback; $f.updater = updater; $f.updater$1 = updater$1; $f.updater$2 = updater$2; $f.updater$3 = updater$3; $f.updater$4 = updater$4; $f.updater$5 = updater$5; $f.updater$6 = updater$6; $f.$s = $s; $f.$r = $r; return $f;
				}; })(this$1);
				_r = f(this$1[0], props, state, setState, arguments$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			});
			if (static$1) {
				_tuple$1 = (_entry$2 = def[$String.keyFor("statics")], _entry$2 !== undefined ? [_entry$2.v, true] : [$ifaceNil, false]);
				exists$1 = _tuple$1[1];
				if (exists$1) {
					_key = name; ($assertType((_entry$3 = def[$String.keyFor("statics")], _entry$3 !== undefined ? _entry$3.v : $ifaceNil), mapType) || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new $jsObjectPtr(js.MakeFunc(x)) };
				} else {
					_key$1 = "statics"; (def || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: new mapType($makeMap($String.keyFor, [{ k: name, v: new $jsObjectPtr(js.MakeFunc(x)) }])) };
				}
			} else {
				_key$2 = name; (def || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: new $jsObjectPtr(js.MakeFunc(x)) };
			}
		};
		$ptrType(ClassDef).prototype.setMethod = function(static$1, name, f) { return new ClassDef(this.$get()).setMethod(static$1, name, f); };
		ClassDef.prototype.SetMethod = function(name, f) {
			var def, f, name;
			def = this.$val;
			new ClassDef(def).setMethod(false, name, f);
		};
		$ptrType(ClassDef).prototype.SetMethod = function(name, f) { return new ClassDef(this.$get()).SetMethod(name, f); };
		CreateClass = function(def) {
			var def;
			return $pkg.CreateReactClass.createReactClass($externalize(def, ClassDef));
		};
		$pkg.CreateClass = CreateClass;
		SyntheticEvent.ptr.prototype.Bubbles = function() {
			var s;
			s = this;
			return !!(s.O.bubbles);
		};
		SyntheticEvent.prototype.Bubbles = function() { return this.$val.Bubbles(); };
		SyntheticEvent.ptr.prototype.Cancelable = function() {
			var s;
			s = this;
			return !!(s.O.cancelable);
		};
		SyntheticEvent.prototype.Cancelable = function() { return this.$val.Cancelable(); };
		SyntheticEvent.ptr.prototype.CurrentTarget = function() {
			var s;
			s = this;
			return s.O.currentTarget;
		};
		SyntheticEvent.prototype.CurrentTarget = function() { return this.$val.CurrentTarget(); };
		SyntheticEvent.ptr.prototype.DefaultPrevented = function() {
			var s;
			s = this;
			return !!(s.O.defaultPrevented);
		};
		SyntheticEvent.prototype.DefaultPrevented = function() { return this.$val.DefaultPrevented(); };
		SyntheticEvent.ptr.prototype.EventPhase = function() {
			var s;
			s = this;
			return $parseInt(s.O.eventPhase) >> 0;
		};
		SyntheticEvent.prototype.EventPhase = function() { return this.$val.EventPhase(); };
		SyntheticEvent.ptr.prototype.IsTrusted = function() {
			var s;
			s = this;
			return !!(s.O.isTrusted);
		};
		SyntheticEvent.prototype.IsTrusted = function() { return this.$val.IsTrusted(); };
		SyntheticEvent.ptr.prototype.NativeEvent = function() {
			var s;
			s = this;
			return s.O.nativeEvent;
		};
		SyntheticEvent.prototype.NativeEvent = function() { return this.$val.NativeEvent(); };
		SyntheticEvent.ptr.prototype.PreventDefault = function() {
			var s;
			s = this;
			s.O.preventDefault();
		};
		SyntheticEvent.prototype.PreventDefault = function() { return this.$val.PreventDefault(); };
		SyntheticEvent.ptr.prototype.IsDefaultPrevented = function() {
			var s;
			s = this;
			return !!(s.O.isDefaultPrevented());
		};
		SyntheticEvent.prototype.IsDefaultPrevented = function() { return this.$val.IsDefaultPrevented(); };
		SyntheticEvent.ptr.prototype.StopPropagation = function() {
			var s;
			s = this;
			s.O.stopPropagation();
		};
		SyntheticEvent.prototype.StopPropagation = function() { return this.$val.StopPropagation(); };
		SyntheticEvent.ptr.prototype.IsPropagationStopped = function() {
			var s;
			s = this;
			return !!(s.O.isPropagationStopped());
		};
		SyntheticEvent.prototype.IsPropagationStopped = function() { return this.$val.IsPropagationStopped(); };
		SyntheticEvent.ptr.prototype.Target = function() {
			var s;
			s = this;
			return s.O.target;
		};
		SyntheticEvent.prototype.Target = function() { return this.$val.Target(); };
		SyntheticEvent.ptr.prototype.TimeStamp = function() {
			var s;
			s = this;
			return $parseFloat(s.O.timeStamp);
		};
		SyntheticEvent.prototype.TimeStamp = function() { return this.$val.TimeStamp(); };
		SyntheticEvent.ptr.prototype.Type = function() {
			var s;
			s = this;
			return $internalize(s.O.type, $String);
		};
		SyntheticEvent.prototype.Type = function() { return this.$val.Type(); };
		SyntheticEvent.ptr.prototype.Persist = function() {
			var p, s;
			s = this;
			p = s.O.persist();
			return new SyntheticEvent.ptr(p);
		};
		SyntheticEvent.prototype.Persist = function() { return this.$val.Persist(); };
		ClassDef.prototype.SetEventHandler = function(name, f) {
			var def, f, h, name;
			def = this.$val;
			h = (function $b(this$1, props, state, setState, arguments$1) {
				var arguments$1, props, setState, state, syntheticEvent, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; syntheticEvent = $f.syntheticEvent; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				syntheticEvent = new SyntheticEvent.ptr((0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]));
				$r = f(this$1, syntheticEvent, props, state, setState); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.syntheticEvent = syntheticEvent; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			});
			new ClassDef(def).setMethod(false, name, h);
		};
		$ptrType(ClassDef).prototype.SetEventHandler = function(name, f) { return new ClassDef(this.$get()).SetEventHandler(name, f); };
		ClassDef.prototype.SetMultiArgEventHandler = function(name, f) {
			var _key, def, f, name, x;
			def = this.$val;
			if (f === $throwNilPointerError) {
				delete def[$String.keyFor(name)];
				return;
			}
			if (name === "statics") {
				$panic(new $String("can't have function name called 'statics'"));
			}
			x = (function $b(this$1, arguments$1) {
				var _r, arguments$1, props, setState, state, this$1, z, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				props = [props];
				setState = [setState];
				state = [state];
				this$1 = [this$1];
				z = [z];
				props[0] = (function(props, setState, state, this$1, z) { return function(key) {
					var key;
					return this$1[0].props[$externalize(key, $String)];
				}; })(props, setState, state, this$1);
				state[0] = (function(props, setState, state, this$1, z) { return function(key) {
					var key;
					return this$1[0].state[$externalize(key, $String)];
				}; })(props, setState, state, this$1);
				setState[0] = (function(props, setState, state, this$1, z) { return function $b(updater, callback) {
					var _r, _r$1, _ref, _ref$1, callback, updater, updater$1, updater$2, updater$3, updater$4, updater$5, updater$6, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; callback = $f.callback; updater = $f.updater; updater$1 = $f.updater$1; updater$2 = $f.updater$2; updater$3 = $f.updater$3; updater$4 = $f.updater$4; updater$5 = $f.updater$5; updater$6 = $f.updater$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					updater$1 = [updater$1];
					updater$2 = [updater$2];
					updater$3 = [updater$3];
					updater$4 = [updater$4];
					if ($interfaceIsEqual(updater, $ifaceNil)) {
						$s = -1; return;
					}
					/* */ if (callback.$length > 0 && !((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]) === $throwNilPointerError)) { $s = 1; continue; }
					/* */ $s = 2; continue;
					/* if (callback.$length > 0 && !((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]) === $throwNilPointerError)) { */ case 1:
						_ref = updater;
						/* */ if ($assertType(_ref, funcType$2, true)[1]) { $s = 4; continue; }
						/* */ if ($assertType(_ref, UpdaterFunc, true)[1]) { $s = 5; continue; }
						/* */ $s = 6; continue;
						/* if ($assertType(_ref, funcType$2, true)[1]) { */ case 4:
							updater$1[0] = _ref.$val;
							this$1[0].setState($externalize((function(props, setState, state, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function $b(state$1, props$1) {
								var _r, _r$1, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r = updater$1[0]((function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props, props$1), (function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props, props$1, setState, state, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
								_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$1);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(props, setState, state, this$1, updater$1), funcType$3), $externalize((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]), funcType$1));
							$s = 7; continue;
						/* } else if ($assertType(_ref, UpdaterFunc, true)[1]) { */ case 5:
							updater$2[0] = _ref.$val;
							this$1[0].setState($externalize((function(props, setState, state, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function $b(state$1, props$1) {
								var _r, _r$1, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r = updater$2[0]((function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props, props$1), (function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props, props$1, setState, state, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
								_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$1);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(props, setState, state, this$1, updater$1, updater$2), funcType$3), $externalize((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]), funcType$1));
							$s = 7; continue;
						/* } else { */ case 6:
							updater$5 = _ref;
							_r = SToMap(updater$5); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							this$1[0].setState($externalize(_r, mapType), $externalize((0 >= callback.$length ? ($throwRuntimeError("index out of range"), undefined) : callback.$array[callback.$offset + 0]), funcType$1));
						/* } */ case 7:
						$s = 3; continue;
					/* } else { */ case 2:
						_ref$1 = updater;
						/* */ if ($assertType(_ref$1, funcType$2, true)[1]) { $s = 9; continue; }
						/* */ if ($assertType(_ref$1, UpdaterFunc, true)[1]) { $s = 10; continue; }
						/* */ $s = 11; continue;
						/* if ($assertType(_ref$1, funcType$2, true)[1]) { */ case 9:
							updater$3[0] = _ref$1.$val;
							this$1[0].setState($externalize((function(props, setState, state, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function $b(state$1, props$1) {
								var _r$1, _r$2, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r$1 = updater$3[0]((function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props, props$1), (function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props, props$1, setState, state, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								_r$2 = SToMap(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$2);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(props, setState, state, this$1, updater$1, updater$2, updater$3), funcType$3));
							$s = 12; continue;
						/* } else if ($assertType(_ref$1, UpdaterFunc, true)[1]) { */ case 10:
							updater$4[0] = _ref$1.$val;
							this$1[0].setState($externalize((function(props, setState, state, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function $b(state$1, props$1) {
								var _r$1, _r$2, props$1, state$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; props$1 = $f.props$1; state$1 = $f.state$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								props$1 = [props$1];
								state$1 = [state$1];
								_r$1 = updater$4[0]((function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return props$1[0][$externalize(key, $String)];
								}; })(props, props$1), (function(props, props$1, setState, state, state$1, this$1, updater$1, updater$2, updater$3, updater$4, z) { return function(key) {
									var key;
									return state$1[0][$externalize(key, $String)];
								}; })(props, props$1, setState, state, state$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								_r$2 = SToMap(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								$s = -1; return new mapType(_r$2);
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.props$1 = props$1; $f.state$1 = state$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(props, setState, state, this$1, updater$1, updater$2, updater$3, updater$4), funcType$3));
							$s = 12; continue;
						/* } else { */ case 11:
							updater$6 = _ref$1;
							_r$1 = SToMap(updater$6); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							this$1[0].setState($externalize(_r$1, mapType));
						/* } */ case 12:
					/* } */ case 3:
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.callback = callback; $f.updater = updater; $f.updater$1 = updater$1; $f.updater$2 = updater$2; $f.updater$3 = updater$3; $f.updater$4 = updater$4; $f.updater$5 = updater$5; $f.updater$6 = updater$6; $f.$s = $s; $f.$r = $r; return $f;
				}; })(props, setState, state, this$1);
				_r = f(this$1[0], arguments$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				z[0] = _r;
				$s = -1; return new funcType$4((function(props, setState, state, this$1, z) { return function $b(e) {
					var e, syntheticEvent, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; syntheticEvent = $f.syntheticEvent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					syntheticEvent = new SyntheticEvent.ptr(e);
					$r = z[0](this$1[0], syntheticEvent, props[0], state[0], setState[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.e = e; $f.syntheticEvent = syntheticEvent; $f.$s = $s; $f.$r = $r; return $f;
				}; })(props, setState, state, this$1, z));
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
			});
			_key = name; (def || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new $jsObjectPtr(js.MakeFunc(x)) };
		};
		$ptrType(ClassDef).prototype.SetMultiArgEventHandler = function(name, f) { return new ClassDef(this.$get()).SetMultiArgEventHandler(name, f); };
		ClassDef.prototype.GetDefaultProps = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("getDefaultProps", (function $b(this$1, props, state, setState, arguments$1) {
				var _r, _r$1, arguments$1, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r = f(this$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new mapType(_r$1);
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.GetDefaultProps = function(f) { return new ClassDef(this.$get()).GetDefaultProps(f); };
		ClassDef.prototype.SetPropTypes = function(propTypes) {
			var _key, _r, def, propTypes, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; def = $f.def; propTypes = $f.propTypes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			def = this.$val;
			_r = SToMap(propTypes); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_key = "propTypes"; (def || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new mapType(_r) };
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: ClassDef.prototype.SetPropTypes }; } $f._key = _key; $f._r = _r; $f.def = def; $f.propTypes = propTypes; $f.$s = $s; $f.$r = $r; return $f;
		};
		$ptrType(ClassDef).prototype.SetPropTypes = function(propTypes) { return new ClassDef(this.$get()).SetPropTypes(propTypes); };
		ClassDef.prototype.GetInitialState = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("getInitialState", (function $b(this$1, props, state, setState, arguments$1) {
				var _r, _r$1, arguments$1, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r = f(this$1, props); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new mapType(_r$1);
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.GetInitialState = function(f) { return new ClassDef(this.$get()).GetInitialState(f); };
		ClassDef.prototype.GetDerivedStateFromProps = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).setMethod(true, "getDerivedStateFromProps", (function $b(this$1, props, state, setState, arguments$1) {
				var _r, _r$1, arguments$1, nextProps, prevState, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; arguments$1 = $f.arguments$1; nextProps = $f.nextProps; prevState = $f.prevState; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				arguments$1 = [arguments$1];
				nextProps = (function(arguments$1) { return function(key) {
					var key;
					return (0 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 0])[$externalize(key, $String)];
				}; })(arguments$1);
				prevState = (function(arguments$1) { return function(key) {
					var key;
					return (1 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 1])[$externalize(key, $String)];
				}; })(arguments$1);
				_r = f(nextProps, prevState); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new mapType(_r$1);
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.arguments$1 = arguments$1; $f.nextProps = nextProps; $f.prevState = prevState; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.GetDerivedStateFromProps = function(f) { return new ClassDef(this.$get()).GetDerivedStateFromProps(f); };
		ClassDef.prototype.ComponentDidMount = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("componentDidMount", (function $b(this$1, props, state, setState, arguments$1) {
				var arguments$1, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = f(this$1, props, state, setState); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.ComponentDidMount = function(f) { return new ClassDef(this.$get()).ComponentDidMount(f); };
		ClassDef.prototype.ComponentWillUnmount = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("componentWillUnmount", (function $b(this$1, props, state, setState, arguments$1) {
				var arguments$1, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = f(this$1, props, state); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.ComponentWillUnmount = function(f) { return new ClassDef(this.$get()).ComponentWillUnmount(f); };
		ClassDef.prototype.ShouldComponentUpdate = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("shouldComponentUpdate", (function $b(this$1, props, state, setState, arguments$1) {
				var _r, arguments$1, nextProps, nextState, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arguments$1 = $f.arguments$1; nextProps = $f.nextProps; nextState = $f.nextState; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				arguments$1 = [arguments$1];
				nextProps = (function(arguments$1) { return function(key) {
					var key;
					return (0 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 0])[$externalize(key, $String)];
				}; })(arguments$1);
				nextState = (function(arguments$1) { return function(key) {
					var key;
					return (1 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 1])[$externalize(key, $String)];
				}; })(arguments$1);
				_r = f(this$1, props, nextProps, state, nextState); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return new $Bool(_r);
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.arguments$1 = arguments$1; $f.nextProps = nextProps; $f.nextState = nextState; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.ShouldComponentUpdate = function(f) { return new ClassDef(this.$get()).ShouldComponentUpdate(f); };
		ClassDef.prototype.GetSnapshotBeforeUpdate = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("getSnapshotBeforeUpdate", (function $b(this$1, props, state, setState, arguments$1) {
				var _r, _r$1, _r$2, arguments$1, prevProps, prevState, props, ret, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; arguments$1 = $f.arguments$1; prevProps = $f.prevProps; prevState = $f.prevState; props = $f.props; ret = $f.ret; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				arguments$1 = [arguments$1];
				prevProps = (function(arguments$1) { return function(key) {
					var key;
					return (0 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 0])[$externalize(key, $String)];
				}; })(arguments$1);
				prevState = (function(arguments$1) { return function(key) {
					var key;
					return (1 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 1])[$externalize(key, $String)];
				}; })(arguments$1);
				_r = f(this$1, prevProps, props, prevState, state); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				ret = _r;
				/* */ if ($interfaceIsEqual(ret, $ifaceNil)) { $s = 2; continue; }
				_r$1 = isStruct(ret); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if ($interfaceIsEqual(ret, $ifaceNil)) { */ case 2:
					$s = -1; return $ifaceNil;
				/* } else if (_r$1) { */ case 3:
					_r$2 = convertStruct(ret); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$s = -1; return new mapType(_r$2);
				/* } else { */ case 4:
					$s = -1; return ret;
				/* } */ case 5:
				$s = -1; return $ifaceNil;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.arguments$1 = arguments$1; $f.prevProps = prevProps; $f.prevState = prevState; $f.props = props; $f.ret = ret; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.GetSnapshotBeforeUpdate = function(f) { return new ClassDef(this.$get()).GetSnapshotBeforeUpdate(f); };
		ClassDef.prototype.ComponentDidUpdate = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("componentDidUpdate", (function $b(this$1, props, state, setState, arguments$1) {
				var arguments$1, prevProps, prevState, props, setState, snapshot, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arguments$1 = $f.arguments$1; prevProps = $f.prevProps; prevState = $f.prevState; props = $f.props; setState = $f.setState; snapshot = $f.snapshot; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				arguments$1 = [arguments$1];
				snapshot = (2 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 2]);
				prevProps = (function(arguments$1) { return function(key) {
					var key;
					return (0 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 0])[$externalize(key, $String)];
				}; })(arguments$1);
				prevState = (function(arguments$1) { return function(key) {
					var key;
					return (1 >= arguments$1[0].$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1[0].$array[arguments$1[0].$offset + 1])[$externalize(key, $String)];
				}; })(arguments$1);
				$r = f(this$1, prevProps, props, prevState, state, setState, snapshot); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.arguments$1 = arguments$1; $f.prevProps = prevProps; $f.prevState = prevState; $f.props = props; $f.setState = setState; $f.snapshot = snapshot; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.ComponentDidUpdate = function(f) { return new ClassDef(this.$get()).ComponentDidUpdate(f); };
		ClassDef.prototype.Render = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("render", (function $b(this$1, props, state, setState, arguments$1) {
				var _r, arguments$1, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arguments$1 = $f.arguments$1; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r = f(this$1, props, state); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.arguments$1 = arguments$1; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.Render = function(f) { return new ClassDef(this.$get()).Render(f); };
		ClassDef.prototype.ComponentDidCatch = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).SetMethod("componentDidCatch", (function $b(this$1, props, state, setState, arguments$1) {
				var arguments$1, err, info, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arguments$1 = $f.arguments$1; err = $f.err; info = $f.info; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				err = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
				info = (1 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 1]);
				$r = f(this$1, err, info, props, state, setState); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.arguments$1 = arguments$1; $f.err = err; $f.info = info; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.ComponentDidCatch = function(f) { return new ClassDef(this.$get()).ComponentDidCatch(f); };
		ClassDef.prototype.GetDerivedStateFromError = function(f) {
			var def, f;
			def = this.$val;
			new ClassDef(def).setMethod(true, "getDerivedStateFromError", (function $b(this$1, props, state, setState, arguments$1) {
				var _r, _r$1, arguments$1, err, props, setState, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; arguments$1 = $f.arguments$1; err = $f.err; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				err = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
				_r = f(err); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = SToMap(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new mapType(_r$1);
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.arguments$1 = arguments$1; $f.err = err; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
		};
		$ptrType(ClassDef).prototype.GetDerivedStateFromError = function(f) { return new ClassDef(this.$get()).GetDerivedStateFromError(f); };
		SToMap = function(s) {
			var _r, _r$1, _r$2, _ref, s, s$1, x, x$1, x$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; s = $f.s; s$1 = $f.s$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if ($interfaceIsEqual(s, $ifaceNil)) {
				$s = -1; return false;
			}
			if (jsObjectIsNil(s)) {
				$s = -1; return false;
			}
			_r = isStruct(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_r) { */ case 1:
				_r$1 = convertStruct(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } */ case 2:
			_ref = s;
			/* */ if ($assertType(_ref, js.M, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, mapType, true)[1]) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($assertType(_ref, js.M, true)[1]) { */ case 5:
				x = _ref.$val;
				$s = -1; return (x);
			/* } else if ($assertType(_ref, mapType, true)[1]) { */ case 6:
				x$1 = _ref.$val;
				$s = -1; return x$1;
			/* } else { */ case 7:
				x$2 = _ref;
				_r$2 = reflect.ValueOf(x$2); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				s$1 = _r$2;
				if ($clone(s$1, reflect.Value).IsNil()) {
					$s = -1; return false;
				}
				$panic(new $String("unrecognized type"));
			/* } */ case 8:
			$s = -1; return false;
			/* */ } return; } if ($f === undefined) { $f = { $blk: SToMap }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.s = s; $f.s$1 = s$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.SToMap = SToMap;
		jsObjectIsNotNil = function(x) {
			var _tuple, ok, v, x;
			_tuple = $assertType(x, ptrType$2, true);
			v = _tuple[0];
			ok = _tuple[1];
			if (!ok || v === null) {
				return false;
			}
			return true;
		};
		jsObjectIsNil = function(x) {
			var _tuple, ok, v, x;
			_tuple = $assertType(x, ptrType$2, true);
			v = _tuple[0];
			ok = _tuple[1];
			if (ok && v === null) {
				return true;
			}
			return false;
		};
		convertStruct = function(sIn) {
			var _arg, _arg$1, _entry, _entry$1, _entry$2, _i, _key, _key$1, _key$10, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _key$8, _key$9, _keys, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _v, _v$1, _v$2, all, attr, base, e, f, fieldName, fieldTag, fieldVal, fieldValRaw, fn, i, i$1, mp, mp$1, ok, ok$1, out, s, sIn, set, slc, typeOfT, val, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _key$10 = $f._key$10; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; _key$8 = $f._key$8; _key$9 = $f._key$9; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; all = $f.all; attr = $f.attr; base = $f.base; e = $f.e; f = $f.f; fieldName = $f.fieldName; fieldTag = $f.fieldTag; fieldVal = $f.fieldVal; fieldValRaw = $f.fieldValRaw; fn = $f.fn; i = $f.i; i$1 = $f.i$1; mp = $f.mp; mp$1 = $f.mp$1; ok = $f.ok; ok$1 = $f.ok$1; out = $f.out; s = $f.s; sIn = $f.sIn; set = $f.set; slc = $f.slc; typeOfT = $f.typeOfT; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			out = $makeMap($String.keyFor, []);
			_r = reflect.ValueOf(sIn); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = _r;
			/* */ if ($clone(s, reflect.Value).Kind() === 22) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ($clone(s, reflect.Value).Kind() === 22) { */ case 2:
				_r$1 = reflect.Indirect($clone(s, reflect.Value)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				s = _r$1;
			/* } */ case 3:
			typeOfT = $clone(s, reflect.Value).Type();
			i = 0;
			/* while (true) { */ case 5:
				/* if (!(i < $clone(s, reflect.Value).NumField())) { break; } */ if(!(i < $clone(s, reflect.Value).NumField())) { $s = 6; continue; }
				_r$2 = typeOfT.Field(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				f = $clone(_r$2, reflect.StructField);
				/* */ if (!(f.PkgPath === "")) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!(f.PkgPath === "")) { */ case 8:
					i = i + (1) >> 0;
					/* continue; */ $s = 5; continue;
				/* } */ case 9:
				_r$3 = typeOfT.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				fieldName = _r$3.Name;
				fieldTag = new reflect.StructTag(f.Tag).Get("react");
				_r$4 = $clone(s, reflect.Value).Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				fieldValRaw = _r$4;
				_r$5 = $clone(fieldValRaw, reflect.Value).Interface(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				fieldVal = _r$5;
				if (fieldTag === "-") { _v = true; $s = 15; continue s; }
				if (!(!jsObjectIsNotNil(fieldVal) && strings.HasSuffix(fieldTag, ",omitempty"))) { _v$1 = false; $s = 16; continue s; }
				if ($interfaceIsEqual(fieldVal, $ifaceNil) || jsObjectIsNil(fieldVal)) { _v$2 = true; $s = 17; continue s; }
				_arg = fieldVal;
				_r$6 = reflect.Zero(reflect.TypeOf(fieldVal)); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = $clone(_r$6, reflect.Value).Interface(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$1 = _r$7;
				_r$8 = reflect.DeepEqual(_arg, _arg$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_v$2 = _r$8; case 17:
				_v$1 = _v$2; case 16:
				_v = _v$1; case 15:
				/* */ if (_v) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v) { */ case 13:
					i = i + (1) >> 0;
					/* continue; */ $s = 5; continue;
				/* } */ case 14:
				_tuple = $assertType(fieldVal, Set, true);
				set = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (ok) { */ case 21:
					base = strings.TrimSuffix(fieldTag, ",omitempty");
					_r$9 = strings.TrimSpace(base); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					/* */ if (_r$9 === "") { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (_r$9 === "") { */ case 23:
						i = i + (1) >> 0;
						/* continue; */ $s = 5; continue;
					/* } */ case 24:
					all = new Set(set).Convert(base);
					_ref = all;
					_i = 0;
					_keys = $keys(_ref);
					while (true) {
						if (!(_i < _keys.length)) { break; }
						_entry = _ref[_keys[_i]];
						if (_entry === undefined) {
							_i++;
							continue;
						}
						attr = _entry.k;
						val = _entry.v;
						_key = attr; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new $String(val) };
						_i++;
					}
					i = i + (1) >> 0;
					/* continue; */ $s = 5; continue;
				/* } */ case 22:
				/* */ if (fieldName === "DangerouslySetInnerHTML" && strings.TrimSuffix(fieldTag, ",omitempty") === "dangerouslySetInnerHTML") { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (fieldName === "DangerouslySetInnerHTML" && strings.TrimSuffix(fieldTag, ",omitempty") === "dangerouslySetInnerHTML") { */ case 26:
					_tuple$1 = $assertType(fieldVal, funcType$5, true);
					fn = _tuple$1[0];
					ok$1 = _tuple$1[1];
					/* */ if (ok$1) { $s = 28; continue; }
					/* */ $s = 29; continue;
					/* if (ok$1) { */ case 28:
						_r$10 = DangerouslySetInnerHTMLFunc(fn); /* */ $s = 31; case 31: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						mp = _r$10;
						_key$1 = "dangerouslySetInnerHTML"; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = mp[$String.keyFor("dangerouslySetInnerHTML")], _entry$1 !== undefined ? _entry$1.v : $ifaceNil) };
						$s = 30; continue;
					/* } else { */ case 29:
						_r$11 = DangerouslySetInnerHTML(fieldVal); /* */ $s = 32; case 32: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						mp$1 = _r$11;
						_key$2 = "dangerouslySetInnerHTML"; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: (_entry$2 = mp$1[$String.keyFor("dangerouslySetInnerHTML")], _entry$2 !== undefined ? _entry$2.v : $ifaceNil) };
					/* } */ case 30:
					i = i + (1) >> 0;
					/* continue; */ $s = 5; continue;
				/* } */ case 27:
				/* */ if ($clone(fieldValRaw, reflect.Value).Kind() === 23) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if ($clone(fieldValRaw, reflect.Value).Kind() === 23) { */ case 33:
					slc = new sliceType([]);
					i$1 = 0;
					/* while (true) { */ case 35:
						/* if (!(i$1 < $clone(fieldValRaw, reflect.Value).Len())) { break; } */ if(!(i$1 < $clone(fieldValRaw, reflect.Value).Len())) { $s = 36; continue; }
						_r$12 = $clone(fieldValRaw, reflect.Value).Index(i$1); /* */ $s = 37; case 37: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						e = _r$12;
						_r$13 = $clone(e, reflect.Value).Interface(); /* */ $s = 38; case 38: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$14 = convertStruct(_r$13); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						slc = $append(slc, new mapType(_r$14));
						i$1 = i$1 + (1) >> 0;
					/* } */ $s = 35; continue; case 36:
					if (fieldTag === "") {
						_key$3 = fieldName; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: slc };
					} else {
						_key$4 = strings.TrimSuffix(fieldTag, ",omitempty"); (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: slc };
					}
					i = i + (1) >> 0;
					/* continue; */ $s = 5; continue;
				/* } */ case 34:
				/* */ if (fieldTag === "") { $s = 40; continue; }
				/* */ $s = 41; continue;
				/* if (fieldTag === "") { */ case 40:
					/* */ if (jsObjectIsNotNil(fieldVal)) { $s = 43; continue; }
					_r$15 = isStruct(fieldVal); /* */ $s = 47; case 47: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					/* */ if (_r$15) { $s = 44; continue; }
					/* */ $s = 45; continue;
					/* if (jsObjectIsNotNil(fieldVal)) { */ case 43:
						_key$5 = fieldName; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: fieldVal };
						$s = 46; continue;
					/* } else if (_r$15) { */ case 44:
						_r$16 = convertStruct(fieldVal); /* */ $s = 48; case 48: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_key$6 = fieldName; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$6)] = { k: _key$6, v: new mapType(_r$16) };
						$s = 46; continue;
					/* } else { */ case 45:
						_key$7 = fieldName; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$7)] = { k: _key$7, v: fieldVal };
					/* } */ case 46:
					$s = 42; continue;
				/* } else { */ case 41:
					/* */ if (jsObjectIsNotNil(fieldVal)) { $s = 49; continue; }
					_r$17 = isStruct(fieldVal); /* */ $s = 53; case 53: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					/* */ if (_r$17) { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if (jsObjectIsNotNil(fieldVal)) { */ case 49:
						_key$8 = strings.TrimSuffix(fieldTag, ",omitempty"); (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$8)] = { k: _key$8, v: fieldVal };
						$s = 52; continue;
					/* } else if (_r$17) { */ case 50:
						_r$18 = convertStruct(fieldVal); /* */ $s = 54; case 54: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_key$9 = strings.TrimSuffix(fieldTag, ",omitempty"); (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$9)] = { k: _key$9, v: new mapType(_r$18) };
						$s = 52; continue;
					/* } else { */ case 51:
						_key$10 = strings.TrimSuffix(fieldTag, ",omitempty"); (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: fieldVal };
					/* } */ case 52:
				/* } */ case 42:
				i = i + (1) >> 0;
			/* } */ $s = 5; continue; case 6:
			$s = -1; return out;
			/* */ } return; } if ($f === undefined) { $f = { $blk: convertStruct }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._key$10 = _key$10; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f._key$8 = _key$8; $f._key$9 = _key$9; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.all = all; $f.attr = attr; $f.base = base; $f.e = e; $f.f = f; $f.fieldName = fieldName; $f.fieldTag = fieldTag; $f.fieldVal = fieldVal; $f.fieldValRaw = fieldValRaw; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.mp = mp; $f.mp$1 = mp$1; $f.ok = ok; $f.ok$1 = ok$1; $f.out = out; $f.s = s; $f.sIn = sIn; $f.set = set; $f.slc = slc; $f.typeOfT = typeOfT; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
		};
		isStruct = function(s) {
			var _r, _r$1, s, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = reflect.ValueOf(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			/* */ if ($clone(v, reflect.Value).Kind() === 22) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ($clone(v, reflect.Value).Kind() === 22) { */ case 2:
				_r$1 = $clone(v, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				v = _r$1;
			/* } */ case 3:
			if ($clone(v, reflect.Value).Kind() === 0) {
				$s = -1; return false;
			}
			$s = -1; return $clone(v, reflect.Value).Kind() === 25;
			/* */ } return; } if ($f === undefined) { $f = { $blk: isStruct }; } $f._r = _r; $f._r$1 = _r$1; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		};
		UnmarshalStruct = function(mp, strct) {
			var _r, _r$1, _tuple, decoder, err, mp, strct, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; decoder = $f.decoder; err = $f.err; mp = $f.mp; strct = $f.strct; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = mapstructure.NewDecoder(new mapstructure.DecoderConfig.ptr($ifaceNil, false, true, false, ptrType$3.nil, strct, "react")); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			decoder = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$panic(err);
			}
			_r$1 = decoder.Decode(new mapType(mp)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			/* */ } return; } if ($f === undefined) { $f = { $blk: UnmarshalStruct }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.decoder = decoder; $f.err = err; $f.mp = mp; $f.strct = strct; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.UnmarshalStruct = UnmarshalStruct;
		UnmarshalProps = function(this$1, strct) {
			var _r, props, strct, this$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; props = $f.props; strct = $f.strct; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			props = $assertType($internalize(this$1.props, $emptyInterface), mapType);
			_r = UnmarshalStruct(props, strct); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: UnmarshalProps }; } $f._r = _r; $f.props = props; $f.strct = strct; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.UnmarshalProps = UnmarshalProps;
		UnmarshalState = function(this$1, strct) {
			var _r, state, strct, this$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; state = $f.state; strct = $f.strct; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			state = $assertType($internalize(this$1.state, $emptyInterface), mapType);
			_r = UnmarshalStruct(state, strct); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: UnmarshalState }; } $f._r = _r; $f.state = state; $f.strct = strct; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.UnmarshalState = UnmarshalState;
		Set.prototype.Convert = function(base) {
			var _entry, _entry$1, _i, _key, _keys, _ref, attr, base, out, s;
			s = this.$val;
			out = $makeMap($String.keyFor, []);
			_ref = s;
			_i = 0;
			_keys = $keys(_ref);
			while (true) {
				if (!(_i < _keys.length)) { break; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					continue;
				}
				attr = _entry.k;
				_key = base + attr; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: (_entry$1 = s[$String.keyFor(attr)], _entry$1 !== undefined ? _entry$1.v : "") };
				_i++;
			}
			return out;
		};
		$ptrType(Set).prototype.Convert = function(base) { return new Set(this.$get()).Convert(base); };
		DangerouslySetInnerHTMLFunc = function(inside) {
			var _r, inside, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; inside = $f.inside; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = inside(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return $makeMap($String.keyFor, [{ k: "dangerouslySetInnerHTML", v: new mapType($makeMap($String.keyFor, [{ k: "__html", v: _r }])) }]);
			/* */ } return; } if ($f === undefined) { $f = { $blk: DangerouslySetInnerHTMLFunc }; } $f._r = _r; $f.inside = inside; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.DangerouslySetInnerHTMLFunc = DangerouslySetInnerHTMLFunc;
		DangerouslySetInnerHTML = function(inside) {
			var _r, inside, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; inside = $f.inside; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			inside = [inside];
			_r = DangerouslySetInnerHTMLFunc((function(inside) { return function() {
				return inside[0];
			}; })(inside)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: DangerouslySetInnerHTML }; } $f._r = _r; $f.inside = inside; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.DangerouslySetInnerHTML = DangerouslySetInnerHTML;
		ClassDef.methods = [{prop: "setMethod", name: "setMethod", pkg: "github.com/rocketlaunchr/react", typ: $funcType([$Bool, $String, funcType$6], [], false)}, {prop: "SetMethod", name: "SetMethod", pkg: "", typ: $funcType([$String, funcType$6], [], false)}, {prop: "SetEventHandler", name: "SetEventHandler", pkg: "", typ: $funcType([$String, funcType$7], [], false)}, {prop: "SetMultiArgEventHandler", name: "SetMultiArgEventHandler", pkg: "", typ: $funcType([$String, funcType$8], [], false)}, {prop: "GetDefaultProps", name: "GetDefaultProps", pkg: "", typ: $funcType([funcType$9], [], false)}, {prop: "SetPropTypes", name: "SetPropTypes", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "GetInitialState", name: "GetInitialState", pkg: "", typ: $funcType([funcType$10], [], false)}, {prop: "GetDerivedStateFromProps", name: "GetDerivedStateFromProps", pkg: "", typ: $funcType([funcType$2], [], false)}, {prop: "ComponentDidMount", name: "ComponentDidMount", pkg: "", typ: $funcType([funcType$11], [], false)}, {prop: "ComponentWillUnmount", name: "ComponentWillUnmount", pkg: "", typ: $funcType([funcType$12], [], false)}, {prop: "ShouldComponentUpdate", name: "ShouldComponentUpdate", pkg: "", typ: $funcType([funcType$13], [], false)}, {prop: "GetSnapshotBeforeUpdate", name: "GetSnapshotBeforeUpdate", pkg: "", typ: $funcType([funcType$14], [], false)}, {prop: "ComponentDidUpdate", name: "ComponentDidUpdate", pkg: "", typ: $funcType([funcType$15], [], false)}, {prop: "Render", name: "Render", pkg: "", typ: $funcType([funcType$16], [], false)}, {prop: "ComponentDidCatch", name: "ComponentDidCatch", pkg: "", typ: $funcType([funcType$17], [], false)}, {prop: "GetDerivedStateFromError", name: "GetDerivedStateFromError", pkg: "", typ: $funcType([funcType$9], [], false)}];
		ptrType$4.methods = [{prop: "Bubbles", name: "Bubbles", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Cancelable", name: "Cancelable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CurrentTarget", name: "CurrentTarget", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "DefaultPrevented", name: "DefaultPrevented", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "EventPhase", name: "EventPhase", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "IsTrusted", name: "IsTrusted", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NativeEvent", name: "NativeEvent", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "PreventDefault", name: "PreventDefault", pkg: "", typ: $funcType([], [], false)}, {prop: "IsDefaultPrevented", name: "IsDefaultPrevented", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "StopPropagation", name: "StopPropagation", pkg: "", typ: $funcType([], [], false)}, {prop: "IsPropagationStopped", name: "IsPropagationStopped", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "TimeStamp", name: "TimeStamp", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Persist", name: "Persist", pkg: "", typ: $funcType([], [ptrType$4], false)}];
		Set.methods = [{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([$String], [mapType$1], false)}];
		Map.init([$String], [ptrType$2], false);
		UpdaterFunc.init([Map, Map], [$emptyInterface], false);
		SetState.init([$emptyInterface, sliceType$2], [], true);
		ClassDef.init($String, $emptyInterface);
		SyntheticEvent.init("", [{prop: "O", name: "O", embedded: false, exported: true, typ: ptrType$2, tag: ""}]);
		Set.init($String, $String);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = mapstructure.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$pkg.React = $global.React;
			$pkg.ReactDOM = $global.ReactDOM;
			$pkg.CreateReactClass = $global;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["github.com/rocketlaunchr/react/elements"] = (function() {
		var $pkg = {}, $init, js, react, DivProps, TextAreaProps, Styles, ptrType, ptrType$1, ptrType$2, ptrType$3, Div, TextArea;
		js = $packages["github.com/gopherjs/gopherjs/js"];
		react = $packages["github.com/rocketlaunchr/react"];
		DivProps = $pkg.DivProps = $newType(0, $kindStruct, "elements.DivProps", true, "github.com/rocketlaunchr/react/elements", true, function(AriaSet_, DataSet_, DangerouslySetInnerHTML_, Accesskey_, Class_, Contenteditable_, Dir_, Draggable_, Dropzone_, Hidden_, ID_, Lang_, SpellCheck_, TabIndex_, Title_, Key_, Ref_, Role_, Style_, OnBlur_, OnFocus_, OnChange_, OnClick_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.AriaSet = false;
				this.DataSet = false;
				this.DangerouslySetInnerHTML = $ifaceNil;
				this.Accesskey = "";
				this.Class = "";
				this.Contenteditable = ptrType.nil;
				this.Dir = "";
				this.Draggable = ptrType.nil;
				this.Dropzone = "";
				this.Hidden = ptrType.nil;
				this.ID = "";
				this.Lang = "";
				this.SpellCheck = ptrType.nil;
				this.TabIndex = "";
				this.Title = "";
				this.Key = "";
				this.Ref = null;
				this.Role = "";
				this.Style = ptrType$1.nil;
				this.OnBlur = null;
				this.OnFocus = null;
				this.OnChange = null;
				this.OnClick = null;
				return;
			}
			this.AriaSet = AriaSet_;
			this.DataSet = DataSet_;
			this.DangerouslySetInnerHTML = DangerouslySetInnerHTML_;
			this.Accesskey = Accesskey_;
			this.Class = Class_;
			this.Contenteditable = Contenteditable_;
			this.Dir = Dir_;
			this.Draggable = Draggable_;
			this.Dropzone = Dropzone_;
			this.Hidden = Hidden_;
			this.ID = ID_;
			this.Lang = Lang_;
			this.SpellCheck = SpellCheck_;
			this.TabIndex = TabIndex_;
			this.Title = Title_;
			this.Key = Key_;
			this.Ref = Ref_;
			this.Role = Role_;
			this.Style = Style_;
			this.OnBlur = OnBlur_;
			this.OnFocus = OnFocus_;
			this.OnChange = OnChange_;
			this.OnClick = OnClick_;
		});
		TextAreaProps = $pkg.TextAreaProps = $newType(0, $kindStruct, "elements.TextAreaProps", true, "github.com/rocketlaunchr/react/elements", true, function(AriaSet_, DataSet_, DangerouslySetInnerHTML_, Accesskey_, Class_, Contenteditable_, Dir_, Draggable_, Dropzone_, Hidden_, ID_, Lang_, SpellCheck_, TabIndex_, Title_, Key_, Ref_, Role_, Style_, OnBlur_, OnFocus_, OnChange_, OnClick_, AutoComplete_, AutoFocus_, Cols_, DefaultValue_, DirName_, Disabled_, MaxLength_, Name_, Placeholder_, ReadOnly_, Required_, Rows_, SelectionDirection_, SelectionStart_, SelectionEnd_, TextLength_, Type_, ValidationMessage_, Value_, WillValidate_, Wrap_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.AriaSet = false;
				this.DataSet = false;
				this.DangerouslySetInnerHTML = $ifaceNil;
				this.Accesskey = "";
				this.Class = "";
				this.Contenteditable = ptrType.nil;
				this.Dir = "";
				this.Draggable = ptrType.nil;
				this.Dropzone = "";
				this.Hidden = ptrType.nil;
				this.ID = "";
				this.Lang = "";
				this.SpellCheck = ptrType.nil;
				this.TabIndex = "";
				this.Title = "";
				this.Key = "";
				this.Ref = null;
				this.Role = "";
				this.Style = ptrType$1.nil;
				this.OnBlur = null;
				this.OnFocus = null;
				this.OnChange = null;
				this.OnClick = null;
				this.AutoComplete = "";
				this.AutoFocus = ptrType.nil;
				this.Cols = ptrType$3.nil;
				this.DefaultValue = "";
				this.DirName = "";
				this.Disabled = ptrType.nil;
				this.MaxLength = ptrType$3.nil;
				this.Name = "";
				this.Placeholder = "";
				this.ReadOnly = ptrType.nil;
				this.Required = ptrType.nil;
				this.Rows = ptrType$3.nil;
				this.SelectionDirection = "";
				this.SelectionStart = ptrType$3.nil;
				this.SelectionEnd = ptrType$3.nil;
				this.TextLength = ptrType$3.nil;
				this.Type = "";
				this.ValidationMessage = "";
				this.Value = "";
				this.WillValidate = ptrType.nil;
				this.Wrap = "";
				return;
			}
			this.AriaSet = AriaSet_;
			this.DataSet = DataSet_;
			this.DangerouslySetInnerHTML = DangerouslySetInnerHTML_;
			this.Accesskey = Accesskey_;
			this.Class = Class_;
			this.Contenteditable = Contenteditable_;
			this.Dir = Dir_;
			this.Draggable = Draggable_;
			this.Dropzone = Dropzone_;
			this.Hidden = Hidden_;
			this.ID = ID_;
			this.Lang = Lang_;
			this.SpellCheck = SpellCheck_;
			this.TabIndex = TabIndex_;
			this.Title = Title_;
			this.Key = Key_;
			this.Ref = Ref_;
			this.Role = Role_;
			this.Style = Style_;
			this.OnBlur = OnBlur_;
			this.OnFocus = OnFocus_;
			this.OnChange = OnChange_;
			this.OnClick = OnClick_;
			this.AutoComplete = AutoComplete_;
			this.AutoFocus = AutoFocus_;
			this.Cols = Cols_;
			this.DefaultValue = DefaultValue_;
			this.DirName = DirName_;
			this.Disabled = Disabled_;
			this.MaxLength = MaxLength_;
			this.Name = Name_;
			this.Placeholder = Placeholder_;
			this.ReadOnly = ReadOnly_;
			this.Required = Required_;
			this.Rows = Rows_;
			this.SelectionDirection = SelectionDirection_;
			this.SelectionStart = SelectionStart_;
			this.SelectionEnd = SelectionEnd_;
			this.TextLength = TextLength_;
			this.Type = Type_;
			this.ValidationMessage = ValidationMessage_;
			this.Value = Value_;
			this.WillValidate = WillValidate_;
			this.Wrap = Wrap_;
		});
		Styles = $pkg.Styles = $newType(0, $kindStruct, "elements.Styles", true, "github.com/rocketlaunchr/react/elements", true, function(AlignContent_, AlignItems_, AlignSelf_, AlignmentBaseline_, All_, Animation_, AnimationDelay_, AnimationDirection_, AnimationDuration_, AnimationFillMode_, AnimationIterationCount_, AnimationName_, AnimationPlayState_, AnimationTimingFunction_, Appearance_, BackfaceVisibility_, Background_, BackgroundAttachment_, BackgroundClip_, BackgroundColor_, BackgroundImage_, BackgroundOrigin_, BackgroundPosition_, BackgroundRepeat_, BackgroundSize_, BaselineShift_, Binding_, Bleed_, BookmarkLabel_, BookmarkLevel_, BookmarkState_, Border_, BorderBottom_, BorderBottomColor_, BorderBottomLeftRadius_, BorderBottomRightRadius_, BorderBottomStyle_, BorderBottomWidth_, BorderBoundary_, BorderCollapse_, BorderColor_, BorderImage_, BorderImageOutset_, BorderImageRepeat_, BorderImageSlice_, BorderImageSource_, BorderImageWidth_, BorderLeft_, BorderLeftColor_, BorderLeftStyle_, BorderLeftWidth_, BorderRadius_, BorderRight_, BorderRightColor_, BorderRightStyle_, BorderRightWidth_, BorderSpacing_, BorderStyle_, BorderTop_, BorderTopColor_, BorderTopLeftRadius_, BorderTopRightRadius_, BorderTopStyle_, BorderTopWidth_, BorderWidth_, Bottom_, BoxDecorationBreak_, BoxShadow_, BoxSizing_, BoxSnap_, BoxSuppress_, BreakAfter_, BreakBefore_, BreakInside_, CaptionSide_, Caret_, CaretShape_, Chains_, Clear_, ClipPath_, ClipRule_, Color_, ColorInterpolationFilters_, ColumnCount_, ColumnFill_, ColumnGap_, ColumnRule_, ColumnRuleColor_, ColumnRuleStyle_, ColumnRuleWidth_, ColumnSpan_, ColumnWidth_, Columns_, Contain_, Content_, CounterIncrement_, CounterReset_, CounterSet_, Crop_, Cue_, CueAfter_, CueBefore_, Cursor_, Direction_, Display_, DisplayInside_, DisplayList_, DisplayOutside_, DominantBaseline_, EmptyCells_, Filter_, Flex_, FlexBasis_, FlexDirection_, FlexFlow_, FlexGrow_, FlexShrink_, FlexWrap_, Float_, FloatOffset_, FloodColor_, FloodOpacity_, FlowFrom_, FlowInto_, Font_, FontFamily_, FontFeatureSettings_, FontKerning_, FontLanguageOverride_, FontMaxSize_, FontMinSize_, FontOpticalSizing_, FontPalette_, FontPresentation_, FontSize_, FontSizeAdjust_, FontStretch_, FontStyle_, FontSynthesis_, FontVariant_, FontVariantAlternates_, FontVariantCaps_, FontVariantEastAsian_, FontVariantLigatures_, FontVariantNumeric_, FontVariantPosition_, FontVariationSettings_, FontWeight_, Grid_, GridArea_, GridAutoColumns_, GridAutoFlow_, GridAutoRows_, GridColumn_, GridColumnEnd_, GridColumnStart_, GridRow_, GridRowEnd_, GridRowStart_, GridTemplate_, GridTemplateAreas_, GridTemplateColumns_, GridTemplateRows_, HangingPunctuation_, Height_, Hyphens_, Icon_, ImageOrientation_, ImageRendering_, ImageResolution_, ImeMode_, InitialLetters_, InitialLettersAlign_, InitialLettersWrap_, InlineSizing_, JustifyContent_, JustifyItems_, JustifySelf_, Left_, LetterSpacing_, LightingColor_, LineBreak_, LineGrid_, LineHeight_, LineSnap_, ListStyle_, ListStyleImage_, ListStylePosition_, ListStyleType_, Margin_, MarginBottom_, MarginLeft_, MarginRight_, MarginTop_, MarkerSide_, Marks_, Mask_, MaskBox_, MaskBoxOutset_, MaskBoxRepeat_, MaskBoxSlice_, MaskBoxSource_, MaskBoxWidth_, MaskClip_, MaskImage_, MaskOrigin_, MaskPosition_, MaskRepeat_, MaskSize_, MaskSourceType_, MaskType_, MaxHeight_, MaxLines_, MaxWidth_, MinHeight_, MinWidth_, MoveTo_, NavDown_, NavIndex_, NavLeft_, NavRight_, NavUp_, ObjectFit_, ObjectPosition_, Opacity_, Order_, Orphans_, Outline_, OutlineColor_, OutlineOffset_, OutlineStyle_, OutlineWidth_, Overflow_, OverflowWrap_, OverflowX_, OverflowY_, Padding_, PaddingBottom_, PaddingLeft_, PaddingRight_, PaddingTop_, Page_, PageBreakAfter_, PageBreakBefore_, PageBreakInside_, PagePolicy_, Pause_, PauseAfter_, PauseBefore_, Perspective_, PerspectiveOrigin_, PolarAnchor_, PolarAngle_, PolarDistance_, PolarOrigin_, Position_, PresentationLevel_, Quotes_, RegionFragment_, Resize_, Rest_, RestAfter_, RestBefore_, Right_, Rotation_, RotationPoint_, RowGap_, RubyAlign_, RubyMerge_, RubyPosition_, ScrollPadding_, ScrollPaddingBlock_, ScrollPaddingBlockEnd_, ScrollPaddingBlockStart_, ScrollPaddingBottom_, ScrollPaddingInline_, ScrollPaddingInlineEnd_, ScrollPaddingInlineStart_, ScrollPaddingLeft_, ScrollPaddingRight_, ScrollPaddingTop_, ScrollSnapAlign_, ScrollSnapMargin_, ScrollSnapMarginBlock_, ScrollSnapMarginBlockEnd_, ScrollSnapMarginBlockStart_, ScrollSnapMarginBottom_, ScrollSnapMarginInline_, ScrollSnapMarginInlineEnd_, ScrollSnapMarginInlineStart_, ScrollSnapMarginLeft_, ScrollSnapMarginRight_, ScrollSnapMarginTop_, ScrollSnapStop_, ScrollSnapType_, ShapeImageThreshold_, ShapeInside_, ShapeOutside_, ShapeMargin_, Size_, Speak_, SpeakAs_, StringSet_, TabSize_, TableLayout_, TextAlign_, TextAlignLast_, TextCombineUpright_, TextDecoration_, TextDecorationColor_, TextDecorationLine_, TextDecorationSkip_, TextDecorationStyle_, TextEmphasis_, TextEmphasisColor_, TextEmphasisPosition_, TextEmphasisStyle_, TextIndent_, TextJustify_, TextOrientation_, TextOverflow_, TextShadow_, TextSpaceCollapse_, TextTransform_, TextUnderlinePosition_, TextWrap_, TouchAction_, Top_, Transform_, TransformOrigin_, TransformStyle_, Transition_, TransitionDelay_, TransitionDuration_, TransitionProperty_, TransitionTimingFunction_, UnicodeBidi_, UserSelect_, VerticalAlign_, Visibility_, VoiceBalance_, VoiceDuration_, VoiceFamily_, VoicePitch_, VoiceRange_, VoiceRate_, VoiceStress_, VoiceVolume_, WhiteSpace_, Widows_, Width_, WillChange_, WordBreak_, WordSpacing_, WordWrap_, WrapFlow_, WrapThrough_, WritingMode_, ZIndex_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.AlignContent = "";
				this.AlignItems = "";
				this.AlignSelf = "";
				this.AlignmentBaseline = "";
				this.All = "";
				this.Animation = "";
				this.AnimationDelay = "";
				this.AnimationDirection = "";
				this.AnimationDuration = "";
				this.AnimationFillMode = "";
				this.AnimationIterationCount = "";
				this.AnimationName = "";
				this.AnimationPlayState = "";
				this.AnimationTimingFunction = "";
				this.Appearance = "";
				this.BackfaceVisibility = "";
				this.Background = "";
				this.BackgroundAttachment = "";
				this.BackgroundClip = "";
				this.BackgroundColor = "";
				this.BackgroundImage = "";
				this.BackgroundOrigin = "";
				this.BackgroundPosition = "";
				this.BackgroundRepeat = "";
				this.BackgroundSize = "";
				this.BaselineShift = "";
				this.Binding = "";
				this.Bleed = "";
				this.BookmarkLabel = "";
				this.BookmarkLevel = "";
				this.BookmarkState = "";
				this.Border = "";
				this.BorderBottom = "";
				this.BorderBottomColor = "";
				this.BorderBottomLeftRadius = "";
				this.BorderBottomRightRadius = "";
				this.BorderBottomStyle = "";
				this.BorderBottomWidth = "";
				this.BorderBoundary = "";
				this.BorderCollapse = "";
				this.BorderColor = "";
				this.BorderImage = "";
				this.BorderImageOutset = "";
				this.BorderImageRepeat = "";
				this.BorderImageSlice = "";
				this.BorderImageSource = "";
				this.BorderImageWidth = "";
				this.BorderLeft = "";
				this.BorderLeftColor = "";
				this.BorderLeftStyle = "";
				this.BorderLeftWidth = "";
				this.BorderRadius = "";
				this.BorderRight = "";
				this.BorderRightColor = "";
				this.BorderRightStyle = "";
				this.BorderRightWidth = "";
				this.BorderSpacing = "";
				this.BorderStyle = "";
				this.BorderTop = "";
				this.BorderTopColor = "";
				this.BorderTopLeftRadius = "";
				this.BorderTopRightRadius = "";
				this.BorderTopStyle = "";
				this.BorderTopWidth = "";
				this.BorderWidth = "";
				this.Bottom = "";
				this.BoxDecorationBreak = "";
				this.BoxShadow = "";
				this.BoxSizing = "";
				this.BoxSnap = "";
				this.BoxSuppress = "";
				this.BreakAfter = "";
				this.BreakBefore = "";
				this.BreakInside = "";
				this.CaptionSide = "";
				this.Caret = "";
				this.CaretShape = "";
				this.Chains = "";
				this.Clear = "";
				this.ClipPath = "";
				this.ClipRule = "";
				this.Color = "";
				this.ColorInterpolationFilters = "";
				this.ColumnCount = "";
				this.ColumnFill = "";
				this.ColumnGap = "";
				this.ColumnRule = "";
				this.ColumnRuleColor = "";
				this.ColumnRuleStyle = "";
				this.ColumnRuleWidth = "";
				this.ColumnSpan = "";
				this.ColumnWidth = "";
				this.Columns = "";
				this.Contain = "";
				this.Content = "";
				this.CounterIncrement = "";
				this.CounterReset = "";
				this.CounterSet = "";
				this.Crop = "";
				this.Cue = "";
				this.CueAfter = "";
				this.CueBefore = "";
				this.Cursor = "";
				this.Direction = "";
				this.Display = "";
				this.DisplayInside = "";
				this.DisplayList = "";
				this.DisplayOutside = "";
				this.DominantBaseline = "";
				this.EmptyCells = "";
				this.Filter = "";
				this.Flex = "";
				this.FlexBasis = "";
				this.FlexDirection = "";
				this.FlexFlow = "";
				this.FlexGrow = "";
				this.FlexShrink = "";
				this.FlexWrap = "";
				this.Float = "";
				this.FloatOffset = "";
				this.FloodColor = "";
				this.FloodOpacity = "";
				this.FlowFrom = "";
				this.FlowInto = "";
				this.Font = "";
				this.FontFamily = "";
				this.FontFeatureSettings = "";
				this.FontKerning = "";
				this.FontLanguageOverride = "";
				this.FontMaxSize = "";
				this.FontMinSize = "";
				this.FontOpticalSizing = "";
				this.FontPalette = "";
				this.FontPresentation = "";
				this.FontSize = "";
				this.FontSizeAdjust = "";
				this.FontStretch = "";
				this.FontStyle = "";
				this.FontSynthesis = "";
				this.FontVariant = "";
				this.FontVariantAlternates = "";
				this.FontVariantCaps = "";
				this.FontVariantEastAsian = "";
				this.FontVariantLigatures = "";
				this.FontVariantNumeric = "";
				this.FontVariantPosition = "";
				this.FontVariationSettings = "";
				this.FontWeight = "";
				this.Grid = "";
				this.GridArea = "";
				this.GridAutoColumns = "";
				this.GridAutoFlow = "";
				this.GridAutoRows = "";
				this.GridColumn = "";
				this.GridColumnEnd = "";
				this.GridColumnStart = "";
				this.GridRow = "";
				this.GridRowEnd = "";
				this.GridRowStart = "";
				this.GridTemplate = "";
				this.GridTemplateAreas = "";
				this.GridTemplateColumns = "";
				this.GridTemplateRows = "";
				this.HangingPunctuation = "";
				this.Height = "";
				this.Hyphens = "";
				this.Icon = "";
				this.ImageOrientation = "";
				this.ImageRendering = "";
				this.ImageResolution = "";
				this.ImeMode = "";
				this.InitialLetters = "";
				this.InitialLettersAlign = "";
				this.InitialLettersWrap = "";
				this.InlineSizing = "";
				this.JustifyContent = "";
				this.JustifyItems = "";
				this.JustifySelf = "";
				this.Left = "";
				this.LetterSpacing = "";
				this.LightingColor = "";
				this.LineBreak = "";
				this.LineGrid = "";
				this.LineHeight = "";
				this.LineSnap = "";
				this.ListStyle = "";
				this.ListStyleImage = "";
				this.ListStylePosition = "";
				this.ListStyleType = "";
				this.Margin = "";
				this.MarginBottom = "";
				this.MarginLeft = "";
				this.MarginRight = "";
				this.MarginTop = "";
				this.MarkerSide = "";
				this.Marks = "";
				this.Mask = "";
				this.MaskBox = "";
				this.MaskBoxOutset = "";
				this.MaskBoxRepeat = "";
				this.MaskBoxSlice = "";
				this.MaskBoxSource = "";
				this.MaskBoxWidth = "";
				this.MaskClip = "";
				this.MaskImage = "";
				this.MaskOrigin = "";
				this.MaskPosition = "";
				this.MaskRepeat = "";
				this.MaskSize = "";
				this.MaskSourceType = "";
				this.MaskType = "";
				this.MaxHeight = "";
				this.MaxLines = "";
				this.MaxWidth = "";
				this.MinHeight = "";
				this.MinWidth = "";
				this.MoveTo = "";
				this.NavDown = "";
				this.NavIndex = "";
				this.NavLeft = "";
				this.NavRight = "";
				this.NavUp = "";
				this.ObjectFit = "";
				this.ObjectPosition = "";
				this.Opacity = "";
				this.Order = "";
				this.Orphans = "";
				this.Outline = "";
				this.OutlineColor = "";
				this.OutlineOffset = "";
				this.OutlineStyle = "";
				this.OutlineWidth = "";
				this.Overflow = "";
				this.OverflowWrap = "";
				this.OverflowX = "";
				this.OverflowY = "";
				this.Padding = "";
				this.PaddingBottom = "";
				this.PaddingLeft = "";
				this.PaddingRight = "";
				this.PaddingTop = "";
				this.Page = "";
				this.PageBreakAfter = "";
				this.PageBreakBefore = "";
				this.PageBreakInside = "";
				this.PagePolicy = "";
				this.Pause = "";
				this.PauseAfter = "";
				this.PauseBefore = "";
				this.Perspective = "";
				this.PerspectiveOrigin = "";
				this.PolarAnchor = "";
				this.PolarAngle = "";
				this.PolarDistance = "";
				this.PolarOrigin = "";
				this.Position = "";
				this.PresentationLevel = "";
				this.Quotes = "";
				this.RegionFragment = "";
				this.Resize = "";
				this.Rest = "";
				this.RestAfter = "";
				this.RestBefore = "";
				this.Right = "";
				this.Rotation = "";
				this.RotationPoint = "";
				this.RowGap = "";
				this.RubyAlign = "";
				this.RubyMerge = "";
				this.RubyPosition = "";
				this.ScrollPadding = "";
				this.ScrollPaddingBlock = "";
				this.ScrollPaddingBlockEnd = "";
				this.ScrollPaddingBlockStart = "";
				this.ScrollPaddingBottom = "";
				this.ScrollPaddingInline = "";
				this.ScrollPaddingInlineEnd = "";
				this.ScrollPaddingInlineStart = "";
				this.ScrollPaddingLeft = "";
				this.ScrollPaddingRight = "";
				this.ScrollPaddingTop = "";
				this.ScrollSnapAlign = "";
				this.ScrollSnapMargin = "";
				this.ScrollSnapMarginBlock = "";
				this.ScrollSnapMarginBlockEnd = "";
				this.ScrollSnapMarginBlockStart = "";
				this.ScrollSnapMarginBottom = "";
				this.ScrollSnapMarginInline = "";
				this.ScrollSnapMarginInlineEnd = "";
				this.ScrollSnapMarginInlineStart = "";
				this.ScrollSnapMarginLeft = "";
				this.ScrollSnapMarginRight = "";
				this.ScrollSnapMarginTop = "";
				this.ScrollSnapStop = "";
				this.ScrollSnapType = "";
				this.ShapeImageThreshold = "";
				this.ShapeInside = "";
				this.ShapeOutside = "";
				this.ShapeMargin = "";
				this.Size = "";
				this.Speak = "";
				this.SpeakAs = "";
				this.StringSet = "";
				this.TabSize = "";
				this.TableLayout = "";
				this.TextAlign = "";
				this.TextAlignLast = "";
				this.TextCombineUpright = "";
				this.TextDecoration = "";
				this.TextDecorationColor = "";
				this.TextDecorationLine = "";
				this.TextDecorationSkip = "";
				this.TextDecorationStyle = "";
				this.TextEmphasis = "";
				this.TextEmphasisColor = "";
				this.TextEmphasisPosition = "";
				this.TextEmphasisStyle = "";
				this.TextIndent = "";
				this.TextJustify = "";
				this.TextOrientation = "";
				this.TextOverflow = "";
				this.TextShadow = "";
				this.TextSpaceCollapse = "";
				this.TextTransform = "";
				this.TextUnderlinePosition = "";
				this.TextWrap = "";
				this.TouchAction = "";
				this.Top = "";
				this.Transform = "";
				this.TransformOrigin = "";
				this.TransformStyle = "";
				this.Transition = "";
				this.TransitionDelay = "";
				this.TransitionDuration = "";
				this.TransitionProperty = "";
				this.TransitionTimingFunction = "";
				this.UnicodeBidi = "";
				this.UserSelect = "";
				this.VerticalAlign = "";
				this.Visibility = "";
				this.VoiceBalance = "";
				this.VoiceDuration = "";
				this.VoiceFamily = "";
				this.VoicePitch = "";
				this.VoiceRange = "";
				this.VoiceRate = "";
				this.VoiceStress = "";
				this.VoiceVolume = "";
				this.WhiteSpace = "";
				this.Widows = "";
				this.Width = "";
				this.WillChange = "";
				this.WordBreak = "";
				this.WordSpacing = "";
				this.WordWrap = "";
				this.WrapFlow = "";
				this.WrapThrough = "";
				this.WritingMode = "";
				this.ZIndex = "";
				return;
			}
			this.AlignContent = AlignContent_;
			this.AlignItems = AlignItems_;
			this.AlignSelf = AlignSelf_;
			this.AlignmentBaseline = AlignmentBaseline_;
			this.All = All_;
			this.Animation = Animation_;
			this.AnimationDelay = AnimationDelay_;
			this.AnimationDirection = AnimationDirection_;
			this.AnimationDuration = AnimationDuration_;
			this.AnimationFillMode = AnimationFillMode_;
			this.AnimationIterationCount = AnimationIterationCount_;
			this.AnimationName = AnimationName_;
			this.AnimationPlayState = AnimationPlayState_;
			this.AnimationTimingFunction = AnimationTimingFunction_;
			this.Appearance = Appearance_;
			this.BackfaceVisibility = BackfaceVisibility_;
			this.Background = Background_;
			this.BackgroundAttachment = BackgroundAttachment_;
			this.BackgroundClip = BackgroundClip_;
			this.BackgroundColor = BackgroundColor_;
			this.BackgroundImage = BackgroundImage_;
			this.BackgroundOrigin = BackgroundOrigin_;
			this.BackgroundPosition = BackgroundPosition_;
			this.BackgroundRepeat = BackgroundRepeat_;
			this.BackgroundSize = BackgroundSize_;
			this.BaselineShift = BaselineShift_;
			this.Binding = Binding_;
			this.Bleed = Bleed_;
			this.BookmarkLabel = BookmarkLabel_;
			this.BookmarkLevel = BookmarkLevel_;
			this.BookmarkState = BookmarkState_;
			this.Border = Border_;
			this.BorderBottom = BorderBottom_;
			this.BorderBottomColor = BorderBottomColor_;
			this.BorderBottomLeftRadius = BorderBottomLeftRadius_;
			this.BorderBottomRightRadius = BorderBottomRightRadius_;
			this.BorderBottomStyle = BorderBottomStyle_;
			this.BorderBottomWidth = BorderBottomWidth_;
			this.BorderBoundary = BorderBoundary_;
			this.BorderCollapse = BorderCollapse_;
			this.BorderColor = BorderColor_;
			this.BorderImage = BorderImage_;
			this.BorderImageOutset = BorderImageOutset_;
			this.BorderImageRepeat = BorderImageRepeat_;
			this.BorderImageSlice = BorderImageSlice_;
			this.BorderImageSource = BorderImageSource_;
			this.BorderImageWidth = BorderImageWidth_;
			this.BorderLeft = BorderLeft_;
			this.BorderLeftColor = BorderLeftColor_;
			this.BorderLeftStyle = BorderLeftStyle_;
			this.BorderLeftWidth = BorderLeftWidth_;
			this.BorderRadius = BorderRadius_;
			this.BorderRight = BorderRight_;
			this.BorderRightColor = BorderRightColor_;
			this.BorderRightStyle = BorderRightStyle_;
			this.BorderRightWidth = BorderRightWidth_;
			this.BorderSpacing = BorderSpacing_;
			this.BorderStyle = BorderStyle_;
			this.BorderTop = BorderTop_;
			this.BorderTopColor = BorderTopColor_;
			this.BorderTopLeftRadius = BorderTopLeftRadius_;
			this.BorderTopRightRadius = BorderTopRightRadius_;
			this.BorderTopStyle = BorderTopStyle_;
			this.BorderTopWidth = BorderTopWidth_;
			this.BorderWidth = BorderWidth_;
			this.Bottom = Bottom_;
			this.BoxDecorationBreak = BoxDecorationBreak_;
			this.BoxShadow = BoxShadow_;
			this.BoxSizing = BoxSizing_;
			this.BoxSnap = BoxSnap_;
			this.BoxSuppress = BoxSuppress_;
			this.BreakAfter = BreakAfter_;
			this.BreakBefore = BreakBefore_;
			this.BreakInside = BreakInside_;
			this.CaptionSide = CaptionSide_;
			this.Caret = Caret_;
			this.CaretShape = CaretShape_;
			this.Chains = Chains_;
			this.Clear = Clear_;
			this.ClipPath = ClipPath_;
			this.ClipRule = ClipRule_;
			this.Color = Color_;
			this.ColorInterpolationFilters = ColorInterpolationFilters_;
			this.ColumnCount = ColumnCount_;
			this.ColumnFill = ColumnFill_;
			this.ColumnGap = ColumnGap_;
			this.ColumnRule = ColumnRule_;
			this.ColumnRuleColor = ColumnRuleColor_;
			this.ColumnRuleStyle = ColumnRuleStyle_;
			this.ColumnRuleWidth = ColumnRuleWidth_;
			this.ColumnSpan = ColumnSpan_;
			this.ColumnWidth = ColumnWidth_;
			this.Columns = Columns_;
			this.Contain = Contain_;
			this.Content = Content_;
			this.CounterIncrement = CounterIncrement_;
			this.CounterReset = CounterReset_;
			this.CounterSet = CounterSet_;
			this.Crop = Crop_;
			this.Cue = Cue_;
			this.CueAfter = CueAfter_;
			this.CueBefore = CueBefore_;
			this.Cursor = Cursor_;
			this.Direction = Direction_;
			this.Display = Display_;
			this.DisplayInside = DisplayInside_;
			this.DisplayList = DisplayList_;
			this.DisplayOutside = DisplayOutside_;
			this.DominantBaseline = DominantBaseline_;
			this.EmptyCells = EmptyCells_;
			this.Filter = Filter_;
			this.Flex = Flex_;
			this.FlexBasis = FlexBasis_;
			this.FlexDirection = FlexDirection_;
			this.FlexFlow = FlexFlow_;
			this.FlexGrow = FlexGrow_;
			this.FlexShrink = FlexShrink_;
			this.FlexWrap = FlexWrap_;
			this.Float = Float_;
			this.FloatOffset = FloatOffset_;
			this.FloodColor = FloodColor_;
			this.FloodOpacity = FloodOpacity_;
			this.FlowFrom = FlowFrom_;
			this.FlowInto = FlowInto_;
			this.Font = Font_;
			this.FontFamily = FontFamily_;
			this.FontFeatureSettings = FontFeatureSettings_;
			this.FontKerning = FontKerning_;
			this.FontLanguageOverride = FontLanguageOverride_;
			this.FontMaxSize = FontMaxSize_;
			this.FontMinSize = FontMinSize_;
			this.FontOpticalSizing = FontOpticalSizing_;
			this.FontPalette = FontPalette_;
			this.FontPresentation = FontPresentation_;
			this.FontSize = FontSize_;
			this.FontSizeAdjust = FontSizeAdjust_;
			this.FontStretch = FontStretch_;
			this.FontStyle = FontStyle_;
			this.FontSynthesis = FontSynthesis_;
			this.FontVariant = FontVariant_;
			this.FontVariantAlternates = FontVariantAlternates_;
			this.FontVariantCaps = FontVariantCaps_;
			this.FontVariantEastAsian = FontVariantEastAsian_;
			this.FontVariantLigatures = FontVariantLigatures_;
			this.FontVariantNumeric = FontVariantNumeric_;
			this.FontVariantPosition = FontVariantPosition_;
			this.FontVariationSettings = FontVariationSettings_;
			this.FontWeight = FontWeight_;
			this.Grid = Grid_;
			this.GridArea = GridArea_;
			this.GridAutoColumns = GridAutoColumns_;
			this.GridAutoFlow = GridAutoFlow_;
			this.GridAutoRows = GridAutoRows_;
			this.GridColumn = GridColumn_;
			this.GridColumnEnd = GridColumnEnd_;
			this.GridColumnStart = GridColumnStart_;
			this.GridRow = GridRow_;
			this.GridRowEnd = GridRowEnd_;
			this.GridRowStart = GridRowStart_;
			this.GridTemplate = GridTemplate_;
			this.GridTemplateAreas = GridTemplateAreas_;
			this.GridTemplateColumns = GridTemplateColumns_;
			this.GridTemplateRows = GridTemplateRows_;
			this.HangingPunctuation = HangingPunctuation_;
			this.Height = Height_;
			this.Hyphens = Hyphens_;
			this.Icon = Icon_;
			this.ImageOrientation = ImageOrientation_;
			this.ImageRendering = ImageRendering_;
			this.ImageResolution = ImageResolution_;
			this.ImeMode = ImeMode_;
			this.InitialLetters = InitialLetters_;
			this.InitialLettersAlign = InitialLettersAlign_;
			this.InitialLettersWrap = InitialLettersWrap_;
			this.InlineSizing = InlineSizing_;
			this.JustifyContent = JustifyContent_;
			this.JustifyItems = JustifyItems_;
			this.JustifySelf = JustifySelf_;
			this.Left = Left_;
			this.LetterSpacing = LetterSpacing_;
			this.LightingColor = LightingColor_;
			this.LineBreak = LineBreak_;
			this.LineGrid = LineGrid_;
			this.LineHeight = LineHeight_;
			this.LineSnap = LineSnap_;
			this.ListStyle = ListStyle_;
			this.ListStyleImage = ListStyleImage_;
			this.ListStylePosition = ListStylePosition_;
			this.ListStyleType = ListStyleType_;
			this.Margin = Margin_;
			this.MarginBottom = MarginBottom_;
			this.MarginLeft = MarginLeft_;
			this.MarginRight = MarginRight_;
			this.MarginTop = MarginTop_;
			this.MarkerSide = MarkerSide_;
			this.Marks = Marks_;
			this.Mask = Mask_;
			this.MaskBox = MaskBox_;
			this.MaskBoxOutset = MaskBoxOutset_;
			this.MaskBoxRepeat = MaskBoxRepeat_;
			this.MaskBoxSlice = MaskBoxSlice_;
			this.MaskBoxSource = MaskBoxSource_;
			this.MaskBoxWidth = MaskBoxWidth_;
			this.MaskClip = MaskClip_;
			this.MaskImage = MaskImage_;
			this.MaskOrigin = MaskOrigin_;
			this.MaskPosition = MaskPosition_;
			this.MaskRepeat = MaskRepeat_;
			this.MaskSize = MaskSize_;
			this.MaskSourceType = MaskSourceType_;
			this.MaskType = MaskType_;
			this.MaxHeight = MaxHeight_;
			this.MaxLines = MaxLines_;
			this.MaxWidth = MaxWidth_;
			this.MinHeight = MinHeight_;
			this.MinWidth = MinWidth_;
			this.MoveTo = MoveTo_;
			this.NavDown = NavDown_;
			this.NavIndex = NavIndex_;
			this.NavLeft = NavLeft_;
			this.NavRight = NavRight_;
			this.NavUp = NavUp_;
			this.ObjectFit = ObjectFit_;
			this.ObjectPosition = ObjectPosition_;
			this.Opacity = Opacity_;
			this.Order = Order_;
			this.Orphans = Orphans_;
			this.Outline = Outline_;
			this.OutlineColor = OutlineColor_;
			this.OutlineOffset = OutlineOffset_;
			this.OutlineStyle = OutlineStyle_;
			this.OutlineWidth = OutlineWidth_;
			this.Overflow = Overflow_;
			this.OverflowWrap = OverflowWrap_;
			this.OverflowX = OverflowX_;
			this.OverflowY = OverflowY_;
			this.Padding = Padding_;
			this.PaddingBottom = PaddingBottom_;
			this.PaddingLeft = PaddingLeft_;
			this.PaddingRight = PaddingRight_;
			this.PaddingTop = PaddingTop_;
			this.Page = Page_;
			this.PageBreakAfter = PageBreakAfter_;
			this.PageBreakBefore = PageBreakBefore_;
			this.PageBreakInside = PageBreakInside_;
			this.PagePolicy = PagePolicy_;
			this.Pause = Pause_;
			this.PauseAfter = PauseAfter_;
			this.PauseBefore = PauseBefore_;
			this.Perspective = Perspective_;
			this.PerspectiveOrigin = PerspectiveOrigin_;
			this.PolarAnchor = PolarAnchor_;
			this.PolarAngle = PolarAngle_;
			this.PolarDistance = PolarDistance_;
			this.PolarOrigin = PolarOrigin_;
			this.Position = Position_;
			this.PresentationLevel = PresentationLevel_;
			this.Quotes = Quotes_;
			this.RegionFragment = RegionFragment_;
			this.Resize = Resize_;
			this.Rest = Rest_;
			this.RestAfter = RestAfter_;
			this.RestBefore = RestBefore_;
			this.Right = Right_;
			this.Rotation = Rotation_;
			this.RotationPoint = RotationPoint_;
			this.RowGap = RowGap_;
			this.RubyAlign = RubyAlign_;
			this.RubyMerge = RubyMerge_;
			this.RubyPosition = RubyPosition_;
			this.ScrollPadding = ScrollPadding_;
			this.ScrollPaddingBlock = ScrollPaddingBlock_;
			this.ScrollPaddingBlockEnd = ScrollPaddingBlockEnd_;
			this.ScrollPaddingBlockStart = ScrollPaddingBlockStart_;
			this.ScrollPaddingBottom = ScrollPaddingBottom_;
			this.ScrollPaddingInline = ScrollPaddingInline_;
			this.ScrollPaddingInlineEnd = ScrollPaddingInlineEnd_;
			this.ScrollPaddingInlineStart = ScrollPaddingInlineStart_;
			this.ScrollPaddingLeft = ScrollPaddingLeft_;
			this.ScrollPaddingRight = ScrollPaddingRight_;
			this.ScrollPaddingTop = ScrollPaddingTop_;
			this.ScrollSnapAlign = ScrollSnapAlign_;
			this.ScrollSnapMargin = ScrollSnapMargin_;
			this.ScrollSnapMarginBlock = ScrollSnapMarginBlock_;
			this.ScrollSnapMarginBlockEnd = ScrollSnapMarginBlockEnd_;
			this.ScrollSnapMarginBlockStart = ScrollSnapMarginBlockStart_;
			this.ScrollSnapMarginBottom = ScrollSnapMarginBottom_;
			this.ScrollSnapMarginInline = ScrollSnapMarginInline_;
			this.ScrollSnapMarginInlineEnd = ScrollSnapMarginInlineEnd_;
			this.ScrollSnapMarginInlineStart = ScrollSnapMarginInlineStart_;
			this.ScrollSnapMarginLeft = ScrollSnapMarginLeft_;
			this.ScrollSnapMarginRight = ScrollSnapMarginRight_;
			this.ScrollSnapMarginTop = ScrollSnapMarginTop_;
			this.ScrollSnapStop = ScrollSnapStop_;
			this.ScrollSnapType = ScrollSnapType_;
			this.ShapeImageThreshold = ShapeImageThreshold_;
			this.ShapeInside = ShapeInside_;
			this.ShapeOutside = ShapeOutside_;
			this.ShapeMargin = ShapeMargin_;
			this.Size = Size_;
			this.Speak = Speak_;
			this.SpeakAs = SpeakAs_;
			this.StringSet = StringSet_;
			this.TabSize = TabSize_;
			this.TableLayout = TableLayout_;
			this.TextAlign = TextAlign_;
			this.TextAlignLast = TextAlignLast_;
			this.TextCombineUpright = TextCombineUpright_;
			this.TextDecoration = TextDecoration_;
			this.TextDecorationColor = TextDecorationColor_;
			this.TextDecorationLine = TextDecorationLine_;
			this.TextDecorationSkip = TextDecorationSkip_;
			this.TextDecorationStyle = TextDecorationStyle_;
			this.TextEmphasis = TextEmphasis_;
			this.TextEmphasisColor = TextEmphasisColor_;
			this.TextEmphasisPosition = TextEmphasisPosition_;
			this.TextEmphasisStyle = TextEmphasisStyle_;
			this.TextIndent = TextIndent_;
			this.TextJustify = TextJustify_;
			this.TextOrientation = TextOrientation_;
			this.TextOverflow = TextOverflow_;
			this.TextShadow = TextShadow_;
			this.TextSpaceCollapse = TextSpaceCollapse_;
			this.TextTransform = TextTransform_;
			this.TextUnderlinePosition = TextUnderlinePosition_;
			this.TextWrap = TextWrap_;
			this.TouchAction = TouchAction_;
			this.Top = Top_;
			this.Transform = Transform_;
			this.TransformOrigin = TransformOrigin_;
			this.TransformStyle = TransformStyle_;
			this.Transition = Transition_;
			this.TransitionDelay = TransitionDelay_;
			this.TransitionDuration = TransitionDuration_;
			this.TransitionProperty = TransitionProperty_;
			this.TransitionTimingFunction = TransitionTimingFunction_;
			this.UnicodeBidi = UnicodeBidi_;
			this.UserSelect = UserSelect_;
			this.VerticalAlign = VerticalAlign_;
			this.Visibility = Visibility_;
			this.VoiceBalance = VoiceBalance_;
			this.VoiceDuration = VoiceDuration_;
			this.VoiceFamily = VoiceFamily_;
			this.VoicePitch = VoicePitch_;
			this.VoiceRange = VoiceRange_;
			this.VoiceRate = VoiceRate_;
			this.VoiceStress = VoiceStress_;
			this.VoiceVolume = VoiceVolume_;
			this.WhiteSpace = WhiteSpace_;
			this.Widows = Widows_;
			this.Width = Width_;
			this.WillChange = WillChange_;
			this.WordBreak = WordBreak_;
			this.WordSpacing = WordSpacing_;
			this.WordWrap = WordWrap_;
			this.WrapFlow = WrapFlow_;
			this.WrapThrough = WrapThrough_;
			this.WritingMode = WritingMode_;
			this.ZIndex = ZIndex_;
		});
		ptrType = $ptrType($Bool);
		ptrType$1 = $ptrType(Styles);
		ptrType$2 = $ptrType(js.Object);
		ptrType$3 = $ptrType($Int);
		Div = function(props, children) {
			var _r, children, props, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; children = $f.children; props = $f.props; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = react.JSX(new $String("div"), props, children); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: Div }; } $f._r = _r; $f.children = children; $f.props = props; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.Div = Div;
		TextArea = function(props, children) {
			var _r, children, props, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; children = $f.children; props = $f.props; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = react.JSX(new $String("textarea"), props, children); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: TextArea }; } $f._r = _r; $f.children = children; $f.props = props; $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.TextArea = TextArea;
		DivProps.init("", [{prop: "AriaSet", name: "AriaSet", embedded: false, exported: true, typ: react.Set, tag: "react:\"aria-,omitempty\""}, {prop: "DataSet", name: "DataSet", embedded: false, exported: true, typ: react.Set, tag: "react:\"data-,omitempty\""}, {prop: "DangerouslySetInnerHTML", name: "DangerouslySetInnerHTML", embedded: false, exported: true, typ: $emptyInterface, tag: "react:\"dangerouslySetInnerHTML,omitempty\""}, {prop: "Accesskey", name: "Accesskey", embedded: false, exported: true, typ: $String, tag: "react:\"accesskey,omitempty\""}, {prop: "Class", name: "Class", embedded: false, exported: true, typ: $String, tag: "react:\"className,omitempty\""}, {prop: "Contenteditable", name: "Contenteditable", embedded: false, exported: true, typ: ptrType, tag: "react:\"contenteditable,omitempty\""}, {prop: "Dir", name: "Dir", embedded: false, exported: true, typ: $String, tag: "react:\"dir,omitempty\""}, {prop: "Draggable", name: "Draggable", embedded: false, exported: true, typ: ptrType, tag: "react:\"draggable,omitempty\""}, {prop: "Dropzone", name: "Dropzone", embedded: false, exported: true, typ: $String, tag: "react:\"dropzone,omitempty\""}, {prop: "Hidden", name: "Hidden", embedded: false, exported: true, typ: ptrType, tag: "react:\"hidden,omitempty\""}, {prop: "ID", name: "ID", embedded: false, exported: true, typ: $String, tag: "react:\"id,omitempty\""}, {prop: "Lang", name: "Lang", embedded: false, exported: true, typ: $String, tag: "react:\"lang,omitempty\""}, {prop: "SpellCheck", name: "SpellCheck", embedded: false, exported: true, typ: ptrType, tag: "react:\"spellcheck,omitempty\""}, {prop: "TabIndex", name: "TabIndex", embedded: false, exported: true, typ: $String, tag: "react:\"tabindex,omitempty\""}, {prop: "Title", name: "Title", embedded: false, exported: true, typ: $String, tag: "react:\"title,omitempty\""}, {prop: "Key", name: "Key", embedded: false, exported: true, typ: $String, tag: "react:\"key,omitempty\""}, {prop: "Ref", name: "Ref", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"ref,omitempty\""}, {prop: "Role", name: "Role", embedded: false, exported: true, typ: $String, tag: "react:\"role,omitempty\""}, {prop: "Style", name: "Style", embedded: false, exported: true, typ: ptrType$1, tag: "react:\"style,omitempty\""}, {prop: "OnBlur", name: "OnBlur", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onBlur,omitempty\""}, {prop: "OnFocus", name: "OnFocus", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onFocus,omitempty\""}, {prop: "OnChange", name: "OnChange", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onChange,omitempty\""}, {prop: "OnClick", name: "OnClick", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onClick,omitempty\""}]);
		TextAreaProps.init("", [{prop: "AriaSet", name: "AriaSet", embedded: false, exported: true, typ: react.Set, tag: "react:\"aria-,omitempty\""}, {prop: "DataSet", name: "DataSet", embedded: false, exported: true, typ: react.Set, tag: "react:\"data-,omitempty\""}, {prop: "DangerouslySetInnerHTML", name: "DangerouslySetInnerHTML", embedded: false, exported: true, typ: $emptyInterface, tag: "react:\"dangerouslySetInnerHTML,omitempty\""}, {prop: "Accesskey", name: "Accesskey", embedded: false, exported: true, typ: $String, tag: "react:\"accesskey,omitempty\""}, {prop: "Class", name: "Class", embedded: false, exported: true, typ: $String, tag: "react:\"className,omitempty\""}, {prop: "Contenteditable", name: "Contenteditable", embedded: false, exported: true, typ: ptrType, tag: "react:\"contenteditable,omitempty\""}, {prop: "Dir", name: "Dir", embedded: false, exported: true, typ: $String, tag: "react:\"dir,omitempty\""}, {prop: "Draggable", name: "Draggable", embedded: false, exported: true, typ: ptrType, tag: "react:\"draggable,omitempty\""}, {prop: "Dropzone", name: "Dropzone", embedded: false, exported: true, typ: $String, tag: "react:\"dropzone,omitempty\""}, {prop: "Hidden", name: "Hidden", embedded: false, exported: true, typ: ptrType, tag: "react:\"hidden,omitempty\""}, {prop: "ID", name: "ID", embedded: false, exported: true, typ: $String, tag: "react:\"id,omitempty\""}, {prop: "Lang", name: "Lang", embedded: false, exported: true, typ: $String, tag: "react:\"lang,omitempty\""}, {prop: "SpellCheck", name: "SpellCheck", embedded: false, exported: true, typ: ptrType, tag: "react:\"spellcheck,omitempty\""}, {prop: "TabIndex", name: "TabIndex", embedded: false, exported: true, typ: $String, tag: "react:\"tabindex,omitempty\""}, {prop: "Title", name: "Title", embedded: false, exported: true, typ: $String, tag: "react:\"title,omitempty\""}, {prop: "Key", name: "Key", embedded: false, exported: true, typ: $String, tag: "react:\"key,omitempty\""}, {prop: "Ref", name: "Ref", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"ref,omitempty\""}, {prop: "Role", name: "Role", embedded: false, exported: true, typ: $String, tag: "react:\"role,omitempty\""}, {prop: "Style", name: "Style", embedded: false, exported: true, typ: ptrType$1, tag: "react:\"style,omitempty\""}, {prop: "OnBlur", name: "OnBlur", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onBlur,omitempty\""}, {prop: "OnFocus", name: "OnFocus", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onFocus,omitempty\""}, {prop: "OnChange", name: "OnChange", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onChange,omitempty\""}, {prop: "OnClick", name: "OnClick", embedded: false, exported: true, typ: ptrType$2, tag: "react:\"onClick,omitempty\""}, {prop: "AutoComplete", name: "AutoComplete", embedded: false, exported: true, typ: $String, tag: "react:\"autoComplete,omitempty\""}, {prop: "AutoFocus", name: "AutoFocus", embedded: false, exported: true, typ: ptrType, tag: "react:\"autoFocus,omitempty\""}, {prop: "Cols", name: "Cols", embedded: false, exported: true, typ: ptrType$3, tag: "react:\"cols,omitempty\""}, {prop: "DefaultValue", name: "DefaultValue", embedded: false, exported: true, typ: $String, tag: "react:\"defaultValue,omitempty\""}, {prop: "DirName", name: "DirName", embedded: false, exported: true, typ: $String, tag: "react:\"dirName,omitempty\""}, {prop: "Disabled", name: "Disabled", embedded: false, exported: true, typ: ptrType, tag: "react:\"disabled,omitempty\""}, {prop: "MaxLength", name: "MaxLength", embedded: false, exported: true, typ: ptrType$3, tag: "react:\"maxLength,omitempty\""}, {prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: "react:\"name,omitempty\""}, {prop: "Placeholder", name: "Placeholder", embedded: false, exported: true, typ: $String, tag: "react:\"placeholder,omitempty\""}, {prop: "ReadOnly", name: "ReadOnly", embedded: false, exported: true, typ: ptrType, tag: "react:\"readOnly,omitempty\""}, {prop: "Required", name: "Required", embedded: false, exported: true, typ: ptrType, tag: "react:\"required,omitempty\""}, {prop: "Rows", name: "Rows", embedded: false, exported: true, typ: ptrType$3, tag: "react:\"rows,omitempty\""}, {prop: "SelectionDirection", name: "SelectionDirection", embedded: false, exported: true, typ: $String, tag: "react:\"selectionDirection,omitempty\""}, {prop: "SelectionStart", name: "SelectionStart", embedded: false, exported: true, typ: ptrType$3, tag: "react:\"selectionStart,omitempty\""}, {prop: "SelectionEnd", name: "SelectionEnd", embedded: false, exported: true, typ: ptrType$3, tag: "react:\"selectionEnd,omitempty\""}, {prop: "TextLength", name: "TextLength", embedded: false, exported: true, typ: ptrType$3, tag: "react:\"textLength,omitempty\""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: $String, tag: "react:\"type,omitempty\""}, {prop: "ValidationMessage", name: "ValidationMessage", embedded: false, exported: true, typ: $String, tag: "react:\"validationMessage,omitempty\""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $String, tag: "react:\"value,omitempty\""}, {prop: "WillValidate", name: "WillValidate", embedded: false, exported: true, typ: ptrType, tag: "react:\"willValidate,omitempty\""}, {prop: "Wrap", name: "Wrap", embedded: false, exported: true, typ: $String, tag: "react:\"wrap,omitempty\""}]);
		Styles.init("", [{prop: "AlignContent", name: "AlignContent", embedded: false, exported: true, typ: $String, tag: "react:\"alignContent,omitempty\""}, {prop: "AlignItems", name: "AlignItems", embedded: false, exported: true, typ: $String, tag: "react:\"alignItems,omitempty\""}, {prop: "AlignSelf", name: "AlignSelf", embedded: false, exported: true, typ: $String, tag: "react:\"alignSelf,omitempty\""}, {prop: "AlignmentBaseline", name: "AlignmentBaseline", embedded: false, exported: true, typ: $String, tag: "react:\"alignmentBaseline,omitempty\""}, {prop: "All", name: "All", embedded: false, exported: true, typ: $String, tag: "react:\"all,omitempty\""}, {prop: "Animation", name: "Animation", embedded: false, exported: true, typ: $String, tag: "react:\"animation,omitempty\""}, {prop: "AnimationDelay", name: "AnimationDelay", embedded: false, exported: true, typ: $String, tag: "react:\"animationDelay,omitempty\""}, {prop: "AnimationDirection", name: "AnimationDirection", embedded: false, exported: true, typ: $String, tag: "react:\"animationDirection,omitempty\""}, {prop: "AnimationDuration", name: "AnimationDuration", embedded: false, exported: true, typ: $String, tag: "react:\"animationDuration,omitempty\""}, {prop: "AnimationFillMode", name: "AnimationFillMode", embedded: false, exported: true, typ: $String, tag: "react:\"animationFillMode,omitempty\""}, {prop: "AnimationIterationCount", name: "AnimationIterationCount", embedded: false, exported: true, typ: $String, tag: "react:\"animationIterationCount,omitempty\""}, {prop: "AnimationName", name: "AnimationName", embedded: false, exported: true, typ: $String, tag: "react:\"animationName,omitempty\""}, {prop: "AnimationPlayState", name: "AnimationPlayState", embedded: false, exported: true, typ: $String, tag: "react:\"animationPlayState,omitempty\""}, {prop: "AnimationTimingFunction", name: "AnimationTimingFunction", embedded: false, exported: true, typ: $String, tag: "react:\"animationTimingFunction,omitempty\""}, {prop: "Appearance", name: "Appearance", embedded: false, exported: true, typ: $String, tag: "react:\"appearance,omitempty\""}, {prop: "BackfaceVisibility", name: "BackfaceVisibility", embedded: false, exported: true, typ: $String, tag: "react:\"backfaceVisibility,omitempty\""}, {prop: "Background", name: "Background", embedded: false, exported: true, typ: $String, tag: "react:\"background,omitempty\""}, {prop: "BackgroundAttachment", name: "BackgroundAttachment", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundAttachment,omitempty\""}, {prop: "BackgroundClip", name: "BackgroundClip", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundClip,omitempty\""}, {prop: "BackgroundColor", name: "BackgroundColor", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundColor,omitempty\""}, {prop: "BackgroundImage", name: "BackgroundImage", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundImage,omitempty\""}, {prop: "BackgroundOrigin", name: "BackgroundOrigin", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundOrigin,omitempty\""}, {prop: "BackgroundPosition", name: "BackgroundPosition", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundPosition,omitempty\""}, {prop: "BackgroundRepeat", name: "BackgroundRepeat", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundRepeat,omitempty\""}, {prop: "BackgroundSize", name: "BackgroundSize", embedded: false, exported: true, typ: $String, tag: "react:\"backgroundSize,omitempty\""}, {prop: "BaselineShift", name: "BaselineShift", embedded: false, exported: true, typ: $String, tag: "react:\"baselineShift,omitempty\""}, {prop: "Binding", name: "Binding", embedded: false, exported: true, typ: $String, tag: "react:\"binding,omitempty\""}, {prop: "Bleed", name: "Bleed", embedded: false, exported: true, typ: $String, tag: "react:\"bleed,omitempty\""}, {prop: "BookmarkLabel", name: "BookmarkLabel", embedded: false, exported: true, typ: $String, tag: "react:\"bookmarkLabel,omitempty\""}, {prop: "BookmarkLevel", name: "BookmarkLevel", embedded: false, exported: true, typ: $String, tag: "react:\"bookmarkLevel,omitempty\""}, {prop: "BookmarkState", name: "BookmarkState", embedded: false, exported: true, typ: $String, tag: "react:\"bookmarkState,omitempty\""}, {prop: "Border", name: "Border", embedded: false, exported: true, typ: $String, tag: "react:\"border,omitempty\""}, {prop: "BorderBottom", name: "BorderBottom", embedded: false, exported: true, typ: $String, tag: "react:\"borderBottom,omitempty\""}, {prop: "BorderBottomColor", name: "BorderBottomColor", embedded: false, exported: true, typ: $String, tag: "react:\"borderBottomColor,omitempty\""}, {prop: "BorderBottomLeftRadius", name: "BorderBottomLeftRadius", embedded: false, exported: true, typ: $String, tag: "react:\"borderBottomLeftRadius,omitempty\""}, {prop: "BorderBottomRightRadius", name: "BorderBottomRightRadius", embedded: false, exported: true, typ: $String, tag: "react:\"borderBottomRightRadius,omitempty\""}, {prop: "BorderBottomStyle", name: "BorderBottomStyle", embedded: false, exported: true, typ: $String, tag: "react:\"borderBottomStyle,omitempty\""}, {prop: "BorderBottomWidth", name: "BorderBottomWidth", embedded: false, exported: true, typ: $String, tag: "react:\"borderBottomWidth,omitempty\""}, {prop: "BorderBoundary", name: "BorderBoundary", embedded: false, exported: true, typ: $String, tag: "react:\"borderBoundary,omitempty\""}, {prop: "BorderCollapse", name: "BorderCollapse", embedded: false, exported: true, typ: $String, tag: "react:\"borderCollapse,omitempty\""}, {prop: "BorderColor", name: "BorderColor", embedded: false, exported: true, typ: $String, tag: "react:\"borderColor,omitempty\""}, {prop: "BorderImage", name: "BorderImage", embedded: false, exported: true, typ: $String, tag: "react:\"borderImage,omitempty\""}, {prop: "BorderImageOutset", name: "BorderImageOutset", embedded: false, exported: true, typ: $String, tag: "react:\"borderImageOutset,omitempty\""}, {prop: "BorderImageRepeat", name: "BorderImageRepeat", embedded: false, exported: true, typ: $String, tag: "react:\"borderImageRepeat,omitempty\""}, {prop: "BorderImageSlice", name: "BorderImageSlice", embedded: false, exported: true, typ: $String, tag: "react:\"borderImageSlice,omitempty\""}, {prop: "BorderImageSource", name: "BorderImageSource", embedded: false, exported: true, typ: $String, tag: "react:\"borderImageSource,omitempty\""}, {prop: "BorderImageWidth", name: "BorderImageWidth", embedded: false, exported: true, typ: $String, tag: "react:\"borderImageWidth,omitempty\""}, {prop: "BorderLeft", name: "BorderLeft", embedded: false, exported: true, typ: $String, tag: "react:\"borderLeft,omitempty\""}, {prop: "BorderLeftColor", name: "BorderLeftColor", embedded: false, exported: true, typ: $String, tag: "react:\"borderLeftColor,omitempty\""}, {prop: "BorderLeftStyle", name: "BorderLeftStyle", embedded: false, exported: true, typ: $String, tag: "react:\"borderLeftStyle,omitempty\""}, {prop: "BorderLeftWidth", name: "BorderLeftWidth", embedded: false, exported: true, typ: $String, tag: "react:\"borderLeftWidth,omitempty\""}, {prop: "BorderRadius", name: "BorderRadius", embedded: false, exported: true, typ: $String, tag: "react:\"borderRadius,omitempty\""}, {prop: "BorderRight", name: "BorderRight", embedded: false, exported: true, typ: $String, tag: "react:\"borderRight,omitempty\""}, {prop: "BorderRightColor", name: "BorderRightColor", embedded: false, exported: true, typ: $String, tag: "react:\"borderRightColor,omitempty\""}, {prop: "BorderRightStyle", name: "BorderRightStyle", embedded: false, exported: true, typ: $String, tag: "react:\"borderRightStyle,omitempty\""}, {prop: "BorderRightWidth", name: "BorderRightWidth", embedded: false, exported: true, typ: $String, tag: "react:\"borderRightWidth,omitempty\""}, {prop: "BorderSpacing", name: "BorderSpacing", embedded: false, exported: true, typ: $String, tag: "react:\"borderSpacing,omitempty\""}, {prop: "BorderStyle", name: "BorderStyle", embedded: false, exported: true, typ: $String, tag: "react:\"borderStyle,omitempty\""}, {prop: "BorderTop", name: "BorderTop", embedded: false, exported: true, typ: $String, tag: "react:\"borderTop,omitempty\""}, {prop: "BorderTopColor", name: "BorderTopColor", embedded: false, exported: true, typ: $String, tag: "react:\"borderTopColor,omitempty\""}, {prop: "BorderTopLeftRadius", name: "BorderTopLeftRadius", embedded: false, exported: true, typ: $String, tag: "react:\"borderTopLeftRadius,omitempty\""}, {prop: "BorderTopRightRadius", name: "BorderTopRightRadius", embedded: false, exported: true, typ: $String, tag: "react:\"borderTopRightRadius,omitempty\""}, {prop: "BorderTopStyle", name: "BorderTopStyle", embedded: false, exported: true, typ: $String, tag: "react:\"borderTopStyle,omitempty\""}, {prop: "BorderTopWidth", name: "BorderTopWidth", embedded: false, exported: true, typ: $String, tag: "react:\"borderTopWidth,omitempty\""}, {prop: "BorderWidth", name: "BorderWidth", embedded: false, exported: true, typ: $String, tag: "react:\"borderWidth,omitempty\""}, {prop: "Bottom", name: "Bottom", embedded: false, exported: true, typ: $String, tag: "react:\"bottom,omitempty\""}, {prop: "BoxDecorationBreak", name: "BoxDecorationBreak", embedded: false, exported: true, typ: $String, tag: "react:\"boxDecorationBreak,omitempty\""}, {prop: "BoxShadow", name: "BoxShadow", embedded: false, exported: true, typ: $String, tag: "react:\"boxShadow,omitempty\""}, {prop: "BoxSizing", name: "BoxSizing", embedded: false, exported: true, typ: $String, tag: "react:\"boxSizing,omitempty\""}, {prop: "BoxSnap", name: "BoxSnap", embedded: false, exported: true, typ: $String, tag: "react:\"boxSnap,omitempty\""}, {prop: "BoxSuppress", name: "BoxSuppress", embedded: false, exported: true, typ: $String, tag: "react:\"boxSuppress,omitempty\""}, {prop: "BreakAfter", name: "BreakAfter", embedded: false, exported: true, typ: $String, tag: "react:\"breakAfter,omitempty\""}, {prop: "BreakBefore", name: "BreakBefore", embedded: false, exported: true, typ: $String, tag: "react:\"breakBefore,omitempty\""}, {prop: "BreakInside", name: "BreakInside", embedded: false, exported: true, typ: $String, tag: "react:\"breakInside,omitempty\""}, {prop: "CaptionSide", name: "CaptionSide", embedded: false, exported: true, typ: $String, tag: "react:\"captionSide,omitempty\""}, {prop: "Caret", name: "Caret", embedded: false, exported: true, typ: $String, tag: "react:\"caret,omitempty\""}, {prop: "CaretShape", name: "CaretShape", embedded: false, exported: true, typ: $String, tag: "react:\"caretShape,omitempty\""}, {prop: "Chains", name: "Chains", embedded: false, exported: true, typ: $String, tag: "react:\"chains,omitempty\""}, {prop: "Clear", name: "Clear", embedded: false, exported: true, typ: $String, tag: "react:\"clear,omitempty\""}, {prop: "ClipPath", name: "ClipPath", embedded: false, exported: true, typ: $String, tag: "react:\"clipPath,omitempty\""}, {prop: "ClipRule", name: "ClipRule", embedded: false, exported: true, typ: $String, tag: "react:\"clipRule,omitempty\""}, {prop: "Color", name: "Color", embedded: false, exported: true, typ: $String, tag: "react:\"color,omitempty\""}, {prop: "ColorInterpolationFilters", name: "ColorInterpolationFilters", embedded: false, exported: true, typ: $String, tag: "react:\"colorInterpolationFilters,omitempty\""}, {prop: "ColumnCount", name: "ColumnCount", embedded: false, exported: true, typ: $String, tag: "react:\"columnCount,omitempty\""}, {prop: "ColumnFill", name: "ColumnFill", embedded: false, exported: true, typ: $String, tag: "react:\"columnFill,omitempty\""}, {prop: "ColumnGap", name: "ColumnGap", embedded: false, exported: true, typ: $String, tag: "react:\"columnGap,omitempty\""}, {prop: "ColumnRule", name: "ColumnRule", embedded: false, exported: true, typ: $String, tag: "react:\"columnRule,omitempty\""}, {prop: "ColumnRuleColor", name: "ColumnRuleColor", embedded: false, exported: true, typ: $String, tag: "react:\"columnRuleColor,omitempty\""}, {prop: "ColumnRuleStyle", name: "ColumnRuleStyle", embedded: false, exported: true, typ: $String, tag: "react:\"columnRuleStyle,omitempty\""}, {prop: "ColumnRuleWidth", name: "ColumnRuleWidth", embedded: false, exported: true, typ: $String, tag: "react:\"columnRuleWidth,omitempty\""}, {prop: "ColumnSpan", name: "ColumnSpan", embedded: false, exported: true, typ: $String, tag: "react:\"columnSpan,omitempty\""}, {prop: "ColumnWidth", name: "ColumnWidth", embedded: false, exported: true, typ: $String, tag: "react:\"columnWidth,omitempty\""}, {prop: "Columns", name: "Columns", embedded: false, exported: true, typ: $String, tag: "react:\"columns,omitempty\""}, {prop: "Contain", name: "Contain", embedded: false, exported: true, typ: $String, tag: "react:\"contain,omitempty\""}, {prop: "Content", name: "Content", embedded: false, exported: true, typ: $String, tag: "react:\"content,omitempty\""}, {prop: "CounterIncrement", name: "CounterIncrement", embedded: false, exported: true, typ: $String, tag: "react:\"counterIncrement,omitempty\""}, {prop: "CounterReset", name: "CounterReset", embedded: false, exported: true, typ: $String, tag: "react:\"counterReset,omitempty\""}, {prop: "CounterSet", name: "CounterSet", embedded: false, exported: true, typ: $String, tag: "react:\"counterSet,omitempty\""}, {prop: "Crop", name: "Crop", embedded: false, exported: true, typ: $String, tag: "react:\"crop,omitempty\""}, {prop: "Cue", name: "Cue", embedded: false, exported: true, typ: $String, tag: "react:\"cue,omitempty\""}, {prop: "CueAfter", name: "CueAfter", embedded: false, exported: true, typ: $String, tag: "react:\"cueAfter,omitempty\""}, {prop: "CueBefore", name: "CueBefore", embedded: false, exported: true, typ: $String, tag: "react:\"cueBefore,omitempty\""}, {prop: "Cursor", name: "Cursor", embedded: false, exported: true, typ: $String, tag: "react:\"cursor,omitempty\""}, {prop: "Direction", name: "Direction", embedded: false, exported: true, typ: $String, tag: "react:\"direction,omitempty\""}, {prop: "Display", name: "Display", embedded: false, exported: true, typ: $String, tag: "react:\"display,omitempty\""}, {prop: "DisplayInside", name: "DisplayInside", embedded: false, exported: true, typ: $String, tag: "react:\"displayInside,omitempty\""}, {prop: "DisplayList", name: "DisplayList", embedded: false, exported: true, typ: $String, tag: "react:\"displayList,omitempty\""}, {prop: "DisplayOutside", name: "DisplayOutside", embedded: false, exported: true, typ: $String, tag: "react:\"displayOutside,omitempty\""}, {prop: "DominantBaseline", name: "DominantBaseline", embedded: false, exported: true, typ: $String, tag: "react:\"dominantBaseline,omitempty\""}, {prop: "EmptyCells", name: "EmptyCells", embedded: false, exported: true, typ: $String, tag: "react:\"emptyCells,omitempty\""}, {prop: "Filter", name: "Filter", embedded: false, exported: true, typ: $String, tag: "react:\"filter,omitempty\""}, {prop: "Flex", name: "Flex", embedded: false, exported: true, typ: $String, tag: "react:\"flex,omitempty\""}, {prop: "FlexBasis", name: "FlexBasis", embedded: false, exported: true, typ: $String, tag: "react:\"flexBasis,omitempty\""}, {prop: "FlexDirection", name: "FlexDirection", embedded: false, exported: true, typ: $String, tag: "react:\"flexDirection,omitempty\""}, {prop: "FlexFlow", name: "FlexFlow", embedded: false, exported: true, typ: $String, tag: "react:\"flexFlow,omitempty\""}, {prop: "FlexGrow", name: "FlexGrow", embedded: false, exported: true, typ: $String, tag: "react:\"flexGrow,omitempty\""}, {prop: "FlexShrink", name: "FlexShrink", embedded: false, exported: true, typ: $String, tag: "react:\"flexShrink,omitempty\""}, {prop: "FlexWrap", name: "FlexWrap", embedded: false, exported: true, typ: $String, tag: "react:\"flexWrap,omitempty\""}, {prop: "Float", name: "Float", embedded: false, exported: true, typ: $String, tag: "react:\"float,omitempty\""}, {prop: "FloatOffset", name: "FloatOffset", embedded: false, exported: true, typ: $String, tag: "react:\"floatOffset,omitempty\""}, {prop: "FloodColor", name: "FloodColor", embedded: false, exported: true, typ: $String, tag: "react:\"floodColor,omitempty\""}, {prop: "FloodOpacity", name: "FloodOpacity", embedded: false, exported: true, typ: $String, tag: "react:\"floodOpacity,omitempty\""}, {prop: "FlowFrom", name: "FlowFrom", embedded: false, exported: true, typ: $String, tag: "react:\"flowFrom,omitempty\""}, {prop: "FlowInto", name: "FlowInto", embedded: false, exported: true, typ: $String, tag: "react:\"flowInto,omitempty\""}, {prop: "Font", name: "Font", embedded: false, exported: true, typ: $String, tag: "react:\"font,omitempty\""}, {prop: "FontFamily", name: "FontFamily", embedded: false, exported: true, typ: $String, tag: "react:\"fontFamily,omitempty\""}, {prop: "FontFeatureSettings", name: "FontFeatureSettings", embedded: false, exported: true, typ: $String, tag: "react:\"fontFeatureSettings,omitempty\""}, {prop: "FontKerning", name: "FontKerning", embedded: false, exported: true, typ: $String, tag: "react:\"fontKerning,omitempty\""}, {prop: "FontLanguageOverride", name: "FontLanguageOverride", embedded: false, exported: true, typ: $String, tag: "react:\"fontLanguageOverride,omitempty\""}, {prop: "FontMaxSize", name: "FontMaxSize", embedded: false, exported: true, typ: $String, tag: "react:\"fontMaxSize,omitempty\""}, {prop: "FontMinSize", name: "FontMinSize", embedded: false, exported: true, typ: $String, tag: "react:\"fontMinSize,omitempty\""}, {prop: "FontOpticalSizing", name: "FontOpticalSizing", embedded: false, exported: true, typ: $String, tag: "react:\"fontOpticalSizing,omitempty\""}, {prop: "FontPalette", name: "FontPalette", embedded: false, exported: true, typ: $String, tag: "react:\"fontPalette,omitempty\""}, {prop: "FontPresentation", name: "FontPresentation", embedded: false, exported: true, typ: $String, tag: "react:\"fontPresentation,omitempty\""}, {prop: "FontSize", name: "FontSize", embedded: false, exported: true, typ: $String, tag: "react:\"fontSize,omitempty\""}, {prop: "FontSizeAdjust", name: "FontSizeAdjust", embedded: false, exported: true, typ: $String, tag: "react:\"fontSizeAdjust,omitempty\""}, {prop: "FontStretch", name: "FontStretch", embedded: false, exported: true, typ: $String, tag: "react:\"fontStretch,omitempty\""}, {prop: "FontStyle", name: "FontStyle", embedded: false, exported: true, typ: $String, tag: "react:\"fontStyle,omitempty\""}, {prop: "FontSynthesis", name: "FontSynthesis", embedded: false, exported: true, typ: $String, tag: "react:\"fontSynthesis,omitempty\""}, {prop: "FontVariant", name: "FontVariant", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariant,omitempty\""}, {prop: "FontVariantAlternates", name: "FontVariantAlternates", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariantAlternates,omitempty\""}, {prop: "FontVariantCaps", name: "FontVariantCaps", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariantCaps,omitempty\""}, {prop: "FontVariantEastAsian", name: "FontVariantEastAsian", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariantEastAsian,omitempty\""}, {prop: "FontVariantLigatures", name: "FontVariantLigatures", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariantLigatures,omitempty\""}, {prop: "FontVariantNumeric", name: "FontVariantNumeric", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariantNumeric,omitempty\""}, {prop: "FontVariantPosition", name: "FontVariantPosition", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariantPosition,omitempty\""}, {prop: "FontVariationSettings", name: "FontVariationSettings", embedded: false, exported: true, typ: $String, tag: "react:\"fontVariationSettings,omitempty\""}, {prop: "FontWeight", name: "FontWeight", embedded: false, exported: true, typ: $String, tag: "react:\"fontWeight,omitempty\""}, {prop: "Grid", name: "Grid", embedded: false, exported: true, typ: $String, tag: "react:\"grid,omitempty\""}, {prop: "GridArea", name: "GridArea", embedded: false, exported: true, typ: $String, tag: "react:\"gridArea,omitempty\""}, {prop: "GridAutoColumns", name: "GridAutoColumns", embedded: false, exported: true, typ: $String, tag: "react:\"gridAutoColumns,omitempty\""}, {prop: "GridAutoFlow", name: "GridAutoFlow", embedded: false, exported: true, typ: $String, tag: "react:\"gridAutoFlow,omitempty\""}, {prop: "GridAutoRows", name: "GridAutoRows", embedded: false, exported: true, typ: $String, tag: "react:\"gridAutoRows,omitempty\""}, {prop: "GridColumn", name: "GridColumn", embedded: false, exported: true, typ: $String, tag: "react:\"gridColumn,omitempty\""}, {prop: "GridColumnEnd", name: "GridColumnEnd", embedded: false, exported: true, typ: $String, tag: "react:\"gridColumnEnd,omitempty\""}, {prop: "GridColumnStart", name: "GridColumnStart", embedded: false, exported: true, typ: $String, tag: "react:\"gridColumnStart,omitempty\""}, {prop: "GridRow", name: "GridRow", embedded: false, exported: true, typ: $String, tag: "react:\"gridRow,omitempty\""}, {prop: "GridRowEnd", name: "GridRowEnd", embedded: false, exported: true, typ: $String, tag: "react:\"gridRowEnd,omitempty\""}, {prop: "GridRowStart", name: "GridRowStart", embedded: false, exported: true, typ: $String, tag: "react:\"gridRowStart,omitempty\""}, {prop: "GridTemplate", name: "GridTemplate", embedded: false, exported: true, typ: $String, tag: "react:\"gridTemplate,omitempty\""}, {prop: "GridTemplateAreas", name: "GridTemplateAreas", embedded: false, exported: true, typ: $String, tag: "react:\"gridTemplateAreas,omitempty\""}, {prop: "GridTemplateColumns", name: "GridTemplateColumns", embedded: false, exported: true, typ: $String, tag: "react:\"gridTemplateColumns,omitempty\""}, {prop: "GridTemplateRows", name: "GridTemplateRows", embedded: false, exported: true, typ: $String, tag: "react:\"gridTemplateRows,omitempty\""}, {prop: "HangingPunctuation", name: "HangingPunctuation", embedded: false, exported: true, typ: $String, tag: "react:\"hangingPunctuation,omitempty\""}, {prop: "Height", name: "Height", embedded: false, exported: true, typ: $String, tag: "react:\"height,omitempty\""}, {prop: "Hyphens", name: "Hyphens", embedded: false, exported: true, typ: $String, tag: "react:\"hyphens,omitempty\""}, {prop: "Icon", name: "Icon", embedded: false, exported: true, typ: $String, tag: "react:\"icon,omitempty\""}, {prop: "ImageOrientation", name: "ImageOrientation", embedded: false, exported: true, typ: $String, tag: "react:\"imageOrientation,omitempty\""}, {prop: "ImageRendering", name: "ImageRendering", embedded: false, exported: true, typ: $String, tag: "react:\"imageRendering,omitempty\""}, {prop: "ImageResolution", name: "ImageResolution", embedded: false, exported: true, typ: $String, tag: "react:\"imageResolution,omitempty\""}, {prop: "ImeMode", name: "ImeMode", embedded: false, exported: true, typ: $String, tag: "react:\"imeMode,omitempty\""}, {prop: "InitialLetters", name: "InitialLetters", embedded: false, exported: true, typ: $String, tag: "react:\"initialLetters,omitempty\""}, {prop: "InitialLettersAlign", name: "InitialLettersAlign", embedded: false, exported: true, typ: $String, tag: "react:\"initialLettersAlign,omitempty\""}, {prop: "InitialLettersWrap", name: "InitialLettersWrap", embedded: false, exported: true, typ: $String, tag: "react:\"initialLettersWrap,omitempty\""}, {prop: "InlineSizing", name: "InlineSizing", embedded: false, exported: true, typ: $String, tag: "react:\"inlineSizing,omitempty\""}, {prop: "JustifyContent", name: "JustifyContent", embedded: false, exported: true, typ: $String, tag: "react:\"justifyContent,omitempty\""}, {prop: "JustifyItems", name: "JustifyItems", embedded: false, exported: true, typ: $String, tag: "react:\"justifyItems,omitempty\""}, {prop: "JustifySelf", name: "JustifySelf", embedded: false, exported: true, typ: $String, tag: "react:\"justifySelf,omitempty\""}, {prop: "Left", name: "Left", embedded: false, exported: true, typ: $String, tag: "react:\"left,omitempty\""}, {prop: "LetterSpacing", name: "LetterSpacing", embedded: false, exported: true, typ: $String, tag: "react:\"letterSpacing,omitempty\""}, {prop: "LightingColor", name: "LightingColor", embedded: false, exported: true, typ: $String, tag: "react:\"lightingColor,omitempty\""}, {prop: "LineBreak", name: "LineBreak", embedded: false, exported: true, typ: $String, tag: "react:\"lineBreak,omitempty\""}, {prop: "LineGrid", name: "LineGrid", embedded: false, exported: true, typ: $String, tag: "react:\"lineGrid,omitempty\""}, {prop: "LineHeight", name: "LineHeight", embedded: false, exported: true, typ: $String, tag: "react:\"lineHeight,omitempty\""}, {prop: "LineSnap", name: "LineSnap", embedded: false, exported: true, typ: $String, tag: "react:\"lineSnap,omitempty\""}, {prop: "ListStyle", name: "ListStyle", embedded: false, exported: true, typ: $String, tag: "react:\"listStyle,omitempty\""}, {prop: "ListStyleImage", name: "ListStyleImage", embedded: false, exported: true, typ: $String, tag: "react:\"listStyleImage,omitempty\""}, {prop: "ListStylePosition", name: "ListStylePosition", embedded: false, exported: true, typ: $String, tag: "react:\"listStylePosition,omitempty\""}, {prop: "ListStyleType", name: "ListStyleType", embedded: false, exported: true, typ: $String, tag: "react:\"listStyleType,omitempty\""}, {prop: "Margin", name: "Margin", embedded: false, exported: true, typ: $String, tag: "react:\"margin,omitempty\""}, {prop: "MarginBottom", name: "MarginBottom", embedded: false, exported: true, typ: $String, tag: "react:\"marginBottom,omitempty\""}, {prop: "MarginLeft", name: "MarginLeft", embedded: false, exported: true, typ: $String, tag: "react:\"marginLeft,omitempty\""}, {prop: "MarginRight", name: "MarginRight", embedded: false, exported: true, typ: $String, tag: "react:\"marginRight,omitempty\""}, {prop: "MarginTop", name: "MarginTop", embedded: false, exported: true, typ: $String, tag: "react:\"marginTop,omitempty\""}, {prop: "MarkerSide", name: "MarkerSide", embedded: false, exported: true, typ: $String, tag: "react:\"markerSide,omitempty\""}, {prop: "Marks", name: "Marks", embedded: false, exported: true, typ: $String, tag: "react:\"marks,omitempty\""}, {prop: "Mask", name: "Mask", embedded: false, exported: true, typ: $String, tag: "react:\"mask,omitempty\""}, {prop: "MaskBox", name: "MaskBox", embedded: false, exported: true, typ: $String, tag: "react:\"maskBox,omitempty\""}, {prop: "MaskBoxOutset", name: "MaskBoxOutset", embedded: false, exported: true, typ: $String, tag: "react:\"maskBoxOutset,omitempty\""}, {prop: "MaskBoxRepeat", name: "MaskBoxRepeat", embedded: false, exported: true, typ: $String, tag: "react:\"maskBoxRepeat,omitempty\""}, {prop: "MaskBoxSlice", name: "MaskBoxSlice", embedded: false, exported: true, typ: $String, tag: "react:\"maskBoxSlice,omitempty\""}, {prop: "MaskBoxSource", name: "MaskBoxSource", embedded: false, exported: true, typ: $String, tag: "react:\"maskBoxSource,omitempty\""}, {prop: "MaskBoxWidth", name: "MaskBoxWidth", embedded: false, exported: true, typ: $String, tag: "react:\"maskBoxWidth,omitempty\""}, {prop: "MaskClip", name: "MaskClip", embedded: false, exported: true, typ: $String, tag: "react:\"maskClip,omitempty\""}, {prop: "MaskImage", name: "MaskImage", embedded: false, exported: true, typ: $String, tag: "react:\"maskImage,omitempty\""}, {prop: "MaskOrigin", name: "MaskOrigin", embedded: false, exported: true, typ: $String, tag: "react:\"maskOrigin,omitempty\""}, {prop: "MaskPosition", name: "MaskPosition", embedded: false, exported: true, typ: $String, tag: "react:\"maskPosition,omitempty\""}, {prop: "MaskRepeat", name: "MaskRepeat", embedded: false, exported: true, typ: $String, tag: "react:\"maskRepeat,omitempty\""}, {prop: "MaskSize", name: "MaskSize", embedded: false, exported: true, typ: $String, tag: "react:\"maskSize,omitempty\""}, {prop: "MaskSourceType", name: "MaskSourceType", embedded: false, exported: true, typ: $String, tag: "react:\"maskSourceType,omitempty\""}, {prop: "MaskType", name: "MaskType", embedded: false, exported: true, typ: $String, tag: "react:\"maskType,omitempty\""}, {prop: "MaxHeight", name: "MaxHeight", embedded: false, exported: true, typ: $String, tag: "react:\"maxHeight,omitempty\""}, {prop: "MaxLines", name: "MaxLines", embedded: false, exported: true, typ: $String, tag: "react:\"maxLines,omitempty\""}, {prop: "MaxWidth", name: "MaxWidth", embedded: false, exported: true, typ: $String, tag: "react:\"maxWidth,omitempty\""}, {prop: "MinHeight", name: "MinHeight", embedded: false, exported: true, typ: $String, tag: "react:\"minHeight,omitempty\""}, {prop: "MinWidth", name: "MinWidth", embedded: false, exported: true, typ: $String, tag: "react:\"minWidth,omitempty\""}, {prop: "MoveTo", name: "MoveTo", embedded: false, exported: true, typ: $String, tag: "react:\"moveTo,omitempty\""}, {prop: "NavDown", name: "NavDown", embedded: false, exported: true, typ: $String, tag: "react:\"navDown,omitempty\""}, {prop: "NavIndex", name: "NavIndex", embedded: false, exported: true, typ: $String, tag: "react:\"navIndex,omitempty\""}, {prop: "NavLeft", name: "NavLeft", embedded: false, exported: true, typ: $String, tag: "react:\"navLeft,omitempty\""}, {prop: "NavRight", name: "NavRight", embedded: false, exported: true, typ: $String, tag: "react:\"navRight,omitempty\""}, {prop: "NavUp", name: "NavUp", embedded: false, exported: true, typ: $String, tag: "react:\"navUp,omitempty\""}, {prop: "ObjectFit", name: "ObjectFit", embedded: false, exported: true, typ: $String, tag: "react:\"objectFit,omitempty\""}, {prop: "ObjectPosition", name: "ObjectPosition", embedded: false, exported: true, typ: $String, tag: "react:\"objectPosition,omitempty\""}, {prop: "Opacity", name: "Opacity", embedded: false, exported: true, typ: $String, tag: "react:\"opacity,omitempty\""}, {prop: "Order", name: "Order", embedded: false, exported: true, typ: $String, tag: "react:\"order,omitempty\""}, {prop: "Orphans", name: "Orphans", embedded: false, exported: true, typ: $String, tag: "react:\"orphans,omitempty\""}, {prop: "Outline", name: "Outline", embedded: false, exported: true, typ: $String, tag: "react:\"outline,omitempty\""}, {prop: "OutlineColor", name: "OutlineColor", embedded: false, exported: true, typ: $String, tag: "react:\"outlineColor,omitempty\""}, {prop: "OutlineOffset", name: "OutlineOffset", embedded: false, exported: true, typ: $String, tag: "react:\"outlineOffset,omitempty\""}, {prop: "OutlineStyle", name: "OutlineStyle", embedded: false, exported: true, typ: $String, tag: "react:\"outlineStyle,omitempty\""}, {prop: "OutlineWidth", name: "OutlineWidth", embedded: false, exported: true, typ: $String, tag: "react:\"outlineWidth,omitempty\""}, {prop: "Overflow", name: "Overflow", embedded: false, exported: true, typ: $String, tag: "react:\"overflow,omitempty\""}, {prop: "OverflowWrap", name: "OverflowWrap", embedded: false, exported: true, typ: $String, tag: "react:\"overflowWrap,omitempty\""}, {prop: "OverflowX", name: "OverflowX", embedded: false, exported: true, typ: $String, tag: "react:\"overflowX,omitempty\""}, {prop: "OverflowY", name: "OverflowY", embedded: false, exported: true, typ: $String, tag: "react:\"overflowY,omitempty\""}, {prop: "Padding", name: "Padding", embedded: false, exported: true, typ: $String, tag: "react:\"padding,omitempty\""}, {prop: "PaddingBottom", name: "PaddingBottom", embedded: false, exported: true, typ: $String, tag: "react:\"paddingBottom,omitempty\""}, {prop: "PaddingLeft", name: "PaddingLeft", embedded: false, exported: true, typ: $String, tag: "react:\"paddingLeft,omitempty\""}, {prop: "PaddingRight", name: "PaddingRight", embedded: false, exported: true, typ: $String, tag: "react:\"paddingRight,omitempty\""}, {prop: "PaddingTop", name: "PaddingTop", embedded: false, exported: true, typ: $String, tag: "react:\"paddingTop,omitempty\""}, {prop: "Page", name: "Page", embedded: false, exported: true, typ: $String, tag: "react:\"page,omitempty\""}, {prop: "PageBreakAfter", name: "PageBreakAfter", embedded: false, exported: true, typ: $String, tag: "react:\"pageBreakAfter,omitempty\""}, {prop: "PageBreakBefore", name: "PageBreakBefore", embedded: false, exported: true, typ: $String, tag: "react:\"pageBreakBefore,omitempty\""}, {prop: "PageBreakInside", name: "PageBreakInside", embedded: false, exported: true, typ: $String, tag: "react:\"pageBreakInside,omitempty\""}, {prop: "PagePolicy", name: "PagePolicy", embedded: false, exported: true, typ: $String, tag: "react:\"pagePolicy,omitempty\""}, {prop: "Pause", name: "Pause", embedded: false, exported: true, typ: $String, tag: "react:\"pause,omitempty\""}, {prop: "PauseAfter", name: "PauseAfter", embedded: false, exported: true, typ: $String, tag: "react:\"pauseAfter,omitempty\""}, {prop: "PauseBefore", name: "PauseBefore", embedded: false, exported: true, typ: $String, tag: "react:\"pauseBefore,omitempty\""}, {prop: "Perspective", name: "Perspective", embedded: false, exported: true, typ: $String, tag: "react:\"perspective,omitempty\""}, {prop: "PerspectiveOrigin", name: "PerspectiveOrigin", embedded: false, exported: true, typ: $String, tag: "react:\"perspectiveOrigin,omitempty\""}, {prop: "PolarAnchor", name: "PolarAnchor", embedded: false, exported: true, typ: $String, tag: "react:\"polarAnchor,omitempty\""}, {prop: "PolarAngle", name: "PolarAngle", embedded: false, exported: true, typ: $String, tag: "react:\"polarAngle,omitempty\""}, {prop: "PolarDistance", name: "PolarDistance", embedded: false, exported: true, typ: $String, tag: "react:\"polarDistance,omitempty\""}, {prop: "PolarOrigin", name: "PolarOrigin", embedded: false, exported: true, typ: $String, tag: "react:\"polarOrigin,omitempty\""}, {prop: "Position", name: "Position", embedded: false, exported: true, typ: $String, tag: "react:\"position,omitempty\""}, {prop: "PresentationLevel", name: "PresentationLevel", embedded: false, exported: true, typ: $String, tag: "react:\"presentationLevel,omitempty\""}, {prop: "Quotes", name: "Quotes", embedded: false, exported: true, typ: $String, tag: "react:\"quotes,omitempty\""}, {prop: "RegionFragment", name: "RegionFragment", embedded: false, exported: true, typ: $String, tag: "react:\"regionFragment,omitempty\""}, {prop: "Resize", name: "Resize", embedded: false, exported: true, typ: $String, tag: "react:\"resize,omitempty\""}, {prop: "Rest", name: "Rest", embedded: false, exported: true, typ: $String, tag: "react:\"rest,omitempty\""}, {prop: "RestAfter", name: "RestAfter", embedded: false, exported: true, typ: $String, tag: "react:\"restAfter,omitempty\""}, {prop: "RestBefore", name: "RestBefore", embedded: false, exported: true, typ: $String, tag: "react:\"restBefore,omitempty\""}, {prop: "Right", name: "Right", embedded: false, exported: true, typ: $String, tag: "react:\"right,omitempty\""}, {prop: "Rotation", name: "Rotation", embedded: false, exported: true, typ: $String, tag: "react:\"rotation,omitempty\""}, {prop: "RotationPoint", name: "RotationPoint", embedded: false, exported: true, typ: $String, tag: "react:\"rotationPoint,omitempty\""}, {prop: "RowGap", name: "RowGap", embedded: false, exported: true, typ: $String, tag: "react:\"rowGap,omitempty\""}, {prop: "RubyAlign", name: "RubyAlign", embedded: false, exported: true, typ: $String, tag: "react:\"rubyAlign,omitempty\""}, {prop: "RubyMerge", name: "RubyMerge", embedded: false, exported: true, typ: $String, tag: "react:\"rubyMerge,omitempty\""}, {prop: "RubyPosition", name: "RubyPosition", embedded: false, exported: true, typ: $String, tag: "react:\"rubyPosition,omitempty\""}, {prop: "ScrollPadding", name: "ScrollPadding", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPadding,omitempty\""}, {prop: "ScrollPaddingBlock", name: "ScrollPaddingBlock", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingBlock,omitempty\""}, {prop: "ScrollPaddingBlockEnd", name: "ScrollPaddingBlockEnd", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingBlockEnd,omitempty\""}, {prop: "ScrollPaddingBlockStart", name: "ScrollPaddingBlockStart", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingBlockStart,omitempty\""}, {prop: "ScrollPaddingBottom", name: "ScrollPaddingBottom", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingBottom,omitempty\""}, {prop: "ScrollPaddingInline", name: "ScrollPaddingInline", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingInline,omitempty\""}, {prop: "ScrollPaddingInlineEnd", name: "ScrollPaddingInlineEnd", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingInlineEnd,omitempty\""}, {prop: "ScrollPaddingInlineStart", name: "ScrollPaddingInlineStart", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingInlineStart,omitempty\""}, {prop: "ScrollPaddingLeft", name: "ScrollPaddingLeft", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingLeft,omitempty\""}, {prop: "ScrollPaddingRight", name: "ScrollPaddingRight", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingRight,omitempty\""}, {prop: "ScrollPaddingTop", name: "ScrollPaddingTop", embedded: false, exported: true, typ: $String, tag: "react:\"scrollPaddingTop,omitempty\""}, {prop: "ScrollSnapAlign", name: "ScrollSnapAlign", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapAlign,omitempty\""}, {prop: "ScrollSnapMargin", name: "ScrollSnapMargin", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMargin,omitempty\""}, {prop: "ScrollSnapMarginBlock", name: "ScrollSnapMarginBlock", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginBlock,omitempty\""}, {prop: "ScrollSnapMarginBlockEnd", name: "ScrollSnapMarginBlockEnd", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginBlockEnd,omitempty\""}, {prop: "ScrollSnapMarginBlockStart", name: "ScrollSnapMarginBlockStart", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginBlockStart,omitempty\""}, {prop: "ScrollSnapMarginBottom", name: "ScrollSnapMarginBottom", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginBottom,omitempty\""}, {prop: "ScrollSnapMarginInline", name: "ScrollSnapMarginInline", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginInline,omitempty\""}, {prop: "ScrollSnapMarginInlineEnd", name: "ScrollSnapMarginInlineEnd", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginInlineEnd,omitempty\""}, {prop: "ScrollSnapMarginInlineStart", name: "ScrollSnapMarginInlineStart", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginInlineStart,omitempty\""}, {prop: "ScrollSnapMarginLeft", name: "ScrollSnapMarginLeft", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginLeft,omitempty\""}, {prop: "ScrollSnapMarginRight", name: "ScrollSnapMarginRight", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginRight,omitempty\""}, {prop: "ScrollSnapMarginTop", name: "ScrollSnapMarginTop", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapMarginTop,omitempty\""}, {prop: "ScrollSnapStop", name: "ScrollSnapStop", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapStop,omitempty\""}, {prop: "ScrollSnapType", name: "ScrollSnapType", embedded: false, exported: true, typ: $String, tag: "react:\"scrollSnapType,omitempty\""}, {prop: "ShapeImageThreshold", name: "ShapeImageThreshold", embedded: false, exported: true, typ: $String, tag: "react:\"shapeImageThreshold,omitempty\""}, {prop: "ShapeInside", name: "ShapeInside", embedded: false, exported: true, typ: $String, tag: "react:\"shapeInside,omitempty\""}, {prop: "ShapeOutside", name: "ShapeOutside", embedded: false, exported: true, typ: $String, tag: "react:\"shapeOutside,omitempty\""}, {prop: "ShapeMargin", name: "ShapeMargin", embedded: false, exported: true, typ: $String, tag: "react:\"shapeMargin,omitempty\""}, {prop: "Size", name: "Size", embedded: false, exported: true, typ: $String, tag: "react:\"size,omitempty\""}, {prop: "Speak", name: "Speak", embedded: false, exported: true, typ: $String, tag: "react:\"speak,omitempty\""}, {prop: "SpeakAs", name: "SpeakAs", embedded: false, exported: true, typ: $String, tag: "react:\"speakAs,omitempty\""}, {prop: "StringSet", name: "StringSet", embedded: false, exported: true, typ: $String, tag: "react:\"stringSet,omitempty\""}, {prop: "TabSize", name: "TabSize", embedded: false, exported: true, typ: $String, tag: "react:\"tabSize,omitempty\""}, {prop: "TableLayout", name: "TableLayout", embedded: false, exported: true, typ: $String, tag: "react:\"tableLayout,omitempty\""}, {prop: "TextAlign", name: "TextAlign", embedded: false, exported: true, typ: $String, tag: "react:\"textAlign,omitempty\""}, {prop: "TextAlignLast", name: "TextAlignLast", embedded: false, exported: true, typ: $String, tag: "react:\"textAlignLast,omitempty\""}, {prop: "TextCombineUpright", name: "TextCombineUpright", embedded: false, exported: true, typ: $String, tag: "react:\"textCombineUpright,omitempty\""}, {prop: "TextDecoration", name: "TextDecoration", embedded: false, exported: true, typ: $String, tag: "react:\"textDecoration,omitempty\""}, {prop: "TextDecorationColor", name: "TextDecorationColor", embedded: false, exported: true, typ: $String, tag: "react:\"textDecorationColor,omitempty\""}, {prop: "TextDecorationLine", name: "TextDecorationLine", embedded: false, exported: true, typ: $String, tag: "react:\"textDecorationLine,omitempty\""}, {prop: "TextDecorationSkip", name: "TextDecorationSkip", embedded: false, exported: true, typ: $String, tag: "react:\"textDecorationSkip,omitempty\""}, {prop: "TextDecorationStyle", name: "TextDecorationStyle", embedded: false, exported: true, typ: $String, tag: "react:\"textDecorationStyle,omitempty\""}, {prop: "TextEmphasis", name: "TextEmphasis", embedded: false, exported: true, typ: $String, tag: "react:\"textEmphasis,omitempty\""}, {prop: "TextEmphasisColor", name: "TextEmphasisColor", embedded: false, exported: true, typ: $String, tag: "react:\"textEmphasisColor,omitempty\""}, {prop: "TextEmphasisPosition", name: "TextEmphasisPosition", embedded: false, exported: true, typ: $String, tag: "react:\"textEmphasisPosition,omitempty\""}, {prop: "TextEmphasisStyle", name: "TextEmphasisStyle", embedded: false, exported: true, typ: $String, tag: "react:\"textEmphasisStyle,omitempty\""}, {prop: "TextIndent", name: "TextIndent", embedded: false, exported: true, typ: $String, tag: "react:\"textIndent,omitempty\""}, {prop: "TextJustify", name: "TextJustify", embedded: false, exported: true, typ: $String, tag: "react:\"textJustify,omitempty\""}, {prop: "TextOrientation", name: "TextOrientation", embedded: false, exported: true, typ: $String, tag: "react:\"textOrientation,omitempty\""}, {prop: "TextOverflow", name: "TextOverflow", embedded: false, exported: true, typ: $String, tag: "react:\"textOverflow,omitempty\""}, {prop: "TextShadow", name: "TextShadow", embedded: false, exported: true, typ: $String, tag: "react:\"textShadow,omitempty\""}, {prop: "TextSpaceCollapse", name: "TextSpaceCollapse", embedded: false, exported: true, typ: $String, tag: "react:\"textSpaceCollapse,omitempty\""}, {prop: "TextTransform", name: "TextTransform", embedded: false, exported: true, typ: $String, tag: "react:\"textTransform,omitempty\""}, {prop: "TextUnderlinePosition", name: "TextUnderlinePosition", embedded: false, exported: true, typ: $String, tag: "react:\"textUnderlinePosition,omitempty\""}, {prop: "TextWrap", name: "TextWrap", embedded: false, exported: true, typ: $String, tag: "react:\"textWrap,omitempty\""}, {prop: "TouchAction", name: "TouchAction", embedded: false, exported: true, typ: $String, tag: "react:\"touchAction,omitempty\""}, {prop: "Top", name: "Top", embedded: false, exported: true, typ: $String, tag: "react:\"top,omitempty\""}, {prop: "Transform", name: "Transform", embedded: false, exported: true, typ: $String, tag: "react:\"transform,omitempty\""}, {prop: "TransformOrigin", name: "TransformOrigin", embedded: false, exported: true, typ: $String, tag: "react:\"transformOrigin,omitempty\""}, {prop: "TransformStyle", name: "TransformStyle", embedded: false, exported: true, typ: $String, tag: "react:\"transformStyle,omitempty\""}, {prop: "Transition", name: "Transition", embedded: false, exported: true, typ: $String, tag: "react:\"transition,omitempty\""}, {prop: "TransitionDelay", name: "TransitionDelay", embedded: false, exported: true, typ: $String, tag: "react:\"transitionDelay,omitempty\""}, {prop: "TransitionDuration", name: "TransitionDuration", embedded: false, exported: true, typ: $String, tag: "react:\"transitionDuration,omitempty\""}, {prop: "TransitionProperty", name: "TransitionProperty", embedded: false, exported: true, typ: $String, tag: "react:\"transitionProperty,omitempty\""}, {prop: "TransitionTimingFunction", name: "TransitionTimingFunction", embedded: false, exported: true, typ: $String, tag: "react:\"transitionTimingFunction,omitempty\""}, {prop: "UnicodeBidi", name: "UnicodeBidi", embedded: false, exported: true, typ: $String, tag: "react:\"unicodeBidi,omitempty\""}, {prop: "UserSelect", name: "UserSelect", embedded: false, exported: true, typ: $String, tag: "react:\"userSelect,omitempty\""}, {prop: "VerticalAlign", name: "VerticalAlign", embedded: false, exported: true, typ: $String, tag: "react:\"verticalAlign,omitempty\""}, {prop: "Visibility", name: "Visibility", embedded: false, exported: true, typ: $String, tag: "react:\"visibility,omitempty\""}, {prop: "VoiceBalance", name: "VoiceBalance", embedded: false, exported: true, typ: $String, tag: "react:\"voiceBalance,omitempty\""}, {prop: "VoiceDuration", name: "VoiceDuration", embedded: false, exported: true, typ: $String, tag: "react:\"voiceDuration,omitempty\""}, {prop: "VoiceFamily", name: "VoiceFamily", embedded: false, exported: true, typ: $String, tag: "react:\"voiceFamily,omitempty\""}, {prop: "VoicePitch", name: "VoicePitch", embedded: false, exported: true, typ: $String, tag: "react:\"voicePitch,omitempty\""}, {prop: "VoiceRange", name: "VoiceRange", embedded: false, exported: true, typ: $String, tag: "react:\"voiceRange,omitempty\""}, {prop: "VoiceRate", name: "VoiceRate", embedded: false, exported: true, typ: $String, tag: "react:\"voiceRate,omitempty\""}, {prop: "VoiceStress", name: "VoiceStress", embedded: false, exported: true, typ: $String, tag: "react:\"voiceStress,omitempty\""}, {prop: "VoiceVolume", name: "VoiceVolume", embedded: false, exported: true, typ: $String, tag: "react:\"voiceVolume,omitempty\""}, {prop: "WhiteSpace", name: "WhiteSpace", embedded: false, exported: true, typ: $String, tag: "react:\"whiteSpace,omitempty\""}, {prop: "Widows", name: "Widows", embedded: false, exported: true, typ: $String, tag: "react:\"widows,omitempty\""}, {prop: "Width", name: "Width", embedded: false, exported: true, typ: $String, tag: "react:\"width,omitempty\""}, {prop: "WillChange", name: "WillChange", embedded: false, exported: true, typ: $String, tag: "react:\"willChange,omitempty\""}, {prop: "WordBreak", name: "WordBreak", embedded: false, exported: true, typ: $String, tag: "react:\"wordBreak,omitempty\""}, {prop: "WordSpacing", name: "WordSpacing", embedded: false, exported: true, typ: $String, tag: "react:\"wordSpacing,omitempty\""}, {prop: "WordWrap", name: "WordWrap", embedded: false, exported: true, typ: $String, tag: "react:\"wordWrap,omitempty\""}, {prop: "WrapFlow", name: "WrapFlow", embedded: false, exported: true, typ: $String, tag: "react:\"wrapFlow,omitempty\""}, {prop: "WrapThrough", name: "WrapThrough", embedded: false, exported: true, typ: $String, tag: "react:\"wrapThrough,omitempty\""}, {prop: "WritingMode", name: "WritingMode", embedded: false, exported: true, typ: $String, tag: "react:\"writingMode,omitempty\""}, {prop: "ZIndex", name: "ZIndex", embedded: false, exported: true, typ: $String, tag: "react:\"zIndex,omitempty\""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = react.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$packages["main"] = (function() {
		var $pkg = {}, $init, js, react, elements, AppProps, AppState, ptrType, sliceType, sliceType$1, funcType, sliceType$2, ptrType$1, ptrType$2, ptrType$3, markdown, npm, main, init;
		js = $packages["github.com/gopherjs/gopherjs/js"];
		react = $packages["github.com/rocketlaunchr/react"];
		elements = $packages["github.com/rocketlaunchr/react/elements"];
		AppProps = $pkg.AppProps = $newType(0, $kindStruct, "main.AppProps", true, "main", true, function(DefaultMarkdown_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.DefaultMarkdown = "";
				return;
			}
			this.DefaultMarkdown = DefaultMarkdown_;
		});
		AppState = $pkg.AppState = $newType(0, $kindStruct, "main.AppState", true, "main", true, function(Markdown_) {
			this.$val = this;
			if (arguments.length === 0) {
				this.Markdown = "";
				return;
			}
			this.Markdown = Markdown_;
		});
		ptrType = $ptrType(js.Object);
		sliceType = $sliceType(ptrType);
		sliceType$1 = $sliceType($emptyInterface);
		funcType = $funcType([], [], false);
		sliceType$2 = $sliceType(funcType);
		ptrType$1 = $ptrType($Bool);
		ptrType$2 = $ptrType(elements.Styles);
		ptrType$3 = $ptrType($Int);
		main = function() {
			var _r, _r$1, domTarget, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; domTarget = $f.domTarget; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			domTarget = react.GetElementByID("app", new sliceType([]));
			_r = react.JSX(new $jsObjectPtr($pkg.AppComponent), new AppProps.ptr(markdown), new sliceType$1([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = react.Render(_r, domTarget, new sliceType$2([])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: main }; } $f._r = _r; $f._r$1 = _r$1; $f.domTarget = domTarget; $f.$s = $s; $f.$r = $r; return $f;
		};
		init = function() {
			var appDef;
			appDef = react.NewClassDef("App");
			new react.ClassDef(appDef).GetInitialState((function $b(this$1, props) {
				var _r, appProps, props, this$1, x, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; appProps = $f.appProps; props = $f.props; this$1 = $f.this$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				appProps = [appProps];
				appProps[0] = new AppProps.ptr("");
				_r = react.UnmarshalProps(this$1, appProps[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return (x = new AppState.ptr(appProps[0].DefaultMarkdown), new x.constructor.elem(x));
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.appProps = appProps; $f.props = props; $f.this$1 = this$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
			}));
			new react.ClassDef(appDef).SetEventHandler("change", (function $b(this$1, e, props, state, setState) {
				var e, newValue, props, setState, state, this$1, x, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; newValue = $f.newValue; props = $f.props; setState = $f.setState; state = $f.state; this$1 = $f.this$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				newValue = $internalize(e.Target().value, $String);
				$r = setState((x = new AppState.ptr(newValue), new x.constructor.elem(x)), new sliceType$2([])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.e = e; $f.newValue = newValue; $f.props = props; $f.setState = setState; $f.state = state; $f.this$1 = this$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
			}));
			new react.ClassDef(appDef).Render((function $b(this$1, props, state) {
				var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, appState, props, state, this$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; appState = $f.appState; props = $f.props; state = $f.state; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				appState = [appState];
				appState[0] = new AppState.ptr("");
				_r = react.UnmarshalState(this$1, appState[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg = new elements.DivProps.ptr(false, false, $ifaceNil, "", "app", ptrType$1.nil, "", ptrType$1.nil, "", ptrType$1.nil, "", "", ptrType$1.nil, "", "", "", null, "", ptrType$2.nil, null, null, null, null);
				_r$1 = elements.TextArea(new elements.TextAreaProps.ptr(false, false, $ifaceNil, "", "editor", ptrType$1.nil, "", ptrType$1.nil, "", ptrType$1.nil, "", "", ptrType$1.nil, "", "", "", null, "", ptrType$2.nil, null, null, this$1.change, null, "", ptrType$1.nil, ptrType$3.nil, appState[0].Markdown, "", ptrType$1.nil, ptrType$3.nil, "", "", ptrType$1.nil, ptrType$1.nil, ptrType$3.nil, "", ptrType$3.nil, ptrType$3.nil, ptrType$3.nil, "", "", "", ptrType$1.nil, ""), new sliceType$1([])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_arg$1 = new $jsObjectPtr(_r$1);
				_r$2 = react.JSX(new $jsObjectPtr($pkg.Markdown), new js.M($makeMap($String.keyFor, [{ k: "className", v: new $String("preview") }, { k: "source", v: new $String(appState[0].Markdown) }, { k: "escapeHtml", v: new $Bool(false) }])), new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$2 = new $jsObjectPtr(_r$2);
				_r$3 = elements.Div(_arg, new sliceType$1([_arg$1, _arg$2])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return new $jsObjectPtr(_r$3);
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.appState = appState; $f.props = props; $f.state = state; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
			}));
			$pkg.AppComponent = react.CreateClass(appDef);
		};
		AppProps.init("", [{prop: "DefaultMarkdown", name: "DefaultMarkdown", embedded: false, exported: true, typ: $String, tag: "react:\"default_markdown\""}]);
		AppState.init("", [{prop: "Markdown", name: "Markdown", embedded: false, exported: true, typ: $String, tag: "react:\"markdown\""}]);
		$init = function() {
			$pkg.$init = function() {};
			/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = react.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = elements.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$pkg.AppComponent = null;
			markdown = "\n# Visual Markdown\n";
			npm = $global.npm;
			$pkg.Markdown = npm.Markdown;
			init();
			/* */ if ($pkg === $mainPkg) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($pkg === $mainPkg) { */ case 4:
				$r = main(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$mainFinished = true;
			/* } */ case 5:
			/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
		};
		$pkg.$init = $init;
		return $pkg;
	})();
	$synthesizeMethods();
	var $mainPkg = $packages["main"];
	$packages["runtime"].$init();
	$go($mainPkg.$init, []);
	$flushConsole();

	}).call(commonjsGlobal);

	});

	return renderer_go;

}());
